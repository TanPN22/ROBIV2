
ROBI_BEVA_V2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000510c  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005240  08005240  00015240  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005288  08005288  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  08005288  08005288  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005288  08005288  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005288  08005288  00015288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800528c  0800528c  0001528c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08005290  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e0  200000d0  08005360  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b0  08005360  000206b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aa6c  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cce  00000000  00000000  0002aba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d58  00000000  00000000  0002d878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ce  00000000  00000000  0002e5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000e263  00000000  00000000  0002ef9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c94d  00000000  00000000  0003d201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004be33  00000000  00000000  00049b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d14  00000000  00000000  00095984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  00099698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000d0 	.word	0x200000d0
 800014c:	00000000 	.word	0x00000000
 8000150:	08005224 	.word	0x08005224

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000d4 	.word	0x200000d4
 800016c:	08005224 	.word	0x08005224

08000170 <__aeabi_fmul>:
 8000170:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000174:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000178:	bf1e      	ittt	ne
 800017a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800017e:	ea92 0f0c 	teqne	r2, ip
 8000182:	ea93 0f0c 	teqne	r3, ip
 8000186:	d06f      	beq.n	8000268 <__aeabi_fmul+0xf8>
 8000188:	441a      	add	r2, r3
 800018a:	ea80 0c01 	eor.w	ip, r0, r1
 800018e:	0240      	lsls	r0, r0, #9
 8000190:	bf18      	it	ne
 8000192:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000196:	d01e      	beq.n	80001d6 <__aeabi_fmul+0x66>
 8000198:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800019c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001a0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001a4:	fba0 3101 	umull	r3, r1, r0, r1
 80001a8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001ac:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001b0:	bf3e      	ittt	cc
 80001b2:	0049      	lslcc	r1, r1, #1
 80001b4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001b8:	005b      	lslcc	r3, r3, #1
 80001ba:	ea40 0001 	orr.w	r0, r0, r1
 80001be:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001c2:	2afd      	cmp	r2, #253	; 0xfd
 80001c4:	d81d      	bhi.n	8000202 <__aeabi_fmul+0x92>
 80001c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ce:	bf08      	it	eq
 80001d0:	f020 0001 	biceq.w	r0, r0, #1
 80001d4:	4770      	bx	lr
 80001d6:	f090 0f00 	teq	r0, #0
 80001da:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001de:	bf08      	it	eq
 80001e0:	0249      	lsleq	r1, r1, #9
 80001e2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001e6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ea:	3a7f      	subs	r2, #127	; 0x7f
 80001ec:	bfc2      	ittt	gt
 80001ee:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001f2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001f6:	4770      	bxgt	lr
 80001f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001fc:	f04f 0300 	mov.w	r3, #0
 8000200:	3a01      	subs	r2, #1
 8000202:	dc5d      	bgt.n	80002c0 <__aeabi_fmul+0x150>
 8000204:	f112 0f19 	cmn.w	r2, #25
 8000208:	bfdc      	itt	le
 800020a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800020e:	4770      	bxle	lr
 8000210:	f1c2 0200 	rsb	r2, r2, #0
 8000214:	0041      	lsls	r1, r0, #1
 8000216:	fa21 f102 	lsr.w	r1, r1, r2
 800021a:	f1c2 0220 	rsb	r2, r2, #32
 800021e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000222:	ea5f 0031 	movs.w	r0, r1, rrx
 8000226:	f140 0000 	adc.w	r0, r0, #0
 800022a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800022e:	bf08      	it	eq
 8000230:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000234:	4770      	bx	lr
 8000236:	f092 0f00 	teq	r2, #0
 800023a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800023e:	bf02      	ittt	eq
 8000240:	0040      	lsleq	r0, r0, #1
 8000242:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000246:	3a01      	subeq	r2, #1
 8000248:	d0f9      	beq.n	800023e <__aeabi_fmul+0xce>
 800024a:	ea40 000c 	orr.w	r0, r0, ip
 800024e:	f093 0f00 	teq	r3, #0
 8000252:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000256:	bf02      	ittt	eq
 8000258:	0049      	lsleq	r1, r1, #1
 800025a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800025e:	3b01      	subeq	r3, #1
 8000260:	d0f9      	beq.n	8000256 <__aeabi_fmul+0xe6>
 8000262:	ea41 010c 	orr.w	r1, r1, ip
 8000266:	e78f      	b.n	8000188 <__aeabi_fmul+0x18>
 8000268:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800026c:	ea92 0f0c 	teq	r2, ip
 8000270:	bf18      	it	ne
 8000272:	ea93 0f0c 	teqne	r3, ip
 8000276:	d00a      	beq.n	800028e <__aeabi_fmul+0x11e>
 8000278:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800027c:	bf18      	it	ne
 800027e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000282:	d1d8      	bne.n	8000236 <__aeabi_fmul+0xc6>
 8000284:	ea80 0001 	eor.w	r0, r0, r1
 8000288:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f090 0f00 	teq	r0, #0
 8000292:	bf17      	itett	ne
 8000294:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000298:	4608      	moveq	r0, r1
 800029a:	f091 0f00 	teqne	r1, #0
 800029e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002a2:	d014      	beq.n	80002ce <__aeabi_fmul+0x15e>
 80002a4:	ea92 0f0c 	teq	r2, ip
 80002a8:	d101      	bne.n	80002ae <__aeabi_fmul+0x13e>
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	d10f      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002ae:	ea93 0f0c 	teq	r3, ip
 80002b2:	d103      	bne.n	80002bc <__aeabi_fmul+0x14c>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	bf18      	it	ne
 80002b8:	4608      	movne	r0, r1
 80002ba:	d108      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002bc:	ea80 0001 	eor.w	r0, r0, r1
 80002c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002cc:	4770      	bx	lr
 80002ce:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002d2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002d6:	4770      	bx	lr

080002d8 <__aeabi_drsub>:
 80002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002dc:	e002      	b.n	80002e4 <__adddf3>
 80002de:	bf00      	nop

080002e0 <__aeabi_dsub>:
 80002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e4 <__adddf3>:
 80002e4:	b530      	push	{r4, r5, lr}
 80002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ee:	ea94 0f05 	teq	r4, r5
 80002f2:	bf08      	it	eq
 80002f4:	ea90 0f02 	teqeq	r0, r2
 80002f8:	bf1f      	itttt	ne
 80002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030a:	f000 80e2 	beq.w	80004d2 <__adddf3+0x1ee>
 800030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000316:	bfb8      	it	lt
 8000318:	426d      	neglt	r5, r5
 800031a:	dd0c      	ble.n	8000336 <__adddf3+0x52>
 800031c:	442c      	add	r4, r5
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	ea82 0000 	eor.w	r0, r2, r0
 800032a:	ea83 0101 	eor.w	r1, r3, r1
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	2d36      	cmp	r5, #54	; 0x36
 8000338:	bf88      	it	hi
 800033a:	bd30      	pophi	{r4, r5, pc}
 800033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800034c:	d002      	beq.n	8000354 <__adddf3+0x70>
 800034e:	4240      	negs	r0, r0
 8000350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000360:	d002      	beq.n	8000368 <__adddf3+0x84>
 8000362:	4252      	negs	r2, r2
 8000364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000368:	ea94 0f05 	teq	r4, r5
 800036c:	f000 80a7 	beq.w	80004be <__adddf3+0x1da>
 8000370:	f1a4 0401 	sub.w	r4, r4, #1
 8000374:	f1d5 0e20 	rsbs	lr, r5, #32
 8000378:	db0d      	blt.n	8000396 <__adddf3+0xb2>
 800037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037e:	fa22 f205 	lsr.w	r2, r2, r5
 8000382:	1880      	adds	r0, r0, r2
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	fa03 f20e 	lsl.w	r2, r3, lr
 800038c:	1880      	adds	r0, r0, r2
 800038e:	fa43 f305 	asr.w	r3, r3, r5
 8000392:	4159      	adcs	r1, r3
 8000394:	e00e      	b.n	80003b4 <__adddf3+0xd0>
 8000396:	f1a5 0520 	sub.w	r5, r5, #32
 800039a:	f10e 0e20 	add.w	lr, lr, #32
 800039e:	2a01      	cmp	r2, #1
 80003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a4:	bf28      	it	cs
 80003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003aa:	fa43 f305 	asr.w	r3, r3, r5
 80003ae:	18c0      	adds	r0, r0, r3
 80003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b8:	d507      	bpl.n	80003ca <__adddf3+0xe6>
 80003ba:	f04f 0e00 	mov.w	lr, #0
 80003be:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ce:	d31b      	bcc.n	8000408 <__adddf3+0x124>
 80003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d4:	d30c      	bcc.n	80003f0 <__adddf3+0x10c>
 80003d6:	0849      	lsrs	r1, r1, #1
 80003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e0:	f104 0401 	add.w	r4, r4, #1
 80003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003ec:	f080 809a 	bcs.w	8000524 <__adddf3+0x240>
 80003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f4:	bf08      	it	eq
 80003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fa:	f150 0000 	adcs.w	r0, r0, #0
 80003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000402:	ea41 0105 	orr.w	r1, r1, r5
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800040c:	4140      	adcs	r0, r0
 800040e:	eb41 0101 	adc.w	r1, r1, r1
 8000412:	3c01      	subs	r4, #1
 8000414:	bf28      	it	cs
 8000416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800041a:	d2e9      	bcs.n	80003f0 <__adddf3+0x10c>
 800041c:	f091 0f00 	teq	r1, #0
 8000420:	bf04      	itt	eq
 8000422:	4601      	moveq	r1, r0
 8000424:	2000      	moveq	r0, #0
 8000426:	fab1 f381 	clz	r3, r1
 800042a:	bf08      	it	eq
 800042c:	3320      	addeq	r3, #32
 800042e:	f1a3 030b 	sub.w	r3, r3, #11
 8000432:	f1b3 0220 	subs.w	r2, r3, #32
 8000436:	da0c      	bge.n	8000452 <__adddf3+0x16e>
 8000438:	320c      	adds	r2, #12
 800043a:	dd08      	ble.n	800044e <__adddf3+0x16a>
 800043c:	f102 0c14 	add.w	ip, r2, #20
 8000440:	f1c2 020c 	rsb	r2, r2, #12
 8000444:	fa01 f00c 	lsl.w	r0, r1, ip
 8000448:	fa21 f102 	lsr.w	r1, r1, r2
 800044c:	e00c      	b.n	8000468 <__adddf3+0x184>
 800044e:	f102 0214 	add.w	r2, r2, #20
 8000452:	bfd8      	it	le
 8000454:	f1c2 0c20 	rsble	ip, r2, #32
 8000458:	fa01 f102 	lsl.w	r1, r1, r2
 800045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000460:	bfdc      	itt	le
 8000462:	ea41 010c 	orrle.w	r1, r1, ip
 8000466:	4090      	lslle	r0, r2
 8000468:	1ae4      	subs	r4, r4, r3
 800046a:	bfa2      	ittt	ge
 800046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000470:	4329      	orrge	r1, r5
 8000472:	bd30      	popge	{r4, r5, pc}
 8000474:	ea6f 0404 	mvn.w	r4, r4
 8000478:	3c1f      	subs	r4, #31
 800047a:	da1c      	bge.n	80004b6 <__adddf3+0x1d2>
 800047c:	340c      	adds	r4, #12
 800047e:	dc0e      	bgt.n	800049e <__adddf3+0x1ba>
 8000480:	f104 0414 	add.w	r4, r4, #20
 8000484:	f1c4 0220 	rsb	r2, r4, #32
 8000488:	fa20 f004 	lsr.w	r0, r0, r4
 800048c:	fa01 f302 	lsl.w	r3, r1, r2
 8000490:	ea40 0003 	orr.w	r0, r0, r3
 8000494:	fa21 f304 	lsr.w	r3, r1, r4
 8000498:	ea45 0103 	orr.w	r1, r5, r3
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f1c4 040c 	rsb	r4, r4, #12
 80004a2:	f1c4 0220 	rsb	r2, r4, #32
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 f304 	lsl.w	r3, r1, r4
 80004ae:	ea40 0003 	orr.w	r0, r0, r3
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	f094 0f00 	teq	r4, #0
 80004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c6:	bf06      	itte	eq
 80004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004cc:	3401      	addeq	r4, #1
 80004ce:	3d01      	subne	r5, #1
 80004d0:	e74e      	b.n	8000370 <__adddf3+0x8c>
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf18      	it	ne
 80004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004dc:	d029      	beq.n	8000532 <__adddf3+0x24e>
 80004de:	ea94 0f05 	teq	r4, r5
 80004e2:	bf08      	it	eq
 80004e4:	ea90 0f02 	teqeq	r0, r2
 80004e8:	d005      	beq.n	80004f6 <__adddf3+0x212>
 80004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ee:	bf04      	itt	eq
 80004f0:	4619      	moveq	r1, r3
 80004f2:	4610      	moveq	r0, r2
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	ea91 0f03 	teq	r1, r3
 80004fa:	bf1e      	ittt	ne
 80004fc:	2100      	movne	r1, #0
 80004fe:	2000      	movne	r0, #0
 8000500:	bd30      	popne	{r4, r5, pc}
 8000502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000506:	d105      	bne.n	8000514 <__adddf3+0x230>
 8000508:	0040      	lsls	r0, r0, #1
 800050a:	4149      	adcs	r1, r1
 800050c:	bf28      	it	cs
 800050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000512:	bd30      	pop	{r4, r5, pc}
 8000514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000518:	bf3c      	itt	cc
 800051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051e:	bd30      	popcc	{r4, r5, pc}
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800052c:	f04f 0000 	mov.w	r0, #0
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000536:	bf1a      	itte	ne
 8000538:	4619      	movne	r1, r3
 800053a:	4610      	movne	r0, r2
 800053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000540:	bf1c      	itt	ne
 8000542:	460b      	movne	r3, r1
 8000544:	4602      	movne	r2, r0
 8000546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054a:	bf06      	itte	eq
 800054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000550:	ea91 0f03 	teqeq	r1, r3
 8000554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	bf00      	nop

0800055c <__aeabi_ui2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f04f 0500 	mov.w	r5, #0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e750      	b.n	800041c <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_i2d>:
 800057c:	f090 0f00 	teq	r0, #0
 8000580:	bf04      	itt	eq
 8000582:	2100      	moveq	r1, #0
 8000584:	4770      	bxeq	lr
 8000586:	b530      	push	{r4, r5, lr}
 8000588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000594:	bf48      	it	mi
 8000596:	4240      	negmi	r0, r0
 8000598:	f04f 0100 	mov.w	r1, #0
 800059c:	e73e      	b.n	800041c <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_f2d>:
 80005a0:	0042      	lsls	r2, r0, #1
 80005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ae:	bf1f      	itttt	ne
 80005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005bc:	4770      	bxne	lr
 80005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005c2:	bf08      	it	eq
 80005c4:	4770      	bxeq	lr
 80005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ca:	bf04      	itt	eq
 80005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d0:	4770      	bxeq	lr
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	e71c      	b.n	800041c <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_ul2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	e00a      	b.n	800060a <__aeabi_l2d+0x16>

080005f4 <__aeabi_l2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000602:	d502      	bpl.n	800060a <__aeabi_l2d+0x16>
 8000604:	4240      	negs	r0, r0
 8000606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000616:	f43f aed8 	beq.w	80003ca <__adddf3+0xe6>
 800061a:	f04f 0203 	mov.w	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	fa00 fc03 	lsl.w	ip, r0, r3
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000642:	ea40 000e 	orr.w	r0, r0, lr
 8000646:	fa21 f102 	lsr.w	r1, r1, r2
 800064a:	4414      	add	r4, r2
 800064c:	e6bd      	b.n	80003ca <__adddf3+0xe6>
 800064e:	bf00      	nop

08000650 <__aeabi_dmul>:
 8000650:	b570      	push	{r4, r5, r6, lr}
 8000652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065e:	bf1d      	ittte	ne
 8000660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000664:	ea94 0f0c 	teqne	r4, ip
 8000668:	ea95 0f0c 	teqne	r5, ip
 800066c:	f000 f8de 	bleq	800082c <__aeabi_dmul+0x1dc>
 8000670:	442c      	add	r4, r5
 8000672:	ea81 0603 	eor.w	r6, r1, r3
 8000676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000682:	bf18      	it	ne
 8000684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000690:	d038      	beq.n	8000704 <__aeabi_dmul+0xb4>
 8000692:	fba0 ce02 	umull	ip, lr, r0, r2
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a6:	f04f 0600 	mov.w	r6, #0
 80006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ae:	f09c 0f00 	teq	ip, #0
 80006b2:	bf18      	it	ne
 80006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c4:	d204      	bcs.n	80006d0 <__aeabi_dmul+0x80>
 80006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ca:	416d      	adcs	r5, r5
 80006cc:	eb46 0606 	adc.w	r6, r6, r6
 80006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e8:	bf88      	it	hi
 80006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ee:	d81e      	bhi.n	800072e <__aeabi_dmul+0xde>
 80006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f4:	bf08      	it	eq
 80006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006fa:	f150 0000 	adcs.w	r0, r0, #0
 80006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000708:	ea46 0101 	orr.w	r1, r6, r1
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000718:	bfc2      	ittt	gt
 800071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000722:	bd70      	popgt	{r4, r5, r6, pc}
 8000724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000728:	f04f 0e00 	mov.w	lr, #0
 800072c:	3c01      	subs	r4, #1
 800072e:	f300 80ab 	bgt.w	8000888 <__aeabi_dmul+0x238>
 8000732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000736:	bfde      	ittt	le
 8000738:	2000      	movle	r0, #0
 800073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd70      	pople	{r4, r5, r6, pc}
 8000740:	f1c4 0400 	rsb	r4, r4, #0
 8000744:	3c20      	subs	r4, #32
 8000746:	da35      	bge.n	80007b4 <__aeabi_dmul+0x164>
 8000748:	340c      	adds	r4, #12
 800074a:	dc1b      	bgt.n	8000784 <__aeabi_dmul+0x134>
 800074c:	f104 0414 	add.w	r4, r4, #20
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f305 	lsl.w	r3, r0, r5
 8000758:	fa20 f004 	lsr.w	r0, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000770:	fa21 f604 	lsr.w	r6, r1, r4
 8000774:	eb42 0106 	adc.w	r1, r2, r6
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 040c 	rsb	r4, r4, #12
 8000788:	f1c4 0520 	rsb	r5, r4, #32
 800078c:	fa00 f304 	lsl.w	r3, r0, r4
 8000790:	fa20 f005 	lsr.w	r0, r0, r5
 8000794:	fa01 f204 	lsl.w	r2, r1, r4
 8000798:	ea40 0002 	orr.w	r0, r0, r2
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a4:	f141 0100 	adc.w	r1, r1, #0
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f1c4 0520 	rsb	r5, r4, #32
 80007b8:	fa00 f205 	lsl.w	r2, r0, r5
 80007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c0:	fa20 f304 	lsr.w	r3, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea43 0302 	orr.w	r3, r3, r2
 80007cc:	fa21 f004 	lsr.w	r0, r1, r4
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	fa21 f204 	lsr.w	r2, r1, r4
 80007d8:	ea20 0002 	bic.w	r0, r0, r2
 80007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f094 0f00 	teq	r4, #0
 80007f0:	d10f      	bne.n	8000812 <__aeabi_dmul+0x1c2>
 80007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007f6:	0040      	lsls	r0, r0, #1
 80007f8:	eb41 0101 	adc.w	r1, r1, r1
 80007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3c01      	subeq	r4, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1a6>
 8000806:	ea41 0106 	orr.w	r1, r1, r6
 800080a:	f095 0f00 	teq	r5, #0
 800080e:	bf18      	it	ne
 8000810:	4770      	bxne	lr
 8000812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000816:	0052      	lsls	r2, r2, #1
 8000818:	eb43 0303 	adc.w	r3, r3, r3
 800081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000820:	bf08      	it	eq
 8000822:	3d01      	subeq	r5, #1
 8000824:	d0f7      	beq.n	8000816 <__aeabi_dmul+0x1c6>
 8000826:	ea43 0306 	orr.w	r3, r3, r6
 800082a:	4770      	bx	lr
 800082c:	ea94 0f0c 	teq	r4, ip
 8000830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000834:	bf18      	it	ne
 8000836:	ea95 0f0c 	teqne	r5, ip
 800083a:	d00c      	beq.n	8000856 <__aeabi_dmul+0x206>
 800083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000840:	bf18      	it	ne
 8000842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000846:	d1d1      	bne.n	80007ec <__aeabi_dmul+0x19c>
 8000848:	ea81 0103 	eor.w	r1, r1, r3
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085a:	bf06      	itte	eq
 800085c:	4610      	moveq	r0, r2
 800085e:	4619      	moveq	r1, r3
 8000860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000864:	d019      	beq.n	800089a <__aeabi_dmul+0x24a>
 8000866:	ea94 0f0c 	teq	r4, ip
 800086a:	d102      	bne.n	8000872 <__aeabi_dmul+0x222>
 800086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000870:	d113      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000872:	ea95 0f0c 	teq	r5, ip
 8000876:	d105      	bne.n	8000884 <__aeabi_dmul+0x234>
 8000878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800087c:	bf1c      	itt	ne
 800087e:	4610      	movne	r0, r2
 8000880:	4619      	movne	r1, r3
 8000882:	d10a      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000884:	ea81 0103 	eor.w	r1, r1, r3
 8000888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	bd70      	pop	{r4, r5, r6, pc}
 800089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008a2:	bd70      	pop	{r4, r5, r6, pc}

080008a4 <__aeabi_ddiv>:
 80008a4:	b570      	push	{r4, r5, r6, lr}
 80008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b2:	bf1d      	ittte	ne
 80008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b8:	ea94 0f0c 	teqne	r4, ip
 80008bc:	ea95 0f0c 	teqne	r5, ip
 80008c0:	f000 f8a7 	bleq	8000a12 <__aeabi_ddiv+0x16e>
 80008c4:	eba4 0405 	sub.w	r4, r4, r5
 80008c8:	ea81 0e03 	eor.w	lr, r1, r3
 80008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d4:	f000 8088 	beq.w	80009e8 <__aeabi_ddiv+0x144>
 80008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008fc:	429d      	cmp	r5, r3
 80008fe:	bf08      	it	eq
 8000900:	4296      	cmpeq	r6, r2
 8000902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800090a:	d202      	bcs.n	8000912 <__aeabi_ddiv+0x6e>
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	1ab6      	subs	r6, r6, r2
 8000914:	eb65 0503 	sbc.w	r5, r5, r3
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 000c 	orrcs.w	r0, r0, ip
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000980:	ea55 0e06 	orrs.w	lr, r5, r6
 8000984:	d018      	beq.n	80009b8 <__aeabi_ddiv+0x114>
 8000986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009a2:	d1c0      	bne.n	8000926 <__aeabi_ddiv+0x82>
 80009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a8:	d10b      	bne.n	80009c2 <__aeabi_ddiv+0x11e>
 80009aa:	ea41 0100 	orr.w	r1, r1, r0
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009b6:	e7b6      	b.n	8000926 <__aeabi_ddiv+0x82>
 80009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009bc:	bf04      	itt	eq
 80009be:	4301      	orreq	r1, r0
 80009c0:	2000      	moveq	r0, #0
 80009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009c6:	bf88      	it	hi
 80009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009cc:	f63f aeaf 	bhi.w	800072e <__aeabi_dmul+0xde>
 80009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d4:	bf04      	itt	eq
 80009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009de:	f150 0000 	adcs.w	r0, r0, #0
 80009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	pop	{r4, r5, r6, pc}
 80009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f4:	bfc2      	ittt	gt
 80009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a04:	f04f 0e00 	mov.w	lr, #0
 8000a08:	3c01      	subs	r4, #1
 8000a0a:	e690      	b.n	800072e <__aeabi_dmul+0xde>
 8000a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a10:	e68d      	b.n	800072e <__aeabi_dmul+0xde>
 8000a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a16:	ea94 0f0c 	teq	r4, ip
 8000a1a:	bf08      	it	eq
 8000a1c:	ea95 0f0c 	teqeq	r5, ip
 8000a20:	f43f af3b 	beq.w	800089a <__aeabi_dmul+0x24a>
 8000a24:	ea94 0f0c 	teq	r4, ip
 8000a28:	d10a      	bne.n	8000a40 <__aeabi_ddiv+0x19c>
 8000a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2e:	f47f af34 	bne.w	800089a <__aeabi_dmul+0x24a>
 8000a32:	ea95 0f0c 	teq	r5, ip
 8000a36:	f47f af25 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	e72c      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a40:	ea95 0f0c 	teq	r5, ip
 8000a44:	d106      	bne.n	8000a54 <__aeabi_ddiv+0x1b0>
 8000a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a4a:	f43f aefd 	beq.w	8000848 <__aeabi_dmul+0x1f8>
 8000a4e:	4610      	mov	r0, r2
 8000a50:	4619      	mov	r1, r3
 8000a52:	e722      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5e:	f47f aec5 	bne.w	80007ec <__aeabi_dmul+0x19c>
 8000a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a66:	f47f af0d 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6e:	f47f aeeb 	bne.w	8000848 <__aeabi_dmul+0x1f8>
 8000a72:	e712      	b.n	800089a <__aeabi_dmul+0x24a>

08000a74 <__gedf2>:
 8000a74:	f04f 3cff 	mov.w	ip, #4294967295
 8000a78:	e006      	b.n	8000a88 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__ledf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	e002      	b.n	8000a88 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__cmpdf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	bf18      	it	ne
 8000a9a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a9e:	d01b      	beq.n	8000ad8 <__cmpdf2+0x54>
 8000aa0:	b001      	add	sp, #4
 8000aa2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aa6:	bf0c      	ite	eq
 8000aa8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aac:	ea91 0f03 	teqne	r1, r3
 8000ab0:	bf02      	ittt	eq
 8000ab2:	ea90 0f02 	teqeq	r0, r2
 8000ab6:	2000      	moveq	r0, #0
 8000ab8:	4770      	bxeq	lr
 8000aba:	f110 0f00 	cmn.w	r0, #0
 8000abe:	ea91 0f03 	teq	r1, r3
 8000ac2:	bf58      	it	pl
 8000ac4:	4299      	cmppl	r1, r3
 8000ac6:	bf08      	it	eq
 8000ac8:	4290      	cmpeq	r0, r2
 8000aca:	bf2c      	ite	cs
 8000acc:	17d8      	asrcs	r0, r3, #31
 8000ace:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ad2:	f040 0001 	orr.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d102      	bne.n	8000ae8 <__cmpdf2+0x64>
 8000ae2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae6:	d107      	bne.n	8000af8 <__cmpdf2+0x74>
 8000ae8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af0:	d1d6      	bne.n	8000aa0 <__cmpdf2+0x1c>
 8000af2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af6:	d0d3      	beq.n	8000aa0 <__cmpdf2+0x1c>
 8000af8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdrcmple>:
 8000b00:	4684      	mov	ip, r0
 8000b02:	4610      	mov	r0, r2
 8000b04:	4662      	mov	r2, ip
 8000b06:	468c      	mov	ip, r1
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4663      	mov	r3, ip
 8000b0c:	e000      	b.n	8000b10 <__aeabi_cdcmpeq>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_cdcmpeq>:
 8000b10:	b501      	push	{r0, lr}
 8000b12:	f7ff ffb7 	bl	8000a84 <__cmpdf2>
 8000b16:	2800      	cmp	r0, #0
 8000b18:	bf48      	it	mi
 8000b1a:	f110 0f00 	cmnmi.w	r0, #0
 8000b1e:	bd01      	pop	{r0, pc}

08000b20 <__aeabi_dcmpeq>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff fff4 	bl	8000b10 <__aeabi_cdcmpeq>
 8000b28:	bf0c      	ite	eq
 8000b2a:	2001      	moveq	r0, #1
 8000b2c:	2000      	movne	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmplt>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffea 	bl	8000b10 <__aeabi_cdcmpeq>
 8000b3c:	bf34      	ite	cc
 8000b3e:	2001      	movcc	r0, #1
 8000b40:	2000      	movcs	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmple>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffe0 	bl	8000b10 <__aeabi_cdcmpeq>
 8000b50:	bf94      	ite	ls
 8000b52:	2001      	movls	r0, #1
 8000b54:	2000      	movhi	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpge>:
 8000b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b60:	f7ff ffce 	bl	8000b00 <__aeabi_cdrcmple>
 8000b64:	bf94      	ite	ls
 8000b66:	2001      	movls	r0, #1
 8000b68:	2000      	movhi	r0, #0
 8000b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6e:	bf00      	nop

08000b70 <__aeabi_dcmpgt>:
 8000b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b74:	f7ff ffc4 	bl	8000b00 <__aeabi_cdrcmple>
 8000b78:	bf34      	ite	cc
 8000b7a:	2001      	movcc	r0, #1
 8000b7c:	2000      	movcs	r0, #0
 8000b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b82:	bf00      	nop

08000b84 <__aeabi_dcmpun>:
 8000b84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x10>
 8000b8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b92:	d10a      	bne.n	8000baa <__aeabi_dcmpun+0x26>
 8000b94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b9c:	d102      	bne.n	8000ba4 <__aeabi_dcmpun+0x20>
 8000b9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ba2:	d102      	bne.n	8000baa <__aeabi_dcmpun+0x26>
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	f04f 0001 	mov.w	r0, #1
 8000bae:	4770      	bx	lr

08000bb0 <__aeabi_d2iz>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb8:	d215      	bcs.n	8000be6 <__aeabi_d2iz+0x36>
 8000bba:	d511      	bpl.n	8000be0 <__aeabi_d2iz+0x30>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d912      	bls.n	8000bec <__aeabi_d2iz+0x3c>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bd6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d105      	bne.n	8000bf8 <__aeabi_d2iz+0x48>
 8000bec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	bf08      	it	eq
 8000bf2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_d2f>:
 8000c00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c08:	bf24      	itt	cs
 8000c0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c12:	d90d      	bls.n	8000c30 <__aeabi_d2f+0x30>
 8000c14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c28:	bf08      	it	eq
 8000c2a:	f020 0001 	biceq.w	r0, r0, #1
 8000c2e:	4770      	bx	lr
 8000c30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c34:	d121      	bne.n	8000c7a <__aeabi_d2f+0x7a>
 8000c36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c3a:	bfbc      	itt	lt
 8000c3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	4770      	bxlt	lr
 8000c42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c4a:	f1c2 0218 	rsb	r2, r2, #24
 8000c4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c56:	fa20 f002 	lsr.w	r0, r0, r2
 8000c5a:	bf18      	it	ne
 8000c5c:	f040 0001 	orrne.w	r0, r0, #1
 8000c60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c6c:	ea40 000c 	orr.w	r0, r0, ip
 8000c70:	fa23 f302 	lsr.w	r3, r3, r2
 8000c74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c78:	e7cc      	b.n	8000c14 <__aeabi_d2f+0x14>
 8000c7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7e:	d107      	bne.n	8000c90 <__aeabi_d2f+0x90>
 8000c80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c84:	bf1e      	ittt	ne
 8000c86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8e:	4770      	bxne	lr
 8000c90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_frsub>:
 8000ca0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ca4:	e002      	b.n	8000cac <__addsf3>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_fsub>:
 8000ca8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cac <__addsf3>:
 8000cac:	0042      	lsls	r2, r0, #1
 8000cae:	bf1f      	itttt	ne
 8000cb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cb4:	ea92 0f03 	teqne	r2, r3
 8000cb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cc0:	d06a      	beq.n	8000d98 <__addsf3+0xec>
 8000cc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cca:	bfc1      	itttt	gt
 8000ccc:	18d2      	addgt	r2, r2, r3
 8000cce:	4041      	eorgt	r1, r0
 8000cd0:	4048      	eorgt	r0, r1
 8000cd2:	4041      	eorgt	r1, r0
 8000cd4:	bfb8      	it	lt
 8000cd6:	425b      	neglt	r3, r3
 8000cd8:	2b19      	cmp	r3, #25
 8000cda:	bf88      	it	hi
 8000cdc:	4770      	bxhi	lr
 8000cde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ce2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cea:	bf18      	it	ne
 8000cec:	4240      	negne	r0, r0
 8000cee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cfa:	bf18      	it	ne
 8000cfc:	4249      	negne	r1, r1
 8000cfe:	ea92 0f03 	teq	r2, r3
 8000d02:	d03f      	beq.n	8000d84 <__addsf3+0xd8>
 8000d04:	f1a2 0201 	sub.w	r2, r2, #1
 8000d08:	fa41 fc03 	asr.w	ip, r1, r3
 8000d0c:	eb10 000c 	adds.w	r0, r0, ip
 8000d10:	f1c3 0320 	rsb	r3, r3, #32
 8000d14:	fa01 f103 	lsl.w	r1, r1, r3
 8000d18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d1c:	d502      	bpl.n	8000d24 <__addsf3+0x78>
 8000d1e:	4249      	negs	r1, r1
 8000d20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d28:	d313      	bcc.n	8000d52 <__addsf3+0xa6>
 8000d2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d2e:	d306      	bcc.n	8000d3e <__addsf3+0x92>
 8000d30:	0840      	lsrs	r0, r0, #1
 8000d32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d36:	f102 0201 	add.w	r2, r2, #1
 8000d3a:	2afe      	cmp	r2, #254	; 0xfe
 8000d3c:	d251      	bcs.n	8000de2 <__addsf3+0x136>
 8000d3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d46:	bf08      	it	eq
 8000d48:	f020 0001 	biceq.w	r0, r0, #1
 8000d4c:	ea40 0003 	orr.w	r0, r0, r3
 8000d50:	4770      	bx	lr
 8000d52:	0049      	lsls	r1, r1, #1
 8000d54:	eb40 0000 	adc.w	r0, r0, r0
 8000d58:	3a01      	subs	r2, #1
 8000d5a:	bf28      	it	cs
 8000d5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d60:	d2ed      	bcs.n	8000d3e <__addsf3+0x92>
 8000d62:	fab0 fc80 	clz	ip, r0
 8000d66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d72:	bfaa      	itet	ge
 8000d74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d78:	4252      	neglt	r2, r2
 8000d7a:	4318      	orrge	r0, r3
 8000d7c:	bfbc      	itt	lt
 8000d7e:	40d0      	lsrlt	r0, r2
 8000d80:	4318      	orrlt	r0, r3
 8000d82:	4770      	bx	lr
 8000d84:	f092 0f00 	teq	r2, #0
 8000d88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d8c:	bf06      	itte	eq
 8000d8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d92:	3201      	addeq	r2, #1
 8000d94:	3b01      	subne	r3, #1
 8000d96:	e7b5      	b.n	8000d04 <__addsf3+0x58>
 8000d98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000da0:	bf18      	it	ne
 8000da2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000da6:	d021      	beq.n	8000dec <__addsf3+0x140>
 8000da8:	ea92 0f03 	teq	r2, r3
 8000dac:	d004      	beq.n	8000db8 <__addsf3+0x10c>
 8000dae:	f092 0f00 	teq	r2, #0
 8000db2:	bf08      	it	eq
 8000db4:	4608      	moveq	r0, r1
 8000db6:	4770      	bx	lr
 8000db8:	ea90 0f01 	teq	r0, r1
 8000dbc:	bf1c      	itt	ne
 8000dbe:	2000      	movne	r0, #0
 8000dc0:	4770      	bxne	lr
 8000dc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dc6:	d104      	bne.n	8000dd2 <__addsf3+0x126>
 8000dc8:	0040      	lsls	r0, r0, #1
 8000dca:	bf28      	it	cs
 8000dcc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dd0:	4770      	bx	lr
 8000dd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dd6:	bf3c      	itt	cc
 8000dd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ddc:	4770      	bxcc	lr
 8000dde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000de2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000de6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dea:	4770      	bx	lr
 8000dec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000df0:	bf16      	itet	ne
 8000df2:	4608      	movne	r0, r1
 8000df4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000df8:	4601      	movne	r1, r0
 8000dfa:	0242      	lsls	r2, r0, #9
 8000dfc:	bf06      	itte	eq
 8000dfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e02:	ea90 0f01 	teqeq	r0, r1
 8000e06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_ui2f>:
 8000e0c:	f04f 0300 	mov.w	r3, #0
 8000e10:	e004      	b.n	8000e1c <__aeabi_i2f+0x8>
 8000e12:	bf00      	nop

08000e14 <__aeabi_i2f>:
 8000e14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e18:	bf48      	it	mi
 8000e1a:	4240      	negmi	r0, r0
 8000e1c:	ea5f 0c00 	movs.w	ip, r0
 8000e20:	bf08      	it	eq
 8000e22:	4770      	bxeq	lr
 8000e24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e28:	4601      	mov	r1, r0
 8000e2a:	f04f 0000 	mov.w	r0, #0
 8000e2e:	e01c      	b.n	8000e6a <__aeabi_l2f+0x2a>

08000e30 <__aeabi_ul2f>:
 8000e30:	ea50 0201 	orrs.w	r2, r0, r1
 8000e34:	bf08      	it	eq
 8000e36:	4770      	bxeq	lr
 8000e38:	f04f 0300 	mov.w	r3, #0
 8000e3c:	e00a      	b.n	8000e54 <__aeabi_l2f+0x14>
 8000e3e:	bf00      	nop

08000e40 <__aeabi_l2f>:
 8000e40:	ea50 0201 	orrs.w	r2, r0, r1
 8000e44:	bf08      	it	eq
 8000e46:	4770      	bxeq	lr
 8000e48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e4c:	d502      	bpl.n	8000e54 <__aeabi_l2f+0x14>
 8000e4e:	4240      	negs	r0, r0
 8000e50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e54:	ea5f 0c01 	movs.w	ip, r1
 8000e58:	bf02      	ittt	eq
 8000e5a:	4684      	moveq	ip, r0
 8000e5c:	4601      	moveq	r1, r0
 8000e5e:	2000      	moveq	r0, #0
 8000e60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e64:	bf08      	it	eq
 8000e66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e6e:	fabc f28c 	clz	r2, ip
 8000e72:	3a08      	subs	r2, #8
 8000e74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e78:	db10      	blt.n	8000e9c <__aeabi_l2f+0x5c>
 8000e7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e7e:	4463      	add	r3, ip
 8000e80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e84:	f1c2 0220 	rsb	r2, r2, #32
 8000e88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e90:	eb43 0002 	adc.w	r0, r3, r2
 8000e94:	bf08      	it	eq
 8000e96:	f020 0001 	biceq.w	r0, r0, #1
 8000e9a:	4770      	bx	lr
 8000e9c:	f102 0220 	add.w	r2, r2, #32
 8000ea0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea4:	f1c2 0220 	rsb	r2, r2, #32
 8000ea8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000eac:	fa21 f202 	lsr.w	r2, r1, r2
 8000eb0:	eb43 0002 	adc.w	r0, r3, r2
 8000eb4:	bf08      	it	eq
 8000eb6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eba:	4770      	bx	lr

08000ebc <__aeabi_f2iz>:
 8000ebc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ec0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ec4:	d30f      	bcc.n	8000ee6 <__aeabi_f2iz+0x2a>
 8000ec6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000eca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ece:	d90d      	bls.n	8000eec <__aeabi_f2iz+0x30>
 8000ed0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ed4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ed8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000edc:	fa23 f002 	lsr.w	r0, r3, r2
 8000ee0:	bf18      	it	ne
 8000ee2:	4240      	negne	r0, r0
 8000ee4:	4770      	bx	lr
 8000ee6:	f04f 0000 	mov.w	r0, #0
 8000eea:	4770      	bx	lr
 8000eec:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ef0:	d101      	bne.n	8000ef6 <__aeabi_f2iz+0x3a>
 8000ef2:	0242      	lsls	r2, r0, #9
 8000ef4:	d105      	bne.n	8000f02 <__aeabi_f2iz+0x46>
 8000ef6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	bf08      	it	eq
 8000efc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f00:	4770      	bx	lr
 8000f02:	f04f 0000 	mov.w	r0, #0
 8000f06:	4770      	bx	lr

08000f08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <SystemInit+0x5c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a14      	ldr	r2, [pc, #80]	; (8000f64 <SystemInit+0x5c>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <SystemInit+0x5c>)
 8000f1a:	685a      	ldr	r2, [r3, #4]
 8000f1c:	4911      	ldr	r1, [pc, #68]	; (8000f64 <SystemInit+0x5c>)
 8000f1e:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <SystemInit+0x60>)
 8000f20:	4013      	ands	r3, r2
 8000f22:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <SystemInit+0x5c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <SystemInit+0x5c>)
 8000f2a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f32:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <SystemInit+0x5c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <SystemInit+0x5c>)
 8000f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f3e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <SystemInit+0x5c>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	4a07      	ldr	r2, [pc, #28]	; (8000f64 <SystemInit+0x5c>)
 8000f46:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000f4a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000f4c:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <SystemInit+0x5c>)
 8000f4e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000f52:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000f54:	f000 f87e 	bl	8001054 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <SystemInit+0x64>)
 8000f5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f5e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40021000 	.word	0x40021000
 8000f68:	f8ff0000 	.word	0xf8ff0000
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000f82:	4b2f      	ldr	r3, [pc, #188]	; (8001040 <SystemCoreClockUpdate+0xd0>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 030c 	and.w	r3, r3, #12
 8000f8a:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2b08      	cmp	r3, #8
 8000f90:	d011      	beq.n	8000fb6 <SystemCoreClockUpdate+0x46>
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2b08      	cmp	r3, #8
 8000f96:	d83a      	bhi.n	800100e <SystemCoreClockUpdate+0x9e>
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <SystemCoreClockUpdate+0x36>
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	2b04      	cmp	r3, #4
 8000fa2:	d004      	beq.n	8000fae <SystemCoreClockUpdate+0x3e>
 8000fa4:	e033      	b.n	800100e <SystemCoreClockUpdate+0x9e>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000fa6:	4b27      	ldr	r3, [pc, #156]	; (8001044 <SystemCoreClockUpdate+0xd4>)
 8000fa8:	4a27      	ldr	r2, [pc, #156]	; (8001048 <SystemCoreClockUpdate+0xd8>)
 8000faa:	601a      	str	r2, [r3, #0]
      break;
 8000fac:	e033      	b.n	8001016 <SystemCoreClockUpdate+0xa6>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000fae:	4b25      	ldr	r3, [pc, #148]	; (8001044 <SystemCoreClockUpdate+0xd4>)
 8000fb0:	4a25      	ldr	r2, [pc, #148]	; (8001048 <SystemCoreClockUpdate+0xd8>)
 8000fb2:	601a      	str	r2, [r3, #0]
      break;
 8000fb4:	e02f      	b.n	8001016 <SystemCoreClockUpdate+0xa6>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000fb6:	4b22      	ldr	r3, [pc, #136]	; (8001040 <SystemCoreClockUpdate+0xd0>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000fbe:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <SystemCoreClockUpdate+0xd0>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc8:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	0c9b      	lsrs	r3, r3, #18
 8000fce:	3302      	adds	r3, #2
 8000fd0:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d106      	bne.n	8000fe6 <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	4a1c      	ldr	r2, [pc, #112]	; (800104c <SystemCoreClockUpdate+0xdc>)
 8000fdc:	fb02 f303 	mul.w	r3, r2, r3
 8000fe0:	4a18      	ldr	r2, [pc, #96]	; (8001044 <SystemCoreClockUpdate+0xd4>)
 8000fe2:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000fe4:	e017      	b.n	8001016 <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8000fe6:	4b16      	ldr	r3, [pc, #88]	; (8001040 <SystemCoreClockUpdate+0xd0>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d006      	beq.n	8001000 <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	4a15      	ldr	r2, [pc, #84]	; (800104c <SystemCoreClockUpdate+0xdc>)
 8000ff6:	fb02 f303 	mul.w	r3, r2, r3
 8000ffa:	4a12      	ldr	r2, [pc, #72]	; (8001044 <SystemCoreClockUpdate+0xd4>)
 8000ffc:	6013      	str	r3, [r2, #0]
      break;
 8000ffe:	e00a      	b.n	8001016 <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	4a11      	ldr	r2, [pc, #68]	; (8001048 <SystemCoreClockUpdate+0xd8>)
 8001004:	fb02 f303 	mul.w	r3, r2, r3
 8001008:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <SystemCoreClockUpdate+0xd4>)
 800100a:	6013      	str	r3, [r2, #0]
      break;
 800100c:	e003      	b.n	8001016 <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <SystemCoreClockUpdate+0xd4>)
 8001010:	4a0d      	ldr	r2, [pc, #52]	; (8001048 <SystemCoreClockUpdate+0xd8>)
 8001012:	601a      	str	r2, [r3, #0]
      break;
 8001014:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <SystemCoreClockUpdate+0xd0>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	091b      	lsrs	r3, r3, #4
 800101c:	f003 030f 	and.w	r3, r3, #15
 8001020:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <SystemCoreClockUpdate+0xe0>)
 8001022:	5cd3      	ldrb	r3, [r2, r3]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <SystemCoreClockUpdate+0xd4>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	fa22 f303 	lsr.w	r3, r2, r3
 8001032:	4a04      	ldr	r2, [pc, #16]	; (8001044 <SystemCoreClockUpdate+0xd4>)
 8001034:	6013      	str	r3, [r2, #0]
}
 8001036:	bf00      	nop
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr
 8001040:	40021000 	.word	0x40021000
 8001044:	20000000 	.word	0x20000000
 8001048:	007a1200 	.word	0x007a1200
 800104c:	003d0900 	.word	0x003d0900
 8001050:	20000004 	.word	0x20000004

08001054 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8001058:	f000 f802 	bl	8001060 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}

08001060 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	2300      	movs	r3, #0
 800106c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800106e:	4b3a      	ldr	r3, [pc, #232]	; (8001158 <SetSysClockTo72+0xf8>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a39      	ldr	r2, [pc, #228]	; (8001158 <SetSysClockTo72+0xf8>)
 8001074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001078:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800107a:	4b37      	ldr	r3, [pc, #220]	; (8001158 <SetSysClockTo72+0xf8>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001082:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3301      	adds	r3, #1
 8001088:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d103      	bne.n	8001098 <SetSysClockTo72+0x38>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001096:	d1f0      	bne.n	800107a <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001098:	4b2f      	ldr	r3, [pc, #188]	; (8001158 <SetSysClockTo72+0xf8>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d002      	beq.n	80010aa <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80010a4:	2301      	movs	r3, #1
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	e001      	b.n	80010ae <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80010aa:	2300      	movs	r3, #0
 80010ac:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d14b      	bne.n	800114c <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80010b4:	4b29      	ldr	r3, [pc, #164]	; (800115c <SetSysClockTo72+0xfc>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a28      	ldr	r2, [pc, #160]	; (800115c <SetSysClockTo72+0xfc>)
 80010ba:	f043 0310 	orr.w	r3, r3, #16
 80010be:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80010c0:	4b26      	ldr	r3, [pc, #152]	; (800115c <SetSysClockTo72+0xfc>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a25      	ldr	r2, [pc, #148]	; (800115c <SetSysClockTo72+0xfc>)
 80010c6:	f023 0307 	bic.w	r3, r3, #7
 80010ca:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80010cc:	4b23      	ldr	r3, [pc, #140]	; (800115c <SetSysClockTo72+0xfc>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a22      	ldr	r2, [pc, #136]	; (800115c <SetSysClockTo72+0xfc>)
 80010d2:	f043 0302 	orr.w	r3, r3, #2
 80010d6:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <SetSysClockTo72+0xf8>)
 80010da:	4a1f      	ldr	r2, [pc, #124]	; (8001158 <SetSysClockTo72+0xf8>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80010e0:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <SetSysClockTo72+0xf8>)
 80010e2:	4a1d      	ldr	r2, [pc, #116]	; (8001158 <SetSysClockTo72+0xf8>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80010e8:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <SetSysClockTo72+0xf8>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	4a1a      	ldr	r2, [pc, #104]	; (8001158 <SetSysClockTo72+0xf8>)
 80010ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010f2:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80010f4:	4b18      	ldr	r3, [pc, #96]	; (8001158 <SetSysClockTo72+0xf8>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	4a17      	ldr	r2, [pc, #92]	; (8001158 <SetSysClockTo72+0xf8>)
 80010fa:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80010fe:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001100:	4b15      	ldr	r3, [pc, #84]	; (8001158 <SetSysClockTo72+0xf8>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	4a14      	ldr	r2, [pc, #80]	; (8001158 <SetSysClockTo72+0xf8>)
 8001106:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800110a:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <SetSysClockTo72+0xf8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a11      	ldr	r2, [pc, #68]	; (8001158 <SetSysClockTo72+0xf8>)
 8001112:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001116:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001118:	bf00      	nop
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <SetSysClockTo72+0xf8>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d0f9      	beq.n	800111a <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <SetSysClockTo72+0xf8>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <SetSysClockTo72+0xf8>)
 800112c:	f023 0303 	bic.w	r3, r3, #3
 8001130:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <SetSysClockTo72+0xf8>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	4a08      	ldr	r2, [pc, #32]	; (8001158 <SetSysClockTo72+0xf8>)
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800113e:	bf00      	nop
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <SetSysClockTo72+0xf8>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 030c 	and.w	r3, r3, #12
 8001148:	2b08      	cmp	r3, #8
 800114a:	d1f9      	bne.n	8001140 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40021000 	.word	0x40021000
 800115c:	40022000 	.word	0x40022000

08001160 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8001168:	4a05      	ldr	r2, [pc, #20]	; (8001180 <NVIC_PriorityGroupConfig+0x20>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001174:	60d3      	str	r3, [r2, #12]
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8001184:	b480      	push	{r7}
 8001186:	b087      	sub	sp, #28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	2300      	movs	r3, #0
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	230f      	movs	r3, #15
 8001196:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	78db      	ldrb	r3, [r3, #3]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d03a      	beq.n	8001216 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80011a0:	4b27      	ldr	r3, [pc, #156]	; (8001240 <NVIC_Init+0xbc>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	0a1b      	lsrs	r3, r3, #8
 80011a8:	f003 0307 	and.w	r3, r3, #7
 80011ac:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	f1c3 0304 	rsb	r3, r3, #4
 80011b4:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa22 f303 	lsr.w	r3, r2, r3
 80011be:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	785b      	ldrb	r3, [r3, #1]
 80011c4:	461a      	mov	r2, r3
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	789b      	ldrb	r3, [r3, #2]
 80011d2:	461a      	mov	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4013      	ands	r3, r2
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	4313      	orrs	r3, r2
 80011dc:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	011b      	lsls	r3, r3, #4
 80011e2:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80011e4:	4a17      	ldr	r2, [pc, #92]	; (8001244 <NVIC_Init+0xc0>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	6979      	ldr	r1, [r7, #20]
 80011ec:	b2c9      	uxtb	r1, r1
 80011ee:	4413      	add	r3, r2
 80011f0:	460a      	mov	r2, r1
 80011f2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80011fe:	4911      	ldr	r1, [pc, #68]	; (8001244 <NVIC_Init+0xc0>)
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	7812      	ldrb	r2, [r2, #0]
 8001204:	0952      	lsrs	r2, r2, #5
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800120a:	2201      	movs	r2, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001210:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001214:	e00f      	b.n	8001236 <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800121e:	4909      	ldr	r1, [pc, #36]	; (8001244 <NVIC_Init+0xc0>)
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	7812      	ldrb	r2, [r2, #0]
 8001224:	0952      	lsrs	r2, r2, #5
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800122a:	2201      	movs	r2, #1
 800122c:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800122e:	f100 0320 	add.w	r3, r0, #32
 8001232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001236:	bf00      	nop
 8001238:	371c      	adds	r7, #28
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00
 8001244:	e000e100 	.word	0xe000e100

08001248 <ADC_DeInit>:
  * @brief  Deinitializes the ADCx peripheral registers to their default reset values.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  if (ADCx == ADC1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a17      	ldr	r2, [pc, #92]	; (80012b0 <ADC_DeInit+0x68>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d10a      	bne.n	800126e <ADC_DeInit+0x26>
  {
    /* Enable ADC1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
 8001258:	2101      	movs	r1, #1
 800125a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800125e:	f000 fe63 	bl	8001f28 <RCC_APB2PeriphResetCmd>
    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
 8001262:	2100      	movs	r1, #0
 8001264:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001268:	f000 fe5e 	bl	8001f28 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
      /* Release ADC3 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
    }
  }
}
 800126c:	e01c      	b.n	80012a8 <ADC_DeInit+0x60>
  else if (ADCx == ADC2)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a10      	ldr	r2, [pc, #64]	; (80012b4 <ADC_DeInit+0x6c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d10a      	bne.n	800128c <ADC_DeInit+0x44>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, ENABLE);
 8001276:	2101      	movs	r1, #1
 8001278:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800127c:	f000 fe54 	bl	8001f28 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, DISABLE);
 8001280:	2100      	movs	r1, #0
 8001282:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001286:	f000 fe4f 	bl	8001f28 <RCC_APB2PeriphResetCmd>
}
 800128a:	e00d      	b.n	80012a8 <ADC_DeInit+0x60>
    if (ADCx == ADC3)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <ADC_DeInit+0x70>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d109      	bne.n	80012a8 <ADC_DeInit+0x60>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
 8001294:	2101      	movs	r1, #1
 8001296:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800129a:	f000 fe45 	bl	8001f28 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
 800129e:	2100      	movs	r1, #0
 80012a0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012a4:	f000 fe40 	bl	8001f28 <RCC_APB2PeriphResetCmd>
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40012400 	.word	0x40012400
 80012b4:	40012800 	.word	0x40012800
 80012b8:	40013c00 	.word	0x40013c00

080012bc <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	60fb      	str	r3, [r7, #12]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80012da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012de:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	791b      	ldrb	r3, [r3, #4]
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	4313      	orrs	r3, r2
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	605a      	str	r2, [r3, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	4b16      	ldr	r3, [pc, #88]	; (800135c <ADC_Init+0xa0>)
 8001302:	4013      	ands	r3, r2
 8001304:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	68da      	ldr	r2, [r3, #12]
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	431a      	orrs	r2, r3
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	795b      	ldrb	r3, [r3, #5]
 8001314:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 8001316:	4313      	orrs	r3, r2
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	4313      	orrs	r3, r2
 800131c:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	609a      	str	r2, [r3, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001328:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001330:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	7c1b      	ldrb	r3, [r3, #16]
 8001336:	3b01      	subs	r3, #1
 8001338:	b2da      	uxtb	r2, r3
 800133a:	7afb      	ldrb	r3, [r7, #11]
 800133c:	4313      	orrs	r3, r2
 800133e:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
 8001340:	7afb      	ldrb	r3, [r7, #11]
 8001342:	051b      	lsls	r3, r3, #20
 8001344:	68fa      	ldr	r2, [r7, #12]
 8001346:	4313      	orrs	r3, r2
 8001348:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001350:	bf00      	nop
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	fff1f7fd 	.word	0xfff1f7fd

08001360 <ADC_StructInit>:
  * @brief  Fills each ADC_InitStruct member with its default value.
  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	711a      	strb	r2, [r3, #4]
  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	715a      	strb	r2, [r3, #5]
  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  /* Initialize the ADC_NbrOfChannel member */
  ADC_InitStruct->ADC_NbrOfChannel = 1;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2201      	movs	r2, #1
 800138a:	741a      	strb	r2, [r3, #16]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr

08001396 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	460b      	mov	r3, r1
 80013a0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013a2:	78fb      	ldrb	r3, [r7, #3]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d006      	beq.n	80013b6 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f043 0201 	orr.w	r2, r3, #1
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
  }
}
 80013b4:	e005      	b.n	80013c2 <ADC_Cmd+0x2c>
    ADCx->CR2 &= CR2_ADON_Reset;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f023 0201 	bic.w	r2, r3, #1
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	609a      	str	r2, [r3, #8]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013d8:	78fb      	ldrb	r3, [r7, #3]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d006      	beq.n	80013ec <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
  }
}
 80013ea:	e005      	b.n	80013f8 <ADC_DMACmd+0x2c>
    ADCx->CR2 &= CR2_DMA_Reset;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	609a      	str	r2, [r3, #8]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr

08001402 <ADC_ResetCalibration>:
  * @brief  Resets the selected ADC calibration registers.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_ResetCalibration(ADC_TypeDef* ADCx)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Resets the selected ADC calibration registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f043 0208 	orr.w	r2, r3, #8
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	609a      	str	r2, [r3, #8]
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <ADC_GetResetCalibrationStatus>:
  * @brief  Gets the selected ADC reset calibration registers status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC reset calibration registers (SET or RESET).
  */
FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8001428:	2300      	movs	r3, #0
 800142a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	2b00      	cmp	r3, #0
 8001436:	d002      	beq.n	800143e <ADC_GetResetCalibrationStatus+0x1e>
  {
    /* RSTCAL bit is set */
    bitstatus = SET;
 8001438:	2301      	movs	r3, #1
 800143a:	73fb      	strb	r3, [r7, #15]
 800143c:	e001      	b.n	8001442 <ADC_GetResetCalibrationStatus+0x22>
  }
  else
  {
    /* RSTCAL bit is reset */
    bitstatus = RESET;
 800143e:	2300      	movs	r3, #0
 8001440:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RSTCAL bit status */
  return  bitstatus;
 8001442:	7bfb      	ldrb	r3, [r7, #15]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f043 0204 	orr.w	r2, r3, #4
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	609a      	str	r2, [r3, #8]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8001474:	2300      	movs	r3, #0
 8001476:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	d002      	beq.n	800148a <ADC_GetCalibrationStatus+0x1e>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
 8001484:	2301      	movs	r3, #1
 8001486:	73fb      	strb	r3, [r7, #15]
 8001488:	e001      	b.n	800148e <ADC_GetCalibrationStatus+0x22>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
 800148e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr

0800149a <ADC_SoftwareStartConvCmd>:
  * @param  NewState: new state of the selected ADC software start conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	460b      	mov	r3, r1
 80014a4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014a6:	78fb      	ldrb	r3, [r7, #3]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d006      	beq.n	80014ba <ADC_SoftwareStartConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	609a      	str	r2, [r3, #8]
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
  }
}
 80014b8:	e005      	b.n	80014c6 <ADC_SoftwareStartConvCmd+0x2c>
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f423 02a0 	bic.w	r2, r3, #5242880	; 0x500000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	609a      	str	r2, [r3, #8]
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	4608      	mov	r0, r1
 80014da:	4611      	mov	r1, r2
 80014dc:	461a      	mov	r2, r3
 80014de:	4603      	mov	r3, r0
 80014e0:	70fb      	strb	r3, [r7, #3]
 80014e2:	460b      	mov	r3, r1
 80014e4:	70bb      	strb	r3, [r7, #2]
 80014e6:	4613      	mov	r3, r2
 80014e8:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80014f2:	78fb      	ldrb	r3, [r7, #3]
 80014f4:	2b09      	cmp	r3, #9
 80014f6:	d923      	bls.n	8001540 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 80014fe:	78fb      	ldrb	r3, [r7, #3]
 8001500:	f1a3 020a 	sub.w	r2, r3, #10
 8001504:	4613      	mov	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4413      	add	r3, r2
 800150a:	2207      	movs	r2, #7
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	43db      	mvns	r3, r3
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	4013      	ands	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 800151c:	7879      	ldrb	r1, [r7, #1]
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	f1a3 020a 	sub.w	r2, r3, #10
 8001524:	4613      	mov	r3, r2
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4413      	add	r3, r2
 800152a:	fa01 f303 	lsl.w	r3, r1, r3
 800152e:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	4313      	orrs	r3, r2
 8001536:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	e01e      	b.n	800157e <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 8001546:	78fa      	ldrb	r2, [r7, #3]
 8001548:	4613      	mov	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4413      	add	r3, r2
 800154e:	2207      	movs	r2, #7
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	43db      	mvns	r3, r3
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	4013      	ands	r3, r2
 800155e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8001560:	7879      	ldrb	r1, [r7, #1]
 8001562:	78fa      	ldrb	r2, [r7, #3]
 8001564:	4613      	mov	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4413      	add	r3, r2
 800156a:	fa01 f303 	lsl.w	r3, r1, r3
 800156e:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	4313      	orrs	r3, r2
 8001576:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 800157e:	78bb      	ldrb	r3, [r7, #2]
 8001580:	2b06      	cmp	r3, #6
 8001582:	d821      	bhi.n	80015c8 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001588:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 800158a:	78bb      	ldrb	r3, [r7, #2]
 800158c:	1e5a      	subs	r2, r3, #1
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	221f      	movs	r2, #31
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	43db      	mvns	r3, r3
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	4013      	ands	r3, r2
 80015a4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80015a6:	78f9      	ldrb	r1, [r7, #3]
 80015a8:	78bb      	ldrb	r3, [r7, #2]
 80015aa:	1e5a      	subs	r2, r3, #1
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	4313      	orrs	r3, r2
 80015be:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80015c6:	e047      	b.n	8001658 <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 80015c8:	78bb      	ldrb	r3, [r7, #2]
 80015ca:	2b0c      	cmp	r3, #12
 80015cc:	d821      	bhi.n	8001612 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 80015d4:	78bb      	ldrb	r3, [r7, #2]
 80015d6:	1fda      	subs	r2, r3, #7
 80015d8:	4613      	mov	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	221f      	movs	r2, #31
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	4013      	ands	r3, r2
 80015ee:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80015f0:	78f9      	ldrb	r1, [r7, #3]
 80015f2:	78bb      	ldrb	r3, [r7, #2]
 80015f4:	1fda      	subs	r2, r3, #7
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001600:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	4313      	orrs	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001610:	e022      	b.n	8001658 <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001616:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 8001618:	78bb      	ldrb	r3, [r7, #2]
 800161a:	f1a3 020d 	sub.w	r2, r3, #13
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	221f      	movs	r2, #31
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	43db      	mvns	r3, r3
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	4013      	ands	r3, r2
 8001634:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8001636:	78f9      	ldrb	r1, [r7, #3]
 8001638:	78bb      	ldrb	r3, [r7, #2]
 800163a:	f1a3 020d 	sub.w	r2, r3, #13
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	fa01 f303 	lsl.w	r3, r1, r3
 8001648:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	4313      	orrs	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
	...

08001664 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001674:	4013      	ands	r3, r2
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6013      	str	r3, [r2, #0]
  
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a43      	ldr	r2, [pc, #268]	; (80017a4 <DMA_DeInit+0x140>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d106      	bne.n	80016a8 <DMA_DeInit+0x44>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
 800169a:	4b43      	ldr	r3, [pc, #268]	; (80017a8 <DMA_DeInit+0x144>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	4a42      	ldr	r2, [pc, #264]	; (80017a8 <DMA_DeInit+0x144>)
 80016a0:	f043 030f 	orr.w	r3, r3, #15
 80016a4:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 80016a6:	e077      	b.n	8001798 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel2)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a40      	ldr	r2, [pc, #256]	; (80017ac <DMA_DeInit+0x148>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d106      	bne.n	80016be <DMA_DeInit+0x5a>
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
 80016b0:	4b3d      	ldr	r3, [pc, #244]	; (80017a8 <DMA_DeInit+0x144>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	4a3c      	ldr	r2, [pc, #240]	; (80017a8 <DMA_DeInit+0x144>)
 80016b6:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80016ba:	6053      	str	r3, [r2, #4]
}
 80016bc:	e06c      	b.n	8001798 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel3)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a3b      	ldr	r2, [pc, #236]	; (80017b0 <DMA_DeInit+0x14c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d106      	bne.n	80016d4 <DMA_DeInit+0x70>
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 80016c6:	4b38      	ldr	r3, [pc, #224]	; (80017a8 <DMA_DeInit+0x144>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	4a37      	ldr	r2, [pc, #220]	; (80017a8 <DMA_DeInit+0x144>)
 80016cc:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80016d0:	6053      	str	r3, [r2, #4]
}
 80016d2:	e061      	b.n	8001798 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel4)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a37      	ldr	r2, [pc, #220]	; (80017b4 <DMA_DeInit+0x150>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d106      	bne.n	80016ea <DMA_DeInit+0x86>
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 80016dc:	4b32      	ldr	r3, [pc, #200]	; (80017a8 <DMA_DeInit+0x144>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	4a31      	ldr	r2, [pc, #196]	; (80017a8 <DMA_DeInit+0x144>)
 80016e2:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80016e6:	6053      	str	r3, [r2, #4]
}
 80016e8:	e056      	b.n	8001798 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel5)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a32      	ldr	r2, [pc, #200]	; (80017b8 <DMA_DeInit+0x154>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d106      	bne.n	8001700 <DMA_DeInit+0x9c>
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 80016f2:	4b2d      	ldr	r3, [pc, #180]	; (80017a8 <DMA_DeInit+0x144>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	4a2c      	ldr	r2, [pc, #176]	; (80017a8 <DMA_DeInit+0x144>)
 80016f8:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 80016fc:	6053      	str	r3, [r2, #4]
}
 80016fe:	e04b      	b.n	8001798 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel6)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a2e      	ldr	r2, [pc, #184]	; (80017bc <DMA_DeInit+0x158>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d106      	bne.n	8001716 <DMA_DeInit+0xb2>
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 8001708:	4b27      	ldr	r3, [pc, #156]	; (80017a8 <DMA_DeInit+0x144>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	4a26      	ldr	r2, [pc, #152]	; (80017a8 <DMA_DeInit+0x144>)
 800170e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001712:	6053      	str	r3, [r2, #4]
}
 8001714:	e040      	b.n	8001798 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel7)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a29      	ldr	r2, [pc, #164]	; (80017c0 <DMA_DeInit+0x15c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d106      	bne.n	800172c <DMA_DeInit+0xc8>
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 800171e:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <DMA_DeInit+0x144>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	4a21      	ldr	r2, [pc, #132]	; (80017a8 <DMA_DeInit+0x144>)
 8001724:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8001728:	6053      	str	r3, [r2, #4]
}
 800172a:	e035      	b.n	8001798 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a25      	ldr	r2, [pc, #148]	; (80017c4 <DMA_DeInit+0x160>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d106      	bne.n	8001742 <DMA_DeInit+0xde>
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 8001734:	4b24      	ldr	r3, [pc, #144]	; (80017c8 <DMA_DeInit+0x164>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	4a23      	ldr	r2, [pc, #140]	; (80017c8 <DMA_DeInit+0x164>)
 800173a:	f043 030f 	orr.w	r3, r3, #15
 800173e:	6053      	str	r3, [r2, #4]
}
 8001740:	e02a      	b.n	8001798 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel2)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a21      	ldr	r2, [pc, #132]	; (80017cc <DMA_DeInit+0x168>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d106      	bne.n	8001758 <DMA_DeInit+0xf4>
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 800174a:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <DMA_DeInit+0x164>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	4a1e      	ldr	r2, [pc, #120]	; (80017c8 <DMA_DeInit+0x164>)
 8001750:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001754:	6053      	str	r3, [r2, #4]
}
 8001756:	e01f      	b.n	8001798 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel3)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a1d      	ldr	r2, [pc, #116]	; (80017d0 <DMA_DeInit+0x16c>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d106      	bne.n	800176e <DMA_DeInit+0x10a>
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 8001760:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <DMA_DeInit+0x164>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	4a18      	ldr	r2, [pc, #96]	; (80017c8 <DMA_DeInit+0x164>)
 8001766:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 800176a:	6053      	str	r3, [r2, #4]
}
 800176c:	e014      	b.n	8001798 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel4)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a18      	ldr	r2, [pc, #96]	; (80017d4 <DMA_DeInit+0x170>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d106      	bne.n	8001784 <DMA_DeInit+0x120>
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 8001776:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <DMA_DeInit+0x164>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	4a13      	ldr	r2, [pc, #76]	; (80017c8 <DMA_DeInit+0x164>)
 800177c:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8001780:	6053      	str	r3, [r2, #4]
}
 8001782:	e009      	b.n	8001798 <DMA_DeInit+0x134>
    if (DMAy_Channelx == DMA2_Channel5)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a14      	ldr	r2, [pc, #80]	; (80017d8 <DMA_DeInit+0x174>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d105      	bne.n	8001798 <DMA_DeInit+0x134>
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 800178c:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <DMA_DeInit+0x164>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	4a0d      	ldr	r2, [pc, #52]	; (80017c8 <DMA_DeInit+0x164>)
 8001792:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8001796:	6053      	str	r3, [r2, #4]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40020008 	.word	0x40020008
 80017a8:	40020000 	.word	0x40020000
 80017ac:	4002001c 	.word	0x4002001c
 80017b0:	40020030 	.word	0x40020030
 80017b4:	40020044 	.word	0x40020044
 80017b8:	40020058 	.word	0x40020058
 80017bc:	4002006c 	.word	0x4002006c
 80017c0:	40020080 	.word	0x40020080
 80017c4:	40020408 	.word	0x40020408
 80017c8:	40020400 	.word	0x40020400
 80017cc:	4002041c 	.word	0x4002041c
 80017d0:	40020430 	.word	0x40020430
 80017d4:	40020444 	.word	0x40020444
 80017d8:	40020458 	.word	0x40020458

080017dc <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80017f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017fa:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	691b      	ldr	r3, [r3, #16]
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 800180a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	699b      	ldr	r3, [r3, #24]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001816:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001822:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	4313      	orrs	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	60da      	str	r2, [r3, #12]
}
 800184e:	bf00      	nop
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d006      	beq.n	8001878 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f043 0201 	orr.w	r2, r3, #1
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 8001876:	e006      	b.n	8001886 <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001880:	4013      	ands	r3, r2
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	6013      	str	r3, [r2, #0]
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 800189c:	4b34      	ldr	r3, [pc, #208]	; (8001970 <EXTI_Init+0xe0>)
 800189e:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	799b      	ldrb	r3, [r3, #6]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d04f      	beq.n	8001948 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80018a8:	4b31      	ldr	r3, [pc, #196]	; (8001970 <EXTI_Init+0xe0>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	492f      	ldr	r1, [pc, #188]	; (8001970 <EXTI_Init+0xe0>)
 80018b4:	4013      	ands	r3, r2
 80018b6:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80018b8:	4b2d      	ldr	r3, [pc, #180]	; (8001970 <EXTI_Init+0xe0>)
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	43db      	mvns	r3, r3
 80018c2:	492b      	ldr	r1, [pc, #172]	; (8001970 <EXTI_Init+0xe0>)
 80018c4:	4013      	ands	r3, r2
 80018c6:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	791b      	ldrb	r3, [r3, #4]
 80018cc:	461a      	mov	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	4413      	add	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6819      	ldr	r1, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	430a      	orrs	r2, r1
 80018e0:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80018e2:	4b23      	ldr	r3, [pc, #140]	; (8001970 <EXTI_Init+0xe0>)
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	4920      	ldr	r1, [pc, #128]	; (8001970 <EXTI_Init+0xe0>)
 80018ee:	4013      	ands	r3, r2
 80018f0:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80018f2:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <EXTI_Init+0xe0>)
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	43db      	mvns	r3, r3
 80018fc:	491c      	ldr	r1, [pc, #112]	; (8001970 <EXTI_Init+0xe0>)
 80018fe:	4013      	ands	r3, r2
 8001900:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	795b      	ldrb	r3, [r3, #5]
 8001906:	2b10      	cmp	r3, #16
 8001908:	d10e      	bne.n	8001928 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800190a:	4b19      	ldr	r3, [pc, #100]	; (8001970 <EXTI_Init+0xe0>)
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4917      	ldr	r1, [pc, #92]	; (8001970 <EXTI_Init+0xe0>)
 8001914:	4313      	orrs	r3, r2
 8001916:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8001918:	4b15      	ldr	r3, [pc, #84]	; (8001970 <EXTI_Init+0xe0>)
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4913      	ldr	r1, [pc, #76]	; (8001970 <EXTI_Init+0xe0>)
 8001922:	4313      	orrs	r3, r2
 8001924:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8001926:	e01d      	b.n	8001964 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8001928:	4b11      	ldr	r3, [pc, #68]	; (8001970 <EXTI_Init+0xe0>)
 800192a:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	795b      	ldrb	r3, [r3, #5]
 8001930:	461a      	mov	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4413      	add	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6819      	ldr	r1, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	430a      	orrs	r2, r1
 8001944:	601a      	str	r2, [r3, #0]
}
 8001946:	e00d      	b.n	8001964 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	791b      	ldrb	r3, [r3, #4]
 800194c:	461a      	mov	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4413      	add	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6819      	ldr	r1, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	43da      	mvns	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	400a      	ands	r2, r1
 8001962:	601a      	str	r2, [r3, #0]
}
 8001964:	bf00      	nop
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40010400 	.word	0x40010400

08001974 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800197c:	2300      	movs	r3, #0
 800197e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <EXTI_GetFlagStatus+0x30>)
 8001982:	695a      	ldr	r2, [r3, #20]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4013      	ands	r3, r2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d002      	beq.n	8001992 <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 800198c:	2301      	movs	r3, #1
 800198e:	73fb      	strb	r3, [r7, #15]
 8001990:	e001      	b.n	8001996 <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8001992:	2300      	movs	r3, #0
 8001994:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001996:	7bfb      	ldrb	r3, [r7, #15]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40010400 	.word	0x40010400

080019a8 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80019b0:	4a03      	ldr	r2, [pc, #12]	; (80019c0 <EXTI_ClearITPendingBit+0x18>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6153      	str	r3, [r2, #20]
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	40010400 	.word	0x40010400

080019c4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b089      	sub	sp, #36	; 0x24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	2300      	movs	r3, #0
 80019d8:	61bb      	str	r3, [r7, #24]
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	78db      	ldrb	r3, [r3, #3]
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	78db      	ldrb	r3, [r3, #3]
 80019f4:	f003 0310 	and.w	r3, r3, #16
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d005      	beq.n	8001a08 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	789b      	ldrb	r3, [r3, #2]
 8001a00:	461a      	mov	r2, r3
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d044      	beq.n	8001a9c <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61bb      	str	r3, [r7, #24]
 8001a1c:	e038      	b.n	8001a90 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8001a1e:	2201      	movs	r2, #1
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d126      	bne.n	8001a8a <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8001a42:	220f      	movs	r2, #15
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	4013      	ands	r3, r2
 8001a54:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001a56:	69fa      	ldr	r2, [r7, #28]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	78db      	ldrb	r3, [r3, #3]
 8001a68:	2b28      	cmp	r3, #40	; 0x28
 8001a6a:	d105      	bne.n	8001a78 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	409a      	lsls	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	615a      	str	r2, [r3, #20]
 8001a76:	e008      	b.n	8001a8a <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	78db      	ldrb	r3, [r3, #3]
 8001a7c:	2b48      	cmp	r3, #72	; 0x48
 8001a7e:	d104      	bne.n	8001a8a <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001a80:	2201      	movs	r2, #1
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	409a      	lsls	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	61bb      	str	r3, [r7, #24]
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	2b07      	cmp	r3, #7
 8001a94:	d9c3      	bls.n	8001a1e <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	2bff      	cmp	r3, #255	; 0xff
 8001aa2:	d946      	bls.n	8001b32 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61bb      	str	r3, [r7, #24]
 8001aae:	e03a      	b.n	8001b26 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	3308      	adds	r3, #8
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d127      	bne.n	8001b20 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8001ad6:	220f      	movs	r2, #15
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001aea:	69fa      	ldr	r2, [r7, #28]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	78db      	ldrb	r3, [r3, #3]
 8001afc:	2b28      	cmp	r3, #40	; 0x28
 8001afe:	d105      	bne.n	8001b0c <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	3308      	adds	r3, #8
 8001b04:	2201      	movs	r2, #1
 8001b06:	409a      	lsls	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	78db      	ldrb	r3, [r3, #3]
 8001b10:	2b48      	cmp	r3, #72	; 0x48
 8001b12:	d105      	bne.n	8001b20 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	3308      	adds	r3, #8
 8001b18:	2201      	movs	r2, #1
 8001b1a:	409a      	lsls	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	3301      	adds	r3, #1
 8001b24:	61bb      	str	r3, [r7, #24]
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	2b07      	cmp	r3, #7
 8001b2a:	d9c1      	bls.n	8001ab0 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	605a      	str	r2, [r3, #4]
  }
}
 8001b32:	bf00      	nop
 8001b34:	3724      	adds	r7, #36	; 0x24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr

08001b3c <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	887b      	ldrh	r3, [r7, #2]
 8001b52:	4013      	ands	r3, r2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	73fb      	strb	r3, [r7, #15]
 8001b5c:	e001      	b.n	8001b62 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr
	...

08001b70 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b087      	sub	sp, #28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	da03      	bge.n	8001b9a <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
 8001b92:	4b2e      	ldr	r3, [pc, #184]	; (8001c4c <GPIO_PinRemapConfig+0xdc>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	e002      	b.n	8001ba0 <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 8001b9a:	4b2c      	ldr	r3, [pc, #176]	; (8001c4c <GPIO_PinRemapConfig+0xdc>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	0c1b      	lsrs	r3, r3, #16
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001bb6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001bba:	d10a      	bne.n	8001bd2 <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001bc2:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8001bc4:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <GPIO_PinRemapConfig+0xdc>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	4a20      	ldr	r2, [pc, #128]	; (8001c4c <GPIO_PinRemapConfig+0xdc>)
 8001bca:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001bce:	6053      	str	r3, [r2, #4]
 8001bd0:	e021      	b.n	8001c16 <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00e      	beq.n	8001bfa <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8001bdc:	2203      	movs	r2, #3
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	43db      	mvns	r3, r3
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	4013      	ands	r3, r2
 8001bee:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	e00d      	b.n	8001c16 <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	0d5b      	lsrs	r3, r3, #21
 8001bfe:	011b      	lsls	r3, r3, #4
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8001c14:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 8001c16:	78fb      	ldrb	r3, [r7, #3]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d008      	beq.n	8001c2e <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	0d5b      	lsrs	r3, r3, #21
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	da03      	bge.n	8001c3c <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
 8001c34:	4a05      	ldr	r2, [pc, #20]	; (8001c4c <GPIO_PinRemapConfig+0xdc>)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	61d3      	str	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
  }  
}
 8001c3a:	e002      	b.n	8001c42 <GPIO_PinRemapConfig+0xd2>
    AFIO->MAPR = tmpreg;
 8001c3c:	4a03      	ldr	r2, [pc, #12]	; (8001c4c <GPIO_PinRemapConfig+0xdc>)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	6053      	str	r3, [r2, #4]
}
 8001c42:	bf00      	nop
 8001c44:	371c      	adds	r7, #28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	40010000 	.word	0x40010000

08001c50 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	460a      	mov	r2, r1
 8001c5a:	71fb      	strb	r3, [r7, #7]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8001c64:	79bb      	ldrb	r3, [r7, #6]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	220f      	movs	r2, #15
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8001c74:	4a15      	ldr	r2, [pc, #84]	; (8001ccc <GPIO_EXTILineConfig+0x7c>)
 8001c76:	79bb      	ldrb	r3, [r7, #6]
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	4811      	ldr	r0, [pc, #68]	; (8001ccc <GPIO_EXTILineConfig+0x7c>)
 8001c88:	79b9      	ldrb	r1, [r7, #6]
 8001c8a:	0889      	lsrs	r1, r1, #2
 8001c8c:	b2c9      	uxtb	r1, r1
 8001c8e:	401a      	ands	r2, r3
 8001c90:	1c8b      	adds	r3, r1, #2
 8001c92:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8001c96:	4a0d      	ldr	r2, [pc, #52]	; (8001ccc <GPIO_EXTILineConfig+0x7c>)
 8001c98:	79bb      	ldrb	r3, [r7, #6]
 8001c9a:	089b      	lsrs	r3, r3, #2
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	3302      	adds	r3, #2
 8001ca0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ca4:	79f9      	ldrb	r1, [r7, #7]
 8001ca6:	79bb      	ldrb	r3, [r7, #6]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb2:	4806      	ldr	r0, [pc, #24]	; (8001ccc <GPIO_EXTILineConfig+0x7c>)
 8001cb4:	79b9      	ldrb	r1, [r7, #6]
 8001cb6:	0889      	lsrs	r1, r1, #2
 8001cb8:	b2c9      	uxtb	r1, r1
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	1c8b      	adds	r3, r1, #2
 8001cbe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001cc2:	bf00      	nop
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	40010000 	.word	0x40010000

08001cd0 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <RCC_ADCCLKConfig+0x34>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ce8:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001cf2:	4a04      	ldr	r2, [pc, #16]	; (8001d04 <RCC_ADCCLKConfig+0x34>)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6053      	str	r3, [r2, #4]
}
 8001cf8:	bf00      	nop
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000

08001d08 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b087      	sub	sp, #28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
 8001d14:	2300      	movs	r3, #0
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001d20:	4b4f      	ldr	r3, [pc, #316]	; (8001e60 <RCC_GetClocksFreq+0x158>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 030c 	and.w	r3, r3, #12
 8001d28:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d011      	beq.n	8001d54 <RCC_GetClocksFreq+0x4c>
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d83a      	bhi.n	8001dac <RCC_GetClocksFreq+0xa4>
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <RCC_GetClocksFreq+0x3c>
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	d004      	beq.n	8001d4c <RCC_GetClocksFreq+0x44>
 8001d42:	e033      	b.n	8001dac <RCC_GetClocksFreq+0xa4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a47      	ldr	r2, [pc, #284]	; (8001e64 <RCC_GetClocksFreq+0x15c>)
 8001d48:	601a      	str	r2, [r3, #0]
      break;
 8001d4a:	e033      	b.n	8001db4 <RCC_GetClocksFreq+0xac>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a45      	ldr	r2, [pc, #276]	; (8001e64 <RCC_GetClocksFreq+0x15c>)
 8001d50:	601a      	str	r2, [r3, #0]
      break;
 8001d52:	e02f      	b.n	8001db4 <RCC_GetClocksFreq+0xac>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8001d54:	4b42      	ldr	r3, [pc, #264]	; (8001e60 <RCC_GetClocksFreq+0x158>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001d5c:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8001d5e:	4b40      	ldr	r3, [pc, #256]	; (8001e60 <RCC_GetClocksFreq+0x158>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d66:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	0c9b      	lsrs	r3, r3, #18
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d106      	bne.n	8001d84 <RCC_GetClocksFreq+0x7c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4a3b      	ldr	r2, [pc, #236]	; (8001e68 <RCC_GetClocksFreq+0x160>)
 8001d7a:	fb03 f202 	mul.w	r2, r3, r2
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8001d82:	e017      	b.n	8001db4 <RCC_GetClocksFreq+0xac>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8001d84:	4b36      	ldr	r3, [pc, #216]	; (8001e60 <RCC_GetClocksFreq+0x158>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d006      	beq.n	8001d9e <RCC_GetClocksFreq+0x96>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4a35      	ldr	r2, [pc, #212]	; (8001e68 <RCC_GetClocksFreq+0x160>)
 8001d94:	fb03 f202 	mul.w	r2, r3, r2
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	601a      	str	r2, [r3, #0]
      break;
 8001d9c:	e00a      	b.n	8001db4 <RCC_GetClocksFreq+0xac>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4a30      	ldr	r2, [pc, #192]	; (8001e64 <RCC_GetClocksFreq+0x15c>)
 8001da2:	fb03 f202 	mul.w	r2, r3, r2
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	601a      	str	r2, [r3, #0]
      break;
 8001daa:	e003      	b.n	8001db4 <RCC_GetClocksFreq+0xac>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a2d      	ldr	r2, [pc, #180]	; (8001e64 <RCC_GetClocksFreq+0x15c>)
 8001db0:	601a      	str	r2, [r3, #0]
      break;
 8001db2:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8001db4:	4b2a      	ldr	r3, [pc, #168]	; (8001e60 <RCC_GetClocksFreq+0x158>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dbc:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	091b      	lsrs	r3, r3, #4
 8001dc2:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001dc4:	4a29      	ldr	r2, [pc, #164]	; (8001e6c <RCC_GetClocksFreq+0x164>)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	4413      	add	r3, r2
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	40da      	lsrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8001ddc:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <RCC_GetClocksFreq+0x158>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001de4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	0a1b      	lsrs	r3, r3, #8
 8001dea:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001dec:	4a1f      	ldr	r2, [pc, #124]	; (8001e6c <RCC_GetClocksFreq+0x164>)
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	4413      	add	r3, r2
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	40da      	lsrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8001e04:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <RCC_GetClocksFreq+0x158>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001e0c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	0adb      	lsrs	r3, r3, #11
 8001e12:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001e14:	4a15      	ldr	r2, [pc, #84]	; (8001e6c <RCC_GetClocksFreq+0x164>)
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	4413      	add	r3, r2
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	40da      	lsrs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <RCC_GetClocksFreq+0x158>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e34:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	0b9b      	lsrs	r3, r3, #14
 8001e3a:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8001e3c:	4a0c      	ldr	r2, [pc, #48]	; (8001e70 <RCC_GetClocksFreq+0x168>)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	4413      	add	r3, r2
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	611a      	str	r2, [r3, #16]
}
 8001e56:	bf00      	nop
 8001e58:	371c      	adds	r7, #28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	40021000 	.word	0x40021000
 8001e64:	007a1200 	.word	0x007a1200
 8001e68:	003d0900 	.word	0x003d0900
 8001e6c:	20000014 	.word	0x20000014
 8001e70:	20000024 	.word	0x20000024

08001e74 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d006      	beq.n	8001e94 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <RCC_AHBPeriphClockCmd+0x38>)
 8001e88:	695a      	ldr	r2, [r3, #20]
 8001e8a:	4908      	ldr	r1, [pc, #32]	; (8001eac <RCC_AHBPeriphClockCmd+0x38>)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8001e92:	e006      	b.n	8001ea2 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <RCC_AHBPeriphClockCmd+0x38>)
 8001e96:	695a      	ldr	r2, [r3, #20]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	4903      	ldr	r1, [pc, #12]	; (8001eac <RCC_AHBPeriphClockCmd+0x38>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	614b      	str	r3, [r1, #20]
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr
 8001eac:	40021000 	.word	0x40021000

08001eb0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d006      	beq.n	8001ed0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <RCC_APB2PeriphClockCmd+0x38>)
 8001ec4:	699a      	ldr	r2, [r3, #24]
 8001ec6:	4908      	ldr	r1, [pc, #32]	; (8001ee8 <RCC_APB2PeriphClockCmd+0x38>)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001ece:	e006      	b.n	8001ede <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <RCC_APB2PeriphClockCmd+0x38>)
 8001ed2:	699a      	ldr	r2, [r3, #24]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	4903      	ldr	r1, [pc, #12]	; (8001ee8 <RCC_APB2PeriphClockCmd+0x38>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	618b      	str	r3, [r1, #24]
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr
 8001ee8:	40021000 	.word	0x40021000

08001eec <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d006      	beq.n	8001f0c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <RCC_APB1PeriphClockCmd+0x38>)
 8001f00:	69da      	ldr	r2, [r3, #28]
 8001f02:	4908      	ldr	r1, [pc, #32]	; (8001f24 <RCC_APB1PeriphClockCmd+0x38>)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001f0a:	e006      	b.n	8001f1a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001f0c:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <RCC_APB1PeriphClockCmd+0x38>)
 8001f0e:	69da      	ldr	r2, [r3, #28]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	43db      	mvns	r3, r3
 8001f14:	4903      	ldr	r1, [pc, #12]	; (8001f24 <RCC_APB1PeriphClockCmd+0x38>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	61cb      	str	r3, [r1, #28]
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr
 8001f24:	40021000 	.word	0x40021000

08001f28 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d006      	beq.n	8001f48 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <RCC_APB2PeriphResetCmd+0x38>)
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	4908      	ldr	r1, [pc, #32]	; (8001f60 <RCC_APB2PeriphResetCmd+0x38>)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8001f46:	e006      	b.n	8001f56 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <RCC_APB2PeriphResetCmd+0x38>)
 8001f4a:	68da      	ldr	r2, [r3, #12]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	4903      	ldr	r1, [pc, #12]	; (8001f60 <RCC_APB2PeriphResetCmd+0x38>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	60cb      	str	r3, [r1, #12]
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr
 8001f60:	40021000 	.word	0x40021000

08001f64 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a2e      	ldr	r2, [pc, #184]	; (8002034 <TIM_TimeBaseInit+0xd0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d013      	beq.n	8001fa8 <TIM_TimeBaseInit+0x44>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a2d      	ldr	r2, [pc, #180]	; (8002038 <TIM_TimeBaseInit+0xd4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d00f      	beq.n	8001fa8 <TIM_TimeBaseInit+0x44>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f8e:	d00b      	beq.n	8001fa8 <TIM_TimeBaseInit+0x44>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a2a      	ldr	r2, [pc, #168]	; (800203c <TIM_TimeBaseInit+0xd8>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d007      	beq.n	8001fa8 <TIM_TimeBaseInit+0x44>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a29      	ldr	r2, [pc, #164]	; (8002040 <TIM_TimeBaseInit+0xdc>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d003      	beq.n	8001fa8 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a28      	ldr	r2, [pc, #160]	; (8002044 <TIM_TimeBaseInit+0xe0>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d108      	bne.n	8001fba <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8001fa8:	89fb      	ldrh	r3, [r7, #14]
 8001faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fae:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	885a      	ldrh	r2, [r3, #2]
 8001fb4:	89fb      	ldrh	r3, [r7, #14]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a22      	ldr	r2, [pc, #136]	; (8002048 <TIM_TimeBaseInit+0xe4>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d00c      	beq.n	8001fdc <TIM_TimeBaseInit+0x78>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a21      	ldr	r2, [pc, #132]	; (800204c <TIM_TimeBaseInit+0xe8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d008      	beq.n	8001fdc <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8001fca:	89fb      	ldrh	r3, [r7, #14]
 8001fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fd0:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	88da      	ldrh	r2, [r3, #6]
 8001fd6:	89fb      	ldrh	r3, [r7, #14]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	89fa      	ldrh	r2, [r7, #14]
 8001fe0:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	889a      	ldrh	r2, [r3, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	881a      	ldrh	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a0f      	ldr	r2, [pc, #60]	; (8002034 <TIM_TimeBaseInit+0xd0>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d00f      	beq.n	800201a <TIM_TimeBaseInit+0xb6>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a0e      	ldr	r2, [pc, #56]	; (8002038 <TIM_TimeBaseInit+0xd4>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d00b      	beq.n	800201a <TIM_TimeBaseInit+0xb6>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a12      	ldr	r2, [pc, #72]	; (8002050 <TIM_TimeBaseInit+0xec>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d007      	beq.n	800201a <TIM_TimeBaseInit+0xb6>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a11      	ldr	r2, [pc, #68]	; (8002054 <TIM_TimeBaseInit+0xf0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d003      	beq.n	800201a <TIM_TimeBaseInit+0xb6>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a10      	ldr	r2, [pc, #64]	; (8002058 <TIM_TimeBaseInit+0xf4>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d104      	bne.n	8002024 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	7a1b      	ldrb	r3, [r3, #8]
 800201e:	b29a      	uxth	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	829a      	strh	r2, [r3, #20]
}
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr
 8002034:	40012c00 	.word	0x40012c00
 8002038:	40013400 	.word	0x40013400
 800203c:	40000400 	.word	0x40000400
 8002040:	40000800 	.word	0x40000800
 8002044:	40000c00 	.word	0x40000c00
 8002048:	40001000 	.word	0x40001000
 800204c:	40001400 	.word	0x40001400
 8002050:	40014000 	.word	0x40014000
 8002054:	40014400 	.word	0x40014400
 8002058:	40014800 	.word	0x40014800

0800205c <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	817b      	strh	r3, [r7, #10]
 800206a:	2300      	movs	r3, #0
 800206c:	81fb      	strh	r3, [r7, #14]
 800206e:	2300      	movs	r3, #0
 8002070:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	8c1b      	ldrh	r3, [r3, #32]
 8002076:	b29b      	uxth	r3, r3
 8002078:	f023 0301 	bic.w	r3, r3, #1
 800207c:	b29a      	uxth	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	8c1b      	ldrh	r3, [r3, #32]
 8002086:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	889b      	ldrh	r3, [r3, #4]
 800208c:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	8b1b      	ldrh	r3, [r3, #24]
 8002092:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 8002094:	897b      	ldrh	r3, [r7, #10]
 8002096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800209a:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 800209c:	897b      	ldrh	r3, [r7, #10]
 800209e:	f023 0303 	bic.w	r3, r3, #3
 80020a2:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	881a      	ldrh	r2, [r3, #0]
 80020a8:	897b      	ldrh	r3, [r7, #10]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 80020ae:	89fb      	ldrh	r3, [r7, #14]
 80020b0:	f023 0302 	bic.w	r3, r3, #2
 80020b4:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	891a      	ldrh	r2, [r3, #8]
 80020ba:	89fb      	ldrh	r3, [r7, #14]
 80020bc:	4313      	orrs	r3, r2
 80020be:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	885a      	ldrh	r2, [r3, #2]
 80020c4:	89fb      	ldrh	r3, [r7, #14]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a24      	ldr	r2, [pc, #144]	; (8002160 <TIM_OC1Init+0x104>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d00f      	beq.n	80020f2 <TIM_OC1Init+0x96>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a23      	ldr	r2, [pc, #140]	; (8002164 <TIM_OC1Init+0x108>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d00b      	beq.n	80020f2 <TIM_OC1Init+0x96>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a22      	ldr	r2, [pc, #136]	; (8002168 <TIM_OC1Init+0x10c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d007      	beq.n	80020f2 <TIM_OC1Init+0x96>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a21      	ldr	r2, [pc, #132]	; (800216c <TIM_OC1Init+0x110>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d003      	beq.n	80020f2 <TIM_OC1Init+0x96>
     (TIMx == TIM16)|| (TIMx == TIM17))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a20      	ldr	r2, [pc, #128]	; (8002170 <TIM_OC1Init+0x114>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d123      	bne.n	800213a <TIM_OC1Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 80020f2:	89fb      	ldrh	r3, [r7, #14]
 80020f4:	f023 0308 	bic.w	r3, r3, #8
 80020f8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	895a      	ldrh	r2, [r3, #10]
 80020fe:	89fb      	ldrh	r3, [r7, #14]
 8002100:	4313      	orrs	r3, r2
 8002102:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8002104:	89fb      	ldrh	r3, [r7, #14]
 8002106:	f023 0304 	bic.w	r3, r3, #4
 800210a:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	889a      	ldrh	r2, [r3, #4]
 8002110:	89fb      	ldrh	r3, [r7, #14]
 8002112:	4313      	orrs	r3, r2
 8002114:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 8002116:	89bb      	ldrh	r3, [r7, #12]
 8002118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800211c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 800211e:	89bb      	ldrh	r3, [r7, #12]
 8002120:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002124:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	899a      	ldrh	r2, [r3, #12]
 800212a:	89bb      	ldrh	r3, [r7, #12]
 800212c:	4313      	orrs	r3, r2
 800212e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	89da      	ldrh	r2, [r3, #14]
 8002134:	89bb      	ldrh	r3, [r7, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	89ba      	ldrh	r2, [r7, #12]
 800213e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	897a      	ldrh	r2, [r7, #10]
 8002144:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	88da      	ldrh	r2, [r3, #6]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	869a      	strh	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	89fa      	ldrh	r2, [r7, #14]
 8002152:	841a      	strh	r2, [r3, #32]
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	40012c00 	.word	0x40012c00
 8002164:	40013400 	.word	0x40013400
 8002168:	40014000 	.word	0x40014000
 800216c:	40014400 	.word	0x40014400
 8002170:	40014800 	.word	0x40014800

08002174 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	817b      	strh	r3, [r7, #10]
 8002182:	2300      	movs	r3, #0
 8002184:	81fb      	strh	r3, [r7, #14]
 8002186:	2300      	movs	r3, #0
 8002188:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	8c1b      	ldrh	r3, [r3, #32]
 800218e:	b29b      	uxth	r3, r3
 8002190:	f023 0310 	bic.w	r3, r3, #16
 8002194:	b29a      	uxth	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	8c1b      	ldrh	r3, [r3, #32]
 800219e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	889b      	ldrh	r3, [r3, #4]
 80021a4:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	8b1b      	ldrh	r3, [r3, #24]
 80021aa:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
 80021ac:	897b      	ldrh	r3, [r7, #10]
 80021ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021b2:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 80021b4:	897b      	ldrh	r3, [r7, #10]
 80021b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ba:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	021b      	lsls	r3, r3, #8
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	897b      	ldrh	r3, [r7, #10]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 80021ca:	89fb      	ldrh	r3, [r7, #14]
 80021cc:	f023 0320 	bic.w	r3, r3, #32
 80021d0:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	891b      	ldrh	r3, [r3, #8]
 80021d6:	011b      	lsls	r3, r3, #4
 80021d8:	b29a      	uxth	r2, r3
 80021da:	89fb      	ldrh	r3, [r7, #14]
 80021dc:	4313      	orrs	r3, r2
 80021de:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	885b      	ldrh	r3, [r3, #2]
 80021e4:	011b      	lsls	r3, r3, #4
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	89fb      	ldrh	r3, [r7, #14]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a22      	ldr	r2, [pc, #136]	; (800227c <TIM_OC2Init+0x108>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d003      	beq.n	80021fe <TIM_OC2Init+0x8a>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a21      	ldr	r2, [pc, #132]	; (8002280 <TIM_OC2Init+0x10c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d12b      	bne.n	8002256 <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 80021fe:	89fb      	ldrh	r3, [r7, #14]
 8002200:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002204:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	895b      	ldrh	r3, [r3, #10]
 800220a:	011b      	lsls	r3, r3, #4
 800220c:	b29a      	uxth	r2, r3
 800220e:	89fb      	ldrh	r3, [r7, #14]
 8002210:	4313      	orrs	r3, r2
 8002212:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 8002214:	89fb      	ldrh	r3, [r7, #14]
 8002216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800221a:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	889b      	ldrh	r3, [r3, #4]
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	b29a      	uxth	r2, r3
 8002224:	89fb      	ldrh	r3, [r7, #14]
 8002226:	4313      	orrs	r3, r2
 8002228:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 800222a:	89bb      	ldrh	r3, [r7, #12]
 800222c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002230:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 8002232:	89bb      	ldrh	r3, [r7, #12]
 8002234:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002238:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	899b      	ldrh	r3, [r3, #12]
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	b29a      	uxth	r2, r3
 8002242:	89bb      	ldrh	r3, [r7, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	89db      	ldrh	r3, [r3, #14]
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	b29a      	uxth	r2, r3
 8002250:	89bb      	ldrh	r3, [r7, #12]
 8002252:	4313      	orrs	r3, r2
 8002254:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	89ba      	ldrh	r2, [r7, #12]
 800225a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	897a      	ldrh	r2, [r7, #10]
 8002260:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	88da      	ldrh	r2, [r3, #6]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	871a      	strh	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	89fa      	ldrh	r2, [r7, #14]
 800226e:	841a      	strh	r2, [r3, #32]
}
 8002270:	bf00      	nop
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	bc80      	pop	{r7}
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40012c00 	.word	0x40012c00
 8002280:	40013400 	.word	0x40013400

08002284 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	817b      	strh	r3, [r7, #10]
 8002292:	2300      	movs	r3, #0
 8002294:	81fb      	strh	r3, [r7, #14]
 8002296:	2300      	movs	r3, #0
 8002298:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	8c1b      	ldrh	r3, [r3, #32]
 800229e:	b29b      	uxth	r3, r3
 80022a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	8c1b      	ldrh	r3, [r3, #32]
 80022ae:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	889b      	ldrh	r3, [r3, #4]
 80022b4:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	8b9b      	ldrh	r3, [r3, #28]
 80022ba:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 80022bc:	897b      	ldrh	r3, [r7, #10]
 80022be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022c2:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 80022c4:	897b      	ldrh	r3, [r7, #10]
 80022c6:	f023 0303 	bic.w	r3, r3, #3
 80022ca:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	881a      	ldrh	r2, [r3, #0]
 80022d0:	897b      	ldrh	r3, [r7, #10]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 80022d6:	89fb      	ldrh	r3, [r7, #14]
 80022d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80022dc:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	891b      	ldrh	r3, [r3, #8]
 80022e2:	021b      	lsls	r3, r3, #8
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	89fb      	ldrh	r3, [r7, #14]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	885b      	ldrh	r3, [r3, #2]
 80022f0:	021b      	lsls	r3, r3, #8
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	89fb      	ldrh	r3, [r7, #14]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a22      	ldr	r2, [pc, #136]	; (8002388 <TIM_OC3Init+0x104>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d003      	beq.n	800230a <TIM_OC3Init+0x86>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a21      	ldr	r2, [pc, #132]	; (800238c <TIM_OC3Init+0x108>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d12b      	bne.n	8002362 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 800230a:	89fb      	ldrh	r3, [r7, #14]
 800230c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002310:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	895b      	ldrh	r3, [r3, #10]
 8002316:	021b      	lsls	r3, r3, #8
 8002318:	b29a      	uxth	r2, r3
 800231a:	89fb      	ldrh	r3, [r7, #14]
 800231c:	4313      	orrs	r3, r2
 800231e:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 8002320:	89fb      	ldrh	r3, [r7, #14]
 8002322:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002326:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	889b      	ldrh	r3, [r3, #4]
 800232c:	021b      	lsls	r3, r3, #8
 800232e:	b29a      	uxth	r2, r3
 8002330:	89fb      	ldrh	r3, [r7, #14]
 8002332:	4313      	orrs	r3, r2
 8002334:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
 8002336:	89bb      	ldrh	r3, [r7, #12]
 8002338:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800233c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 800233e:	89bb      	ldrh	r3, [r7, #12]
 8002340:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002344:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	899b      	ldrh	r3, [r3, #12]
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	b29a      	uxth	r2, r3
 800234e:	89bb      	ldrh	r3, [r7, #12]
 8002350:	4313      	orrs	r3, r2
 8002352:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	89db      	ldrh	r3, [r3, #14]
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	b29a      	uxth	r2, r3
 800235c:	89bb      	ldrh	r3, [r7, #12]
 800235e:	4313      	orrs	r3, r2
 8002360:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	89ba      	ldrh	r2, [r7, #12]
 8002366:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	897a      	ldrh	r2, [r7, #10]
 800236c:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	88da      	ldrh	r2, [r3, #6]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	89fa      	ldrh	r2, [r7, #14]
 800237a:	841a      	strh	r2, [r3, #32]
}
 800237c:	bf00      	nop
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40012c00 	.word	0x40012c00
 800238c:	40013400 	.word	0x40013400

08002390 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	81bb      	strh	r3, [r7, #12]
 800239e:	2300      	movs	r3, #0
 80023a0:	817b      	strh	r3, [r7, #10]
 80023a2:	2300      	movs	r3, #0
 80023a4:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	8c1b      	ldrh	r3, [r3, #32]
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	8c1b      	ldrh	r3, [r3, #32]
 80023ba:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	889b      	ldrh	r3, [r3, #4]
 80023c0:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	8b9b      	ldrh	r3, [r3, #28]
 80023c6:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
 80023c8:	89bb      	ldrh	r3, [r7, #12]
 80023ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023ce:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 80023d0:	89bb      	ldrh	r3, [r7, #12]
 80023d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023d6:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	021b      	lsls	r3, r3, #8
 80023de:	b29a      	uxth	r2, r3
 80023e0:	89bb      	ldrh	r3, [r7, #12]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 80023e6:	897b      	ldrh	r3, [r7, #10]
 80023e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023ec:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	891b      	ldrh	r3, [r3, #8]
 80023f2:	031b      	lsls	r3, r3, #12
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	897b      	ldrh	r3, [r7, #10]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	885b      	ldrh	r3, [r3, #2]
 8002400:	031b      	lsls	r3, r3, #12
 8002402:	b29a      	uxth	r2, r3
 8002404:	897b      	ldrh	r3, [r7, #10]
 8002406:	4313      	orrs	r3, r2
 8002408:	817b      	strh	r3, [r7, #10]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a12      	ldr	r2, [pc, #72]	; (8002458 <TIM_OC4Init+0xc8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d003      	beq.n	800241a <TIM_OC4Init+0x8a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a11      	ldr	r2, [pc, #68]	; (800245c <TIM_OC4Init+0xcc>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d10a      	bne.n	8002430 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 800241a:	89fb      	ldrh	r3, [r7, #14]
 800241c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002420:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	899b      	ldrh	r3, [r3, #12]
 8002426:	019b      	lsls	r3, r3, #6
 8002428:	b29a      	uxth	r2, r3
 800242a:	89fb      	ldrh	r3, [r7, #14]
 800242c:	4313      	orrs	r3, r2
 800242e:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	89fa      	ldrh	r2, [r7, #14]
 8002434:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	89ba      	ldrh	r2, [r7, #12]
 800243a:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	88da      	ldrh	r2, [r3, #6]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	897a      	ldrh	r2, [r7, #10]
 800244a:	841a      	strh	r2, [r3, #32]
}
 800244c:	bf00      	nop
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40012c00 	.word	0x40012c00
 800245c:	40013400 	.word	0x40013400

08002460 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d008      	beq.n	8002484 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	b29b      	uxth	r3, r3
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	b29a      	uxth	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8002482:	e007      	b.n	8002494 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	b29b      	uxth	r3, r3
 800248a:	f023 0301 	bic.w	r3, r3, #1
 800248e:	b29a      	uxth	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	801a      	strh	r2, [r3, #0]
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr

0800249e <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	460b      	mov	r3, r1
 80024a8:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80024aa:	78fb      	ldrb	r3, [r7, #3]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d008      	beq.n	80024c2 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
  }
}
 80024c0:	e007      	b.n	80024d2 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	801a      	strh	r2, [r3, #0]
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr

080024dc <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	8b1b      	ldrh	r3, [r3, #24]
 80024f0:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 80024f2:	89fb      	ldrh	r3, [r7, #14]
 80024f4:	f023 0308 	bic.w	r3, r3, #8
 80024f8:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80024fa:	89fa      	ldrh	r2, [r7, #14]
 80024fc:	887b      	ldrh	r3, [r7, #2]
 80024fe:	4313      	orrs	r3, r2
 8002500:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	89fa      	ldrh	r2, [r7, #14]
 8002506:	831a      	strh	r2, [r3, #24]
}
 8002508:	bf00      	nop
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr

08002512 <TIM_OC2PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002512:	b480      	push	{r7}
 8002514:	b085      	sub	sp, #20
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	460b      	mov	r3, r1
 800251c:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	8b1b      	ldrh	r3, [r3, #24]
 8002526:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 8002528:	89fb      	ldrh	r3, [r7, #14]
 800252a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800252e:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8002530:	887b      	ldrh	r3, [r7, #2]
 8002532:	021b      	lsls	r3, r3, #8
 8002534:	b29a      	uxth	r2, r3
 8002536:	89fb      	ldrh	r3, [r7, #14]
 8002538:	4313      	orrs	r3, r2
 800253a:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	89fa      	ldrh	r2, [r7, #14]
 8002540:	831a      	strh	r2, [r3, #24]
}
 8002542:	bf00      	nop
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	8b9b      	ldrh	r3, [r3, #28]
 8002560:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 8002562:	89fb      	ldrh	r3, [r7, #14]
 8002564:	f023 0308 	bic.w	r3, r3, #8
 8002568:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800256a:	89fa      	ldrh	r2, [r7, #14]
 800256c:	887b      	ldrh	r3, [r7, #2]
 800256e:	4313      	orrs	r3, r2
 8002570:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	89fa      	ldrh	r2, [r7, #14]
 8002576:	839a      	strh	r2, [r3, #28]
}
 8002578:	bf00      	nop
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr

08002582 <TIM_OC4PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002582:	b480      	push	{r7}
 8002584:	b085      	sub	sp, #20
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	460b      	mov	r3, r1
 800258c:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800258e:	2300      	movs	r3, #0
 8002590:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	8b9b      	ldrh	r3, [r3, #28]
 8002596:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 8002598:	89fb      	ldrh	r3, [r7, #14]
 800259a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800259e:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 80025a0:	887b      	ldrh	r3, [r7, #2]
 80025a2:	021b      	lsls	r3, r3, #8
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	89fb      	ldrh	r3, [r7, #14]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	89fa      	ldrh	r2, [r7, #14]
 80025b0:	839a      	strh	r2, [r3, #28]
}
 80025b2:	bf00      	nop
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr

080025bc <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	887a      	ldrh	r2, [r7, #2]
 80025cc:	849a      	strh	r2, [r3, #36]	; 0x24
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr

080025d8 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	887a      	ldrh	r2, [r7, #2]
 80025e8:	869a      	strh	r2, [r3, #52]	; 0x34
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <TIM_SetCompare2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	887a      	ldrh	r2, [r7, #2]
 8002604:	871a      	strh	r2, [r3, #56]	; 0x38
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr

08002610 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	887a      	ldrh	r2, [r7, #2]
 8002620:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr

0800262c <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	887a      	ldrh	r2, [r7, #2]
 800263c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
	...

0800264c <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08c      	sub	sp, #48	; 0x30
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8002656:	2300      	movs	r3, #0
 8002658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800265a:	2300      	movs	r3, #0
 800265c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 800265e:	2300      	movs	r3, #0
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8002662:	2300      	movs	r3, #0
 8002664:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	8a1b      	ldrh	r3, [r3, #16]
 8002672:	b29b      	uxth	r3, r3
 8002674:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8002676:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002678:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800267c:	4013      	ands	r3, r2
 800267e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	88db      	ldrh	r3, [r3, #6]
 8002684:	461a      	mov	r2, r3
 8002686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002688:	4313      	orrs	r3, r2
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800268c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268e:	b29a      	uxth	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	899b      	ldrh	r3, [r3, #12]
 8002698:	b29b      	uxth	r3, r3
 800269a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 800269c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800269e:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 80026a2:	4013      	ands	r3, r2
 80026a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	889a      	ldrh	r2, [r3, #4]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	891b      	ldrh	r3, [r3, #8]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80026b6:	4313      	orrs	r3, r2
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	461a      	mov	r2, r3
 80026bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026be:	4313      	orrs	r3, r2
 80026c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80026c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	8a9b      	ldrh	r3, [r3, #20]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 80026d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026d4:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 80026d8:	4013      	ands	r3, r2
 80026da:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	899b      	ldrh	r3, [r3, #12]
 80026e0:	461a      	mov	r2, r3
 80026e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e4:	4313      	orrs	r3, r2
 80026e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80026e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80026f0:	f107 0308 	add.w	r3, r7, #8
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff fb07 	bl	8001d08 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	4a2e      	ldr	r2, [pc, #184]	; (80027b8 <USART_Init+0x16c>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d102      	bne.n	8002708 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	62bb      	str	r3, [r7, #40]	; 0x28
 8002706:	e001      	b.n	800270c <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	899b      	ldrh	r3, [r3, #12]
 8002710:	b29b      	uxth	r3, r3
 8002712:	b21b      	sxth	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	da0c      	bge.n	8002732 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002718:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	009a      	lsls	r2, r3, #2
 8002722:	441a      	add	r2, r3
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	fbb2 f3f3 	udiv	r3, r2, r3
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
 8002730:	e00b      	b.n	800274a <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002734:	4613      	mov	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	009a      	lsls	r2, r3, #2
 800273c:	441a      	add	r2, r3
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	fbb2 f3f3 	udiv	r3, r2, r3
 8002748:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	4a1b      	ldr	r2, [pc, #108]	; (80027bc <USART_Init+0x170>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8002758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275a:	091b      	lsrs	r3, r3, #4
 800275c:	2264      	movs	r2, #100	; 0x64
 800275e:	fb02 f303 	mul.w	r3, r2, r3
 8002762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	899b      	ldrh	r3, [r3, #12]
 800276c:	b29b      	uxth	r3, r3
 800276e:	b21b      	sxth	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	da0c      	bge.n	800278e <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	3332      	adds	r3, #50	; 0x32
 800277a:	4a10      	ldr	r2, [pc, #64]	; (80027bc <USART_Init+0x170>)
 800277c:	fba2 2303 	umull	r2, r3, r2, r3
 8002780:	095b      	lsrs	r3, r3, #5
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002788:	4313      	orrs	r3, r2
 800278a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800278c:	e00b      	b.n	80027a6 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	3332      	adds	r3, #50	; 0x32
 8002794:	4a09      	ldr	r2, [pc, #36]	; (80027bc <USART_Init+0x170>)
 8002796:	fba2 2303 	umull	r2, r3, r2, r3
 800279a:	095b      	lsrs	r3, r3, #5
 800279c:	f003 030f 	and.w	r3, r3, #15
 80027a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027a2:	4313      	orrs	r3, r2
 80027a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80027a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	811a      	strh	r2, [r3, #8]
}
 80027ae:	bf00      	nop
 80027b0:	3730      	adds	r7, #48	; 0x30
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40013800 	.word	0x40013800
 80027bc:	51eb851f 	.word	0x51eb851f

080027c0 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80027cc:	78fb      	ldrb	r3, [r7, #3]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d008      	beq.n	80027e4 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	899b      	ldrh	r3, [r3, #12]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027dc:	b29a      	uxth	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 80027e2:	e007      	b.n	80027f4 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	899b      	ldrh	r3, [r3, #12]
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	819a      	strh	r2, [r3, #12]
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr

080027fe <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80027fe:	b480      	push	{r7}
 8002800:	b087      	sub	sp, #28
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	460b      	mov	r3, r1
 8002808:	807b      	strh	r3, [r7, #2]
 800280a:	4613      	mov	r3, r2
 800280c:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 800280e:	2300      	movs	r3, #0
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	2300      	movs	r3, #0
 8002818:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002822:	887b      	ldrh	r3, [r7, #2]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	095b      	lsrs	r3, r3, #5
 8002828:	b2db      	uxtb	r3, r3
 800282a:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 800282c:	887b      	ldrh	r3, [r7, #2]
 800282e:	f003 031f 	and.w	r3, r3, #31
 8002832:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8002834:	2201      	movs	r2, #1
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d103      	bne.n	800284c <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	330c      	adds	r3, #12
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	e009      	b.n	8002860 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	2b02      	cmp	r3, #2
 8002850:	d103      	bne.n	800285a <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	3310      	adds	r3, #16
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	e002      	b.n	8002860 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	3314      	adds	r3, #20
 800285e:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8002860:	787b      	ldrb	r3, [r7, #1]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d006      	beq.n	8002874 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	6819      	ldr	r1, [r3, #0]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	430a      	orrs	r2, r1
 8002870:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8002872:	e006      	b.n	8002882 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	6819      	ldr	r1, [r3, #0]
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	43da      	mvns	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	400a      	ands	r2, r1
 8002880:	601a      	str	r2, [r3, #0]
}
 8002882:	bf00      	nop
 8002884:	371c      	adds	r7, #28
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr

0800288c <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	889b      	ldrh	r3, [r3, #4]
 8002898:	b29b      	uxth	r3, r3
 800289a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800289e:	b29b      	uxth	r3, r3
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr

080028aa <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b087      	sub	sp, #28
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	460b      	mov	r3, r1
 80028b4:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	2300      	movs	r3, #0
 80028c0:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80028c2:	2300      	movs	r3, #0
 80028c4:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80028c6:	887b      	ldrh	r3, [r7, #2]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 80028d0:	887b      	ldrh	r3, [r7, #2]
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80028d8:	2201      	movs	r2, #1
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d107      	bne.n	80028f8 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	899b      	ldrh	r3, [r3, #12]
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	461a      	mov	r2, r3
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	4013      	ands	r3, r2
 80028f4:	617b      	str	r3, [r7, #20]
 80028f6:	e011      	b.n	800291c <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d107      	bne.n	800290e <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	8a1b      	ldrh	r3, [r3, #16]
 8002902:	b29b      	uxth	r3, r3
 8002904:	461a      	mov	r2, r3
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	4013      	ands	r3, r2
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	e006      	b.n	800291c <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	8a9b      	ldrh	r3, [r3, #20]
 8002912:	b29b      	uxth	r3, r3
 8002914:	461a      	mov	r2, r3
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	4013      	ands	r3, r2
 800291a:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 800291c:	887b      	ldrh	r3, [r7, #2]
 800291e:	0a1b      	lsrs	r3, r3, #8
 8002920:	b29b      	uxth	r3, r3
 8002922:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8002924:	2201      	movs	r2, #1
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	b29b      	uxth	r3, r3
 8002934:	461a      	mov	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	4013      	ands	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d005      	beq.n	800294e <USART_GetITStatus+0xa4>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8002948:	2301      	movs	r3, #1
 800294a:	74fb      	strb	r3, [r7, #19]
 800294c:	e001      	b.n	8002952 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 800294e:	2300      	movs	r3, #0
 8002950:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8002952:	7cfb      	ldrb	r3, [r7, #19]
}
 8002954:	4618      	mov	r0, r3
 8002956:	371c      	adds	r7, #28
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr

0800295e <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800295e:	b480      	push	{r7}
 8002960:	b085      	sub	sp, #20
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	460b      	mov	r3, r1
 8002968:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 800296a:	2300      	movs	r3, #0
 800296c:	81fb      	strh	r3, [r7, #14]
 800296e:	2300      	movs	r3, #0
 8002970:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
 8002972:	887b      	ldrh	r3, [r7, #2]
 8002974:	0a1b      	lsrs	r3, r3, #8
 8002976:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8002978:	89fb      	ldrh	r3, [r7, #14]
 800297a:	2201      	movs	r2, #1
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8002982:	89bb      	ldrh	r3, [r7, #12]
 8002984:	43db      	mvns	r3, r3
 8002986:	b29a      	uxth	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	801a      	strh	r2, [r3, #0]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr
	...

08002998 <Button_Init>:
 * @brief  Initialize module button
 * @param  None
 * @retval None
 */
void
Button_Init(void) {
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af02      	add	r7, sp, #8
    // Initialize gpio
	BTNGPIO_Init();
 800299e:	f000 f99f 	bl	8002ce0 <BTNGPIO_Init>

    for (uint8_t i = 0; i < BUTTON_ID_MAX; i++) {
 80029a2:	2300      	movs	r3, #0
 80029a4:	71fb      	strb	r3, [r7, #7]
 80029a6:	e040      	b.n	8002a2a <Button_Init+0x92>
		kpad[i].index = i;
 80029a8:	79fa      	ldrb	r2, [r7, #7]
 80029aa:	4927      	ldr	r1, [pc, #156]	; (8002a48 <Button_Init+0xb0>)
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	330a      	adds	r3, #10
 80029b8:	79fa      	ldrb	r2, [r7, #7]
 80029ba:	701a      	strb	r2, [r3, #0]
		kpad[i].mode = BUTTON_MODE_LOGIC;
 80029bc:	79fa      	ldrb	r2, [r7, #7]
 80029be:	4922      	ldr	r1, [pc, #136]	; (8002a48 <Button_Init+0xb0>)
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	330b      	adds	r3, #11
 80029cc:	2201      	movs	r2, #1
 80029ce:	701a      	strb	r2, [r3, #0]
		kpad[i].scanBtnFunc = ButtonScanTypeEdge;
 80029d0:	79fa      	ldrb	r2, [r7, #7]
 80029d2:	491d      	ldr	r1, [pc, #116]	; (8002a48 <Button_Init+0xb0>)
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	3310      	adds	r3, #16
 80029e0:	4a1a      	ldr	r2, [pc, #104]	; (8002a4c <Button_Init+0xb4>)
 80029e2:	601a      	str	r2, [r3, #0]
		if (GPIO_ReadInputDataBit(pinBtnPad[i].port, pinBtnPad[i].pin) == pinBtnPad[i].logicPress) {
 80029e4:	79fb      	ldrb	r3, [r7, #7]
 80029e6:	4a1a      	ldr	r2, [pc, #104]	; (8002a50 <Button_Init+0xb8>)
 80029e8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	4918      	ldr	r1, [pc, #96]	; (8002a50 <Button_Init+0xb8>)
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	440b      	add	r3, r1
 80029f4:	889b      	ldrh	r3, [r3, #4]
 80029f6:	4619      	mov	r1, r3
 80029f8:	4610      	mov	r0, r2
 80029fa:	f7ff f89f 	bl	8001b3c <GPIO_ReadInputDataBit>
 80029fe:	4603      	mov	r3, r0
 8002a00:	4619      	mov	r1, r3
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	4a12      	ldr	r2, [pc, #72]	; (8002a50 <Button_Init+0xb8>)
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4413      	add	r3, r2
 8002a0a:	799b      	ldrb	r3, [r3, #6]
 8002a0c:	4299      	cmp	r1, r3
 8002a0e:	d109      	bne.n	8002a24 <Button_Init+0x8c>
			kpad[i].sold = PIN_ACTIVE;
 8002a10:	79fa      	ldrb	r2, [r7, #7]
 8002a12:	490d      	ldr	r1, [pc, #52]	; (8002a48 <Button_Init+0xb0>)
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	3309      	adds	r3, #9
 8002a20:	2201      	movs	r2, #1
 8002a22:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < BUTTON_ID_MAX; i++) {
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	3301      	adds	r3, #1
 8002a28:	71fb      	strb	r3, [r7, #7]
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	d9bb      	bls.n	80029a8 <Button_Init+0x10>
		}
	}

    TimerStart("", BUTTON_TIME_SCAN, TIMER_REPEAT_FOREVER, ButtonScanEventHandler, NULL);
 8002a30:	2300      	movs	r3, #0
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <Button_Init+0xbc>)
 8002a36:	22ff      	movs	r2, #255	; 0xff
 8002a38:	2105      	movs	r1, #5
 8002a3a:	4807      	ldr	r0, [pc, #28]	; (8002a58 <Button_Init+0xc0>)
 8002a3c:	f000 ffd0 	bl	80039e0 <TimerStart>
}
 8002a40:	bf00      	nop
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	200000ec 	.word	0x200000ec
 8002a4c:	08002a8d 	.word	0x08002a8d
 8002a50:	20000028 	.word	0x20000028
 8002a54:	08002c95 	.word	0x08002c95
 8002a58:	08005240 	.word	0x08005240

08002a5c <Button_RegisterEventCallback>:
 */
void
Button_RegisterEventCallback(
    button_event_e buttonEvent,
    button_event_callback procbuttonEvent
) {
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	6039      	str	r1, [r7, #0]
 8002a66:	71fb      	strb	r3, [r7, #7]
	if ((buttonEvent < BUTTON_EVENT_MAX) && (procbuttonEvent != NULL)) {
 8002a68:	79fb      	ldrb	r3, [r7, #7]
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	d807      	bhi.n	8002a7e <Button_RegisterEventCallback+0x22>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d004      	beq.n	8002a7e <Button_RegisterEventCallback+0x22>
        pEventCallbacks[buttonEvent] = procbuttonEvent;
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	4904      	ldr	r1, [pc, #16]	; (8002a88 <Button_RegisterEventCallback+0x2c>)
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr
 8002a88:	2000013c 	.word	0x2000013c

08002a8c <ButtonScanTypeEdge>:
 * @retval None
 */
void
ButtonScanTypeEdge(
    void *arg
) {
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
	buttondat_p bt = (buttondat_p)arg;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	60fb      	str	r3, [r7, #12]
    uint8_t i = bt->index;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	7a9b      	ldrb	r3, [r3, #10]
 8002a9c:	72fb      	strb	r3, [r7, #11]
    
    if (bt->mode != BUTTON_MODE_IDLE)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	7adb      	ldrb	r3, [r3, #11]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 80ee 	beq.w	8002c84 <ButtonScanTypeEdge+0x1f8>
    {
		if (GPIO_ReadInputDataBit(pinBtnPad[i].port, pinBtnPad[i].pin) == pinBtnPad[i].logicPress) {
 8002aa8:	7afb      	ldrb	r3, [r7, #11]
 8002aaa:	4a78      	ldr	r2, [pc, #480]	; (8002c8c <ButtonScanTypeEdge+0x200>)
 8002aac:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002ab0:	7afb      	ldrb	r3, [r7, #11]
 8002ab2:	4976      	ldr	r1, [pc, #472]	; (8002c8c <ButtonScanTypeEdge+0x200>)
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	440b      	add	r3, r1
 8002ab8:	889b      	ldrh	r3, [r3, #4]
 8002aba:	4619      	mov	r1, r3
 8002abc:	4610      	mov	r0, r2
 8002abe:	f7ff f83d 	bl	8001b3c <GPIO_ReadInputDataBit>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	7afb      	ldrb	r3, [r7, #11]
 8002ac8:	4a70      	ldr	r2, [pc, #448]	; (8002c8c <ButtonScanTypeEdge+0x200>)
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4413      	add	r3, r2
 8002ace:	799b      	ldrb	r3, [r3, #6]
 8002ad0:	4299      	cmp	r1, r3
 8002ad2:	d10a      	bne.n	8002aea <ButtonScanTypeEdge+0x5e>
			if (bt->countActive != 0xFFU) {
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	7b5b      	ldrb	r3, [r3, #13]
 8002ad8:	2bff      	cmp	r3, #255	; 0xff
 8002ada:	d013      	beq.n	8002b04 <ButtonScanTypeEdge+0x78>
				bt->countActive++;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	7b5b      	ldrb	r3, [r3, #13]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	735a      	strb	r2, [r3, #13]
 8002ae8:	e00c      	b.n	8002b04 <ButtonScanTypeEdge+0x78>
			}
		}
		else {
			if (bt->countInactive != 0xFFU) {
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	7b1b      	ldrb	r3, [r3, #12]
 8002aee:	2bff      	cmp	r3, #255	; 0xff
 8002af0:	d005      	beq.n	8002afe <ButtonScanTypeEdge+0x72>
				bt->countInactive++;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	7b1b      	ldrb	r3, [r3, #12]
 8002af6:	3301      	adds	r3, #1
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	731a      	strb	r2, [r3, #12]
			}

			bt->countActive = 0;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	735a      	strb	r2, [r3, #13]
		}

		if (bt->countInactive >= TIMECNT_UNACTPRESS) {
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	7b1b      	ldrb	r3, [r3, #12]
 8002b08:	2b09      	cmp	r3, #9
 8002b0a:	d958      	bls.n	8002bbe <ButtonScanTypeEdge+0x132>
			if (bt->sold == PIN_ACTIVE) {
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	7a5b      	ldrb	r3, [r3, #9]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d118      	bne.n	8002b46 <ButtonScanTypeEdge+0xba>
				bt->sold = PIN_UNACTIVE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	725a      	strb	r2, [r3, #9]

				if ((pEventCallbacks[BUTTON_EVENT_EDGE] != NULL) && (bt->mode & BUTTON_MODE_EDGE)) {
 8002b1a:	4b5d      	ldr	r3, [pc, #372]	; (8002c90 <ButtonScanTypeEdge+0x204>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00b      	beq.n	8002b3a <ButtonScanTypeEdge+0xae>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	7adb      	ldrb	r3, [r3, #11]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <ButtonScanTypeEdge+0xae>
					pEventCallbacks[BUTTON_EVENT_EDGE](i, BUTTON_EDGE_FALLING);
 8002b2e:	4b58      	ldr	r3, [pc, #352]	; (8002c90 <ButtonScanTypeEdge+0x204>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	7afa      	ldrb	r2, [r7, #11]
 8002b34:	2101      	movs	r1, #1
 8002b36:	4610      	mov	r0, r2
 8002b38:	4798      	blx	r3
				}

				bt->time = bt->countInactive;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	7b1b      	ldrb	r3, [r3, #12]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	e03b      	b.n	8002bbe <ButtonScanTypeEdge+0x132>
			} else {
				bt->time++;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	601a      	str	r2, [r3, #0]
				if (bt->time >= TIMECNT_BW2PRESS) {
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b4f      	cmp	r3, #79	; 0x4f
 8002b56:	d932      	bls.n	8002bbe <ButtonScanTypeEdge+0x132>
					if (bt->holdCnt != 0) {
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d012      	beq.n	8002b86 <ButtonScanTypeEdge+0xfa>
						if ((pEventCallbacks[BUTTON_EVENT_RELEASE] != NULL) && (bt->mode & BUTTON_MODE_LOGIC)) {
 8002b60:	4b4b      	ldr	r3, [pc, #300]	; (8002c90 <ButtonScanTypeEdge+0x204>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d024      	beq.n	8002bb2 <ButtonScanTypeEdge+0x126>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	7adb      	ldrb	r3, [r3, #11]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d01e      	beq.n	8002bb2 <ButtonScanTypeEdge+0x126>
							pEventCallbacks[BUTTON_EVENT_RELEASE](i, bt->holdCnt);
 8002b74:	4b46      	ldr	r3, [pc, #280]	; (8002c90 <ButtonScanTypeEdge+0x204>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	6852      	ldr	r2, [r2, #4]
 8002b7c:	b291      	uxth	r1, r2
 8002b7e:	7afa      	ldrb	r2, [r7, #11]
 8002b80:	4610      	mov	r0, r2
 8002b82:	4798      	blx	r3
 8002b84:	e015      	b.n	8002bb2 <ButtonScanTypeEdge+0x126>
						}
					}
					else if ((pEventCallbacks[BUTTON_EVENT_PRESS] != NULL) && (bt->mode & BUTTON_MODE_LOGIC) \
 8002b86:	4b42      	ldr	r3, [pc, #264]	; (8002c90 <ButtonScanTypeEdge+0x204>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d011      	beq.n	8002bb2 <ButtonScanTypeEdge+0x126>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	7adb      	ldrb	r3, [r3, #11]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00b      	beq.n	8002bb2 <ButtonScanTypeEdge+0x126>
							 && bt->pressCnt != 0)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	7a1b      	ldrb	r3, [r3, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d007      	beq.n	8002bb2 <ButtonScanTypeEdge+0x126>
					{
						pEventCallbacks[BUTTON_EVENT_PRESS](i, bt->pressCnt);
 8002ba2:	4b3b      	ldr	r3, [pc, #236]	; (8002c90 <ButtonScanTypeEdge+0x204>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	7a12      	ldrb	r2, [r2, #8]
 8002baa:	b291      	uxth	r1, r2
 8002bac:	7afa      	ldrb	r2, [r7, #11]
 8002bae:	4610      	mov	r0, r2
 8002bb0:	4798      	blx	r3
					}

					bt->holdCnt = 0;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	605a      	str	r2, [r3, #4]
					bt->pressCnt = 0;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	721a      	strb	r2, [r3, #8]
				}
			}
		}

		if (bt->countActive >= TIMECNT_ACTPRESS) {
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	7b5b      	ldrb	r3, [r3, #13]
 8002bc2:	2b09      	cmp	r3, #9
 8002bc4:	d95e      	bls.n	8002c84 <ButtonScanTypeEdge+0x1f8>
			/* reset count inactive */
			bt->countInactive = 0;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	731a      	strb	r2, [r3, #12]

			if (bt->sold == PIN_UNACTIVE) {
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	7a5b      	ldrb	r3, [r3, #9]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d11e      	bne.n	8002c12 <ButtonScanTypeEdge+0x186>
				bt->sold = PIN_ACTIVE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	725a      	strb	r2, [r3, #9]

				if ((pEventCallbacks[BUTTON_EVENT_EDGE] != NULL) && (bt->mode & BUTTON_MODE_EDGE)) {
 8002bda:	4b2d      	ldr	r3, [pc, #180]	; (8002c90 <ButtonScanTypeEdge+0x204>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00b      	beq.n	8002bfa <ButtonScanTypeEdge+0x16e>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	7adb      	ldrb	r3, [r3, #11]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d005      	beq.n	8002bfa <ButtonScanTypeEdge+0x16e>
					pEventCallbacks[BUTTON_EVENT_EDGE](i, BUTTON_EDGE_RISING);
 8002bee:	4b28      	ldr	r3, [pc, #160]	; (8002c90 <ButtonScanTypeEdge+0x204>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	7afa      	ldrb	r2, [r7, #11]
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	4798      	blx	r3
				}

				bt->time = bt->countActive;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	7b5b      	ldrb	r3, [r3, #13]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	601a      	str	r2, [r3, #0]
				bt->pressCnt++;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	7a1b      	ldrb	r3, [r3, #8]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	721a      	strb	r2, [r3, #8]
					}
				}
			}
		}
    }
}
 8002c10:	e038      	b.n	8002c84 <ButtonScanTypeEdge+0x1f8>
				bt->time++;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	601a      	str	r2, [r3, #0]
				if (bt->time >= TIMECNT_IS_HOLD) {
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b77      	cmp	r3, #119	; 0x77
 8002c22:	d92f      	bls.n	8002c84 <ButtonScanTypeEdge+0x1f8>
					bt->pressCnt = 0;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	721a      	strb	r2, [r3, #8]
					bt->holdCnt = bt->time;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	605a      	str	r2, [r3, #4]
					if ((bt->holdCnt == TIMECNT_IS_HOLD) || (bt->holdCnt == TIMECNT_HOLD1S) || (bt->holdCnt == TIMECNT_HOLD3S) ||
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b78      	cmp	r3, #120	; 0x78
 8002c38:	d012      	beq.n	8002c60 <ButtonScanTypeEdge+0x1d4>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2bc8      	cmp	r3, #200	; 0xc8
 8002c40:	d00e      	beq.n	8002c60 <ButtonScanTypeEdge+0x1d4>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002c4a:	d009      	beq.n	8002c60 <ButtonScanTypeEdge+0x1d4>
						(bt->holdCnt == TIMECNT_HOLD5S) || (bt->holdCnt == TIMECNT_HOLD10S))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	685b      	ldr	r3, [r3, #4]
					if ((bt->holdCnt == TIMECNT_IS_HOLD) || (bt->holdCnt == TIMECNT_HOLD1S) || (bt->holdCnt == TIMECNT_HOLD3S) ||
 8002c50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c54:	d004      	beq.n	8002c60 <ButtonScanTypeEdge+0x1d4>
						(bt->holdCnt == TIMECNT_HOLD5S) || (bt->holdCnt == TIMECNT_HOLD10S))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002c5e:	d111      	bne.n	8002c84 <ButtonScanTypeEdge+0x1f8>
						if (pEventCallbacks[BUTTON_EVENT_HOLD] != NULL && (bt->mode & BUTTON_MODE_LOGIC)) {
 8002c60:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <ButtonScanTypeEdge+0x204>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00d      	beq.n	8002c84 <ButtonScanTypeEdge+0x1f8>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	7adb      	ldrb	r3, [r3, #11]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d007      	beq.n	8002c84 <ButtonScanTypeEdge+0x1f8>
							pEventCallbacks[BUTTON_EVENT_HOLD](i, bt->holdCnt);
 8002c74:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <ButtonScanTypeEdge+0x204>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	6852      	ldr	r2, [r2, #4]
 8002c7c:	b291      	uxth	r1, r2
 8002c7e:	7afa      	ldrb	r2, [r7, #11]
 8002c80:	4610      	mov	r0, r2
 8002c82:	4798      	blx	r3
}
 8002c84:	bf00      	nop
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	20000028 	.word	0x20000028
 8002c90:	2000013c 	.word	0x2000013c

08002c94 <ButtonScanEventHandler>:
 * @retval None
 */
void
ButtonScanEventHandler(
    void *arg
) {
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < BUTTON_ID_MAX; i++) {
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	73fb      	strb	r3, [r7, #15]
 8002ca0:	e014      	b.n	8002ccc <ButtonScanEventHandler+0x38>
        kpad[i].scanBtnFunc(&kpad[i]);
 8002ca2:	7bfa      	ldrb	r2, [r7, #15]
 8002ca4:	490d      	ldr	r1, [pc, #52]	; (8002cdc <ButtonScanEventHandler+0x48>)
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	3310      	adds	r3, #16
 8002cb2:	6819      	ldr	r1, [r3, #0]
 8002cb4:	7bfa      	ldrb	r2, [r7, #15]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4413      	add	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4a07      	ldr	r2, [pc, #28]	; (8002cdc <ButtonScanEventHandler+0x48>)
 8002cc0:	4413      	add	r3, r2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	4788      	blx	r1
    for (uint8_t i = 0; i < BUTTON_ID_MAX; i++) {
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d9e7      	bls.n	8002ca2 <ButtonScanEventHandler+0xe>
    }
}
 8002cd2:	bf00      	nop
 8002cd4:	bf00      	nop
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	200000ec 	.word	0x200000ec

08002ce0 <BTNGPIO_Init>:
 * @brief  Initializes module button
 * @param  None
 * @retval None
 */
static void BTNGPIO_Init(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* GPIOB Clocks enable */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	2008      	movs	r0, #8
 8002cea:	f7ff f8e1 	bl	8001eb0 <RCC_APB2PeriphClockCmd>

	/* GPIOB Configuration: Channel 1 and 3 as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_10;
 8002cee:	f240 4307 	movw	r3, #1031	; 0x407
 8002cf2:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8002cf4:	2348      	movs	r3, #72	; 0x48
 8002cf6:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002cfc:	1d3b      	adds	r3, r7, #4
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4803      	ldr	r0, [pc, #12]	; (8002d10 <BTNGPIO_Init+0x30>)
 8002d02:	f7fe fe5f 	bl	80019c4 <GPIO_Init>
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40010c00 	.word	0x40010c00

08002d14 <EventButton_Init>:
 * @brief  Initialize events of button
 * @param  pFuncAppProcEvent: funtion callback
 * @retval None
 */
void
EventButton_Init(void) {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
    /* Init callback functions */
	Button_RegisterEventCallback(BUTTON_EVENT_EDGE, ButtonProcessEventEdge);
 8002d18:	4909      	ldr	r1, [pc, #36]	; (8002d40 <EventButton_Init+0x2c>)
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	f7ff fe9e 	bl	8002a5c <Button_RegisterEventCallback>
	Button_RegisterEventCallback(BUTTON_EVENT_PRESS, ButtonProcessEventPress);
 8002d20:	4908      	ldr	r1, [pc, #32]	; (8002d44 <EventButton_Init+0x30>)
 8002d22:	2001      	movs	r0, #1
 8002d24:	f7ff fe9a 	bl	8002a5c <Button_RegisterEventCallback>
	Button_RegisterEventCallback(BUTTON_EVENT_HOLD, ButtonProcessEventHold);
 8002d28:	4907      	ldr	r1, [pc, #28]	; (8002d48 <EventButton_Init+0x34>)
 8002d2a:	2002      	movs	r0, #2
 8002d2c:	f7ff fe96 	bl	8002a5c <Button_RegisterEventCallback>
	Button_RegisterEventCallback(BUTTON_EVENT_RELEASE, ButtonProcessEventRelease);
 8002d30:	4906      	ldr	r1, [pc, #24]	; (8002d4c <EventButton_Init+0x38>)
 8002d32:	2003      	movs	r0, #3
 8002d34:	f7ff fe92 	bl	8002a5c <Button_RegisterEventCallback>

    Button_Init();
 8002d38:	f7ff fe2e 	bl	8002998 <Button_Init>
}
 8002d3c:	bf00      	nop
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	08002d51 	.word	0x08002d51
 8002d44:	08002d83 	.word	0x08002d83
 8002d48:	08002de9 	.word	0x08002de9
 8002d4c:	08002e47 	.word	0x08002e47

08002d50 <ButtonProcessEventEdge>:
 */
static void 
ButtonProcessEventEdge(
    uint8_t btnID,
    uint16_t edge
) {
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	460a      	mov	r2, r1
 8002d5a:	71fb      	strb	r3, [r7, #7]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	80bb      	strh	r3, [r7, #4]
	uint8_t event;

    if (edge == BUTTON_EDGE_RISING)
 8002d60:	88bb      	ldrh	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d102      	bne.n	8002d6c <ButtonProcessEventEdge+0x1c>
    {
    	event = EVENT_OF_BUTTON_BACK_PRESS_EDGE_RISING + btnID;
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	73fb      	strb	r3, [r7, #15]
 8002d6a:	e002      	b.n	8002d72 <ButtonProcessEventEdge+0x22>
    }
    else /* (edge == BUTTON_EDGE_FAILING) */
    {
    	event = EVENT_OF_BUTTON_BACK_PRESS_EDGE_FALLING + btnID;
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	3304      	adds	r3, #4
 8002d70:	73fb      	strb	r3, [r7, #15]
    }

    EventSchedulerAdd(event);
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 fdaf 	bl	80038d8 <EventSchedulerAdd>
}
 8002d7a:	bf00      	nop
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <ButtonProcessEventPress>:
 */
static void 
ButtonProcessEventPress(
    uint8_t btnID,
    uint16_t times
) {
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	4603      	mov	r3, r0
 8002d8a:	460a      	mov	r2, r1
 8002d8c:	71fb      	strb	r3, [r7, #7]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	80bb      	strh	r3, [r7, #4]
	uint8_t event;

	if (times == 1)
 8002d92:	88bb      	ldrh	r3, [r7, #4]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d103      	bne.n	8002da0 <ButtonProcessEventPress+0x1e>
	{
		event = EVENT_OF_BUTTON_BACK_PRESS_LOGIC + btnID;
 8002d98:	79fb      	ldrb	r3, [r7, #7]
 8002d9a:	3308      	adds	r3, #8
 8002d9c:	73fb      	strb	r3, [r7, #15]
 8002d9e:	e01a      	b.n	8002dd6 <ButtonProcessEventPress+0x54>
	}
	else if (times == 2)
 8002da0:	88bb      	ldrh	r3, [r7, #4]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d103      	bne.n	8002dae <ButtonProcessEventPress+0x2c>
	{
		event = EVENT_OF_BUTTON_BACK_PRESS_2_TIMES + btnID;
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	330c      	adds	r3, #12
 8002daa:	73fb      	strb	r3, [r7, #15]
 8002dac:	e013      	b.n	8002dd6 <ButtonProcessEventPress+0x54>
	}
	else if (times == 3)
 8002dae:	88bb      	ldrh	r3, [r7, #4]
 8002db0:	2b03      	cmp	r3, #3
 8002db2:	d103      	bne.n	8002dbc <ButtonProcessEventPress+0x3a>
	{
		event = EVENT_OF_BUTTON_BACK_PRESS_3_TIMES + btnID;
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	3310      	adds	r3, #16
 8002db8:	73fb      	strb	r3, [r7, #15]
 8002dba:	e00c      	b.n	8002dd6 <ButtonProcessEventPress+0x54>
	}
	else if (times == 4)
 8002dbc:	88bb      	ldrh	r3, [r7, #4]
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d103      	bne.n	8002dca <ButtonProcessEventPress+0x48>
	{
		event = EVENT_OF_BUTTON_BACK_PRESS_4_TIMES + btnID;
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	3314      	adds	r3, #20
 8002dc6:	73fb      	strb	r3, [r7, #15]
 8002dc8:	e005      	b.n	8002dd6 <ButtonProcessEventPress+0x54>
	}
	else if (times == 5)
 8002dca:	88bb      	ldrh	r3, [r7, #4]
 8002dcc:	2b05      	cmp	r3, #5
 8002dce:	d107      	bne.n	8002de0 <ButtonProcessEventPress+0x5e>
	{
		event = EVENT_OF_BUTTON_BACK_PRESS_5_TIMES + btnID;
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	3318      	adds	r3, #24
 8002dd4:	73fb      	strb	r3, [r7, #15]
	}
	else return;

    EventSchedulerAdd(event);
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 fd7d 	bl	80038d8 <EventSchedulerAdd>
 8002dde:	e000      	b.n	8002de2 <ButtonProcessEventPress+0x60>
	else return;
 8002de0:	bf00      	nop
}
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <ButtonProcessEventHold>:
 */
static void 
ButtonProcessEventHold(
    uint8_t btnID,
    uint16_t time
) {
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	460a      	mov	r2, r1
 8002df2:	71fb      	strb	r3, [r7, #7]
 8002df4:	4613      	mov	r3, r2
 8002df6:	80bb      	strh	r3, [r7, #4]
	uint8_t event;

	if (time == TIMECNT_HOLD10S)
 8002df8:	88bb      	ldrh	r3, [r7, #4]
 8002dfa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002dfe:	d103      	bne.n	8002e08 <ButtonProcessEventHold+0x20>
	{
		event = EVENT_OF_BUTTON_BACK_HOLD_10S + btnID;
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	3328      	adds	r3, #40	; 0x28
 8002e04:	73fb      	strb	r3, [r7, #15]
 8002e06:	e015      	b.n	8002e34 <ButtonProcessEventHold+0x4c>
	}
	else if (time == TIMECNT_HOLD5S)
 8002e08:	88bb      	ldrh	r3, [r7, #4]
 8002e0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e0e:	d103      	bne.n	8002e18 <ButtonProcessEventHold+0x30>
	{
		event = EVENT_OF_BUTTON_BACK_HOLD_5S + btnID;
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	3324      	adds	r3, #36	; 0x24
 8002e14:	73fb      	strb	r3, [r7, #15]
 8002e16:	e00d      	b.n	8002e34 <ButtonProcessEventHold+0x4c>
	}
	else if (time == TIMECNT_HOLD3S)
 8002e18:	88bb      	ldrh	r3, [r7, #4]
 8002e1a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002e1e:	d103      	bne.n	8002e28 <ButtonProcessEventHold+0x40>
	{
		event = EVENT_OF_BUTTON_BACK_HOLD_3S + btnID;
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	3320      	adds	r3, #32
 8002e24:	73fb      	strb	r3, [r7, #15]
 8002e26:	e005      	b.n	8002e34 <ButtonProcessEventHold+0x4c>
	}
	else if (time == TIMECNT_HOLD1S)
 8002e28:	88bb      	ldrh	r3, [r7, #4]
 8002e2a:	2bc8      	cmp	r3, #200	; 0xc8
 8002e2c:	d107      	bne.n	8002e3e <ButtonProcessEventHold+0x56>
	{
		event = EVENT_OF_BUTTON_BACK_HOLD_1S + btnID;
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	331c      	adds	r3, #28
 8002e32:	73fb      	strb	r3, [r7, #15]
	}
	else return;

	EventSchedulerAdd(event);
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 fd4e 	bl	80038d8 <EventSchedulerAdd>
 8002e3c:	e000      	b.n	8002e40 <ButtonProcessEventHold+0x58>
	else return;
 8002e3e:	bf00      	nop
}
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <ButtonProcessEventRelease>:
 */
static void 
ButtonProcessEventRelease(
    uint8_t btnID,
    uint16_t time
) {
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b084      	sub	sp, #16
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	460a      	mov	r2, r1
 8002e50:	71fb      	strb	r3, [r7, #7]
 8002e52:	4613      	mov	r3, r2
 8002e54:	80bb      	strh	r3, [r7, #4]
	uint8_t event;

	if (time >= TIMECNT_HOLD10S)
 8002e56:	88bb      	ldrh	r3, [r7, #4]
 8002e58:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002e5c:	d303      	bcc.n	8002e66 <ButtonProcessEventRelease+0x20>
	{
		event = EVENT_OF_BUTTON_BACK_RELEASED_10S + btnID;
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
 8002e60:	3338      	adds	r3, #56	; 0x38
 8002e62:	73fb      	strb	r3, [r7, #15]
 8002e64:	e015      	b.n	8002e92 <ButtonProcessEventRelease+0x4c>
	}
	else if (time >= TIMECNT_HOLD5S)
 8002e66:	88bb      	ldrh	r3, [r7, #4]
 8002e68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e6c:	d303      	bcc.n	8002e76 <ButtonProcessEventRelease+0x30>
	{
		event = EVENT_OF_BUTTON_BACK_RELEASED_5S + btnID;
 8002e6e:	79fb      	ldrb	r3, [r7, #7]
 8002e70:	3334      	adds	r3, #52	; 0x34
 8002e72:	73fb      	strb	r3, [r7, #15]
 8002e74:	e00d      	b.n	8002e92 <ButtonProcessEventRelease+0x4c>
	}
	else if (time >= TIMECNT_HOLD3S)
 8002e76:	88bb      	ldrh	r3, [r7, #4]
 8002e78:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002e7c:	d303      	bcc.n	8002e86 <ButtonProcessEventRelease+0x40>
	{
		event = EVENT_OF_BUTTON_BACK_RELEASED_3S + btnID;
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	3330      	adds	r3, #48	; 0x30
 8002e82:	73fb      	strb	r3, [r7, #15]
 8002e84:	e005      	b.n	8002e92 <ButtonProcessEventRelease+0x4c>
	}
	else if (time >= TIMECNT_HOLD1S)
 8002e86:	88bb      	ldrh	r3, [r7, #4]
 8002e88:	2bc7      	cmp	r3, #199	; 0xc7
 8002e8a:	d907      	bls.n	8002e9c <ButtonProcessEventRelease+0x56>
	{
		event = EVENT_OF_BUTTON_BACK_RELEASED_1S + btnID;
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	332c      	adds	r3, #44	; 0x2c
 8002e90:	73fb      	strb	r3, [r7, #15]
	}
	else return;

	EventSchedulerAdd(event);
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 fd1f 	bl	80038d8 <EventSchedulerAdd>
 8002e9a:	e000      	b.n	8002e9e <ButtonProcessEventRelease+0x58>
	else return;
 8002e9c:	bf00      	nop
}
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <BuzzerControl_Init>:
 * @brief  Initialize module buzzer
 * @param  None
 * @retval None
 */
void
BuzzerControl_Init(void) {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
	BUZZTIM_InitTimer();
 8002ea8:	f000 f80a 	bl	8002ec0 <BUZZTIM_InitTimer>
	BUZZTIM_InitPWMChannel();
 8002eac:	f000 f826 	bl	8002efc <BUZZTIM_InitPWMChannel>
	bBuzzInit = 1;
 8002eb0:	4b02      	ldr	r3, [pc, #8]	; (8002ebc <BuzzerControl_Init+0x18>)
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	701a      	strb	r2, [r3, #0]
}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	2000014c 	.word	0x2000014c

08002ec0 <BUZZTIM_InitTimer>:
 * @param  [prescale]
 *         [period]
 * @retval None
 */
static void
BUZZTIM_InitTimer(void) {
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
    TIM_TimeBaseInitTypeDef TimeBaseStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	2001      	movs	r0, #1
 8002eca:	f7ff f80f 	bl	8001eec <RCC_APB1PeriphClockCmd>

	/* Time base configuration */
    TimeBaseStructure.TIM_Prescaler = BUZZ_TIMER_PRESCALE - 1;
 8002ece:	2323      	movs	r3, #35	; 0x23
 8002ed0:	80bb      	strh	r3, [r7, #4]
    TimeBaseStructure.TIM_Period = BUZZ_TIMER_PERIOD - 1;
 8002ed2:	23c7      	movs	r3, #199	; 0xc7
 8002ed4:	813b      	strh	r3, [r7, #8]
    TimeBaseStructure.TIM_ClockDivision = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	817b      	strh	r3, [r7, #10]
    TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8002eda:	2300      	movs	r3, #0
 8002edc:	80fb      	strh	r3, [r7, #6]
    TIM_TimeBaseInit(TIM2, &TimeBaseStructure);
 8002ede:	1d3b      	adds	r3, r7, #4
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ee6:	f7ff f83d 	bl	8001f64 <TIM_TimeBaseInit>

    /* TIM1 enable counter */
    TIM_Cmd(TIM2, ENABLE);
 8002eea:	2101      	movs	r1, #1
 8002eec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ef0:	f7ff fab6 	bl	8002460 <TIM_Cmd>
}
 8002ef4:	bf00      	nop
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <BUZZTIM_InitPWMChannel>:
 * @brief  None
 * @param  None
 * @retval None
 */
static void
BUZZTIM_InitPWMChannel(void) {
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef 	GPIO_InitStructure;
    TIM_OCInitTypeDef 	TIM_OCInitStructure;

    /* GPIO Peripheral clock enable */
    RCC_APB2PeriphClockCmd(BUZZER_GPIO_CLK, ENABLE);
 8002f02:	2101      	movs	r1, #1
 8002f04:	2008      	movs	r0, #8
 8002f06:	f7fe ffd3 	bl	8001eb0 <RCC_APB2PeriphClockCmd>

    /* Configure pin in output push-pull mode */
    GPIO_InitStructure.GPIO_Pin = BUZZER_GPIO_PIN;
 8002f0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f0e:	82bb      	strh	r3, [r7, #20]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002f10:	2303      	movs	r3, #3
 8002f12:	75bb      	strb	r3, [r7, #22]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8002f14:	2318      	movs	r3, #24
 8002f16:	75fb      	strb	r3, [r7, #23]
    GPIO_Init(BUZZER_GPIO_PORT, &GPIO_InitStructure);
 8002f18:	f107 0314 	add.w	r3, r7, #20
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4811      	ldr	r0, [pc, #68]	; (8002f64 <BUZZTIM_InitPWMChannel+0x68>)
 8002f20:	f7fe fd50 	bl	80019c4 <GPIO_Init>

    GPIO_PinRemapConfig(BUZZER_GPIO_REMAP, ENABLE);
 8002f24:	2101      	movs	r1, #1
 8002f26:	4810      	ldr	r0, [pc, #64]	; (8002f68 <BUZZTIM_InitPWMChannel+0x6c>)
 8002f28:	f7fe fe22 	bl	8001b70 <GPIO_PinRemapConfig>

    /* Output Compare Timing Mode configuration: Channel 4 */
    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1; /* PWM1 Mode */
 8002f2c:	2360      	movs	r3, #96	; 0x60
 8002f2e:	80bb      	strh	r3, [r7, #4]
    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8002f30:	2301      	movs	r3, #1
 8002f32:	80fb      	strh	r3, [r7, #6]
    TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8002f34:	2300      	movs	r3, #0
 8002f36:	81bb      	strh	r3, [r7, #12]
    TIM_OCInitStructure.TIM_Pulse = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	817b      	strh	r3, [r7, #10]

    TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 8002f3c:	1d3b      	adds	r3, r7, #4
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002f44:	f7ff fa24 	bl	8002390 <TIM_OC4Init>

    TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8002f48:	2108      	movs	r1, #8
 8002f4a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002f4e:	f7ff fb18 	bl	8002582 <TIM_OC4PreloadConfig>

    TIM_ARRPreloadConfig(TIM2, ENABLE);
 8002f52:	2101      	movs	r1, #1
 8002f54:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002f58:	f7ff faa1 	bl	800249e <TIM_ARRPreloadConfig>
}
 8002f5c:	bf00      	nop
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40010c00 	.word	0x40010c00
 8002f68:	00180300 	.word	0x00180300

08002f6c <LedControl_Init>:
 * @brief  Initializes module led
 * @param  None
 * @retval None
 */
void
LedControl_Init(void) {
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
	// Initialize pins GPIO led
	LEDGPIO_Config();
 8002f70:	f000 f802 	bl	8002f78 <LEDGPIO_Config>
}
 8002f74:	bf00      	nop
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <LEDGPIO_Config>:
  * @param  None
  * @retval None
  */
static
void LEDGPIO_Config(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* GPIOA Clocks enable */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8002f7e:	2101      	movs	r1, #1
 8002f80:	2004      	movs	r0, #4
 8002f82:	f7fe ff95 	bl	8001eb0 <RCC_APB2PeriphClockCmd>

	/* GPIOA Configuration as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = LED_RED_PIN | LED_GREEN_PIN | LED_BLUE_PIN;
 8002f86:	23e0      	movs	r3, #224	; 0xe0
 8002f88:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8002f8a:	2310      	movs	r3, #16
 8002f8c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(LED_PORT, &GPIO_InitStructure);
 8002f92:	1d3b      	adds	r3, r7, #4
 8002f94:	4619      	mov	r1, r3
 8002f96:	4803      	ldr	r0, [pc, #12]	; (8002fa4 <LEDGPIO_Config+0x2c>)
 8002f98:	f7fe fd14 	bl	80019c4 <GPIO_Init>
}
 8002f9c:	bf00      	nop
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40010800 	.word	0x40010800

08002fa8 <Encoder_Init>:
 * @param  None
 * @retval None
 */
void
Encoder_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
	EncoderGPIO_Config();
 8002fac:	f000 f804 	bl	8002fb8 <EncoderGPIO_Config>
	ScanTimer();
 8002fb0:	f000 f9b4 	bl	800331c <ScanTimer>
}
 8002fb4:	bf00      	nop
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <EncoderGPIO_Config>:
 * @param  None
 * @retval None
 */
static
void EncoderGPIO_Config(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef 			GPIO_InitStructure;
	EXTI_InitTypeDef			EXTI_InitStructure;
	NVIC_InitTypeDef			NVIC_InitStructure;

	/* Enable clock GPIOA and GPIOB */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB, ENABLE);
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	200c      	movs	r0, #12
 8002fc2:	f7fe ff75 	bl	8001eb0 <RCC_APB2PeriphClockCmd>

	/* Initializes GPIO Use Input */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8002fc6:	2304      	movs	r3, #4
 8002fc8:	73fb      	strb	r3, [r7, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	73bb      	strb	r3, [r7, #14]

	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_15;
 8002fce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fd2:	81bb      	strh	r3, [r7, #12]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002fd4:	f107 030c 	add.w	r3, r7, #12
 8002fd8:	4619      	mov	r1, r3
 8002fda:	481d      	ldr	r0, [pc, #116]	; (8003050 <EncoderGPIO_Config+0x98>)
 8002fdc:	f7fe fcf2 	bl	80019c4 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5;
 8002fe0:	2338      	movs	r3, #56	; 0x38
 8002fe2:	81bb      	strh	r3, [r7, #12]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002fe4:	f107 030c 	add.w	r3, r7, #12
 8002fe8:	4619      	mov	r1, r3
 8002fea:	481a      	ldr	r0, [pc, #104]	; (8003054 <EncoderGPIO_Config+0x9c>)
 8002fec:	f7fe fcea 	bl	80019c4 <GPIO_Init>

	/* Enable AFIO clock */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	2001      	movs	r0, #1
 8002ff4:	f7fe ff5c 	bl	8001eb0 <RCC_APB2PeriphClockCmd>

	/* Connect EXTI Line to Encoder pin */
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource15);
 8002ff8:	210f      	movs	r1, #15
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	f7fe fe28 	bl	8001c50 <GPIO_EXTILineConfig>
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource3);
 8003000:	2103      	movs	r1, #3
 8003002:	2001      	movs	r0, #1
 8003004:	f7fe fe24 	bl	8001c50 <GPIO_EXTILineConfig>
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource4);
 8003008:	2104      	movs	r1, #4
 800300a:	2001      	movs	r0, #1
 800300c:	f7fe fe20 	bl	8001c50 <GPIO_EXTILineConfig>
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource5);
 8003010:	2105      	movs	r1, #5
 8003012:	2001      	movs	r0, #1
 8003014:	f7fe fe1c 	bl	8001c50 <GPIO_EXTILineConfig>

	/* Configure EXTI Line */
	EXTI_InitStructure.EXTI_Line =  EXTI_Line3 | EXTI_Line5;
 8003018:	2328      	movs	r3, #40	; 0x28
 800301a:	607b      	str	r3, [r7, #4]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 800301c:	2300      	movs	r3, #0
 800301e:	723b      	strb	r3, [r7, #8]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8003020:	2310      	movs	r3, #16
 8003022:	727b      	strb	r3, [r7, #9]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8003024:	2301      	movs	r3, #1
 8003026:	72bb      	strb	r3, [r7, #10]
	EXTI_Init(&EXTI_InitStructure);
 8003028:	1d3b      	adds	r3, r7, #4
 800302a:	4618      	mov	r0, r3
 800302c:	f7fe fc30 	bl	8001890 <EXTI_Init>

	/* Configure NVIC for Encoder Interface Update Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = EXTI3_IRQn | EXTI9_5_IRQn;
 8003030:	231f      	movs	r3, #31
 8003032:	703b      	strb	r3, [r7, #0]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8003034:	230f      	movs	r3, #15
 8003036:	707b      	strb	r3, [r7, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8003038:	230f      	movs	r3, #15
 800303a:	70bb      	strb	r3, [r7, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800303c:	2301      	movs	r3, #1
 800303e:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&NVIC_InitStructure);
 8003040:	463b      	mov	r3, r7
 8003042:	4618      	mov	r0, r3
 8003044:	f7fe f89e 	bl	8001184 <NVIC_Init>
}
 8003048:	bf00      	nop
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40010800 	.word	0x40010800
 8003054:	40010c00 	.word	0x40010c00

08003058 <binaryToDecimal>:
 * @brief  Convert Binary To Decimal
 * @param  Binary Number
 * @retval Decimal Number
 */
int16_t binaryToDecimal(int16_t binaryNumber)
{
 8003058:	b5b0      	push	{r4, r5, r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	80fb      	strh	r3, [r7, #6]
    int16_t decimalNumber = 0, i = 0, remainder;
 8003062:	2300      	movs	r3, #0
 8003064:	81fb      	strh	r3, [r7, #14]
 8003066:	2300      	movs	r3, #0
 8003068:	81bb      	strh	r3, [r7, #12]

    while (binaryNumber != 0) {
 800306a:	e04b      	b.n	8003104 <binaryToDecimal+0xac>
        remainder = binaryNumber % 10;
 800306c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003070:	4b29      	ldr	r3, [pc, #164]	; (8003118 <binaryToDecimal+0xc0>)
 8003072:	fb83 1302 	smull	r1, r3, r3, r2
 8003076:	1099      	asrs	r1, r3, #2
 8003078:	17d3      	asrs	r3, r2, #31
 800307a:	1ac9      	subs	r1, r1, r3
 800307c:	460b      	mov	r3, r1
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	817b      	strh	r3, [r7, #10]
        binaryNumber /= 10;
 8003088:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800308c:	4a22      	ldr	r2, [pc, #136]	; (8003118 <binaryToDecimal+0xc0>)
 800308e:	fb82 1203 	smull	r1, r2, r2, r3
 8003092:	1092      	asrs	r2, r2, #2
 8003094:	17db      	asrs	r3, r3, #31
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	80fb      	strh	r3, [r7, #6]
        decimalNumber += remainder * pow(2, i);
 800309a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fd fa6c 	bl	800057c <__aeabi_i2d>
 80030a4:	4604      	mov	r4, r0
 80030a6:	460d      	mov	r5, r1
 80030a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fd fa65 	bl	800057c <__aeabi_i2d>
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	f04f 0000 	mov.w	r0, #0
 80030ba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80030be:	f001 f9a7 	bl	8004410 <pow>
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	4620      	mov	r0, r4
 80030c8:	4629      	mov	r1, r5
 80030ca:	f7fd fac1 	bl	8000650 <__aeabi_dmul>
 80030ce:	4602      	mov	r2, r0
 80030d0:	460b      	mov	r3, r1
 80030d2:	4614      	mov	r4, r2
 80030d4:	461d      	mov	r5, r3
 80030d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fd fa4e 	bl	800057c <__aeabi_i2d>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4620      	mov	r0, r4
 80030e6:	4629      	mov	r1, r5
 80030e8:	f7fd f8fc 	bl	80002e4 <__adddf3>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4610      	mov	r0, r2
 80030f2:	4619      	mov	r1, r3
 80030f4:	f7fd fd5c 	bl	8000bb0 <__aeabi_d2iz>
 80030f8:	4603      	mov	r3, r0
 80030fa:	81fb      	strh	r3, [r7, #14]
        ++i;
 80030fc:	89bb      	ldrh	r3, [r7, #12]
 80030fe:	3301      	adds	r3, #1
 8003100:	b29b      	uxth	r3, r3
 8003102:	81bb      	strh	r3, [r7, #12]
    while (binaryNumber != 0) {
 8003104:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1af      	bne.n	800306c <binaryToDecimal+0x14>
    }

    return decimalNumber;
 800310c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bdb0      	pop	{r4, r5, r7, pc}
 8003118:	66666667 	.word	0x66666667

0800311c <EXTI3_IRQHandler>:
 * @brief  Handler interrupt of encoder M1 for count pulse
 * @param  None
 * @retval None
 */
void EXTI3_IRQHandler(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
	/* Count Pulse Encoder M1 */
	char EncoderM1_pinA = GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_3);
 8003122:	2108      	movs	r1, #8
 8003124:	481d      	ldr	r0, [pc, #116]	; (800319c <EXTI3_IRQHandler+0x80>)
 8003126:	f7fe fd09 	bl	8001b3c <GPIO_ReadInputDataBit>
 800312a:	4603      	mov	r3, r0
 800312c:	71fb      	strb	r3, [r7, #7]
	char EncoderM1_pinB = GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_15);
 800312e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003132:	481b      	ldr	r0, [pc, #108]	; (80031a0 <EXTI3_IRQHandler+0x84>)
 8003134:	f7fe fd02 	bl	8001b3c <GPIO_ReadInputDataBit>
 8003138:	4603      	mov	r3, r0
 800313a:	71bb      	strb	r3, [r7, #6]

	/* Handler EXTI_Line3 to PB3 */
	if(EXTI_GetFlagStatus(EXTI_Line3) == SET) {
 800313c:	2008      	movs	r0, #8
 800313e:	f7fe fc19 	bl	8001974 <EXTI_GetFlagStatus>
 8003142:	4603      	mov	r3, r0
 8003144:	2b01      	cmp	r3, #1
 8003146:	d125      	bne.n	8003194 <EXTI3_IRQHandler+0x78>
		/* Pulse Noise Filtering */
		EncoderM1_Val   = EncoderM1_Val << 2;
 8003148:	4b16      	ldr	r3, [pc, #88]	; (80031a4 <EXTI3_IRQHandler+0x88>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	b2da      	uxtb	r2, r3
 8003150:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <EXTI3_IRQHandler+0x88>)
 8003152:	701a      	strb	r2, [r3, #0]
		EncoderM1_Val   = (( EncoderM1_pinA | EncoderM1_pinB) | EncoderM1_Val ) & 0x0f;
 8003154:	79fa      	ldrb	r2, [r7, #7]
 8003156:	79bb      	ldrb	r3, [r7, #6]
 8003158:	4313      	orrs	r3, r2
 800315a:	b2da      	uxtb	r2, r3
 800315c:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <EXTI3_IRQHandler+0x88>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	4313      	orrs	r3, r2
 8003162:	b2db      	uxtb	r3, r3
 8003164:	f003 030f 	and.w	r3, r3, #15
 8003168:	b2da      	uxtb	r2, r3
 800316a:	4b0e      	ldr	r3, [pc, #56]	; (80031a4 <EXTI3_IRQHandler+0x88>)
 800316c:	701a      	strb	r2, [r3, #0]
		encoderM1_temp += State[binaryToDecimal(EncoderM1_Val)];
 800316e:	4b0d      	ldr	r3, [pc, #52]	; (80031a4 <EXTI3_IRQHandler+0x88>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	b21b      	sxth	r3, r3
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff ff6f 	bl	8003058 <binaryToDecimal>
 800317a:	4603      	mov	r3, r0
 800317c:	461a      	mov	r2, r3
 800317e:	4b0a      	ldr	r3, [pc, #40]	; (80031a8 <EXTI3_IRQHandler+0x8c>)
 8003180:	5c9b      	ldrb	r3, [r3, r2]
 8003182:	461a      	mov	r2, r3
 8003184:	4b09      	ldr	r3, [pc, #36]	; (80031ac <EXTI3_IRQHandler+0x90>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4413      	add	r3, r2
 800318a:	4a08      	ldr	r2, [pc, #32]	; (80031ac <EXTI3_IRQHandler+0x90>)
 800318c:	6013      	str	r3, [r2, #0]

		EXTI_ClearITPendingBit(EXTI_Line3);
 800318e:	2008      	movs	r0, #8
 8003190:	f7fe fc0a 	bl	80019a8 <EXTI_ClearITPendingBit>
	}
}
 8003194:	bf00      	nop
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40010c00 	.word	0x40010c00
 80031a0:	40010800 	.word	0x40010800
 80031a4:	2000014d 	.word	0x2000014d
 80031a8:	20000048 	.word	0x20000048
 80031ac:	20000150 	.word	0x20000150

080031b0 <EXTI9_5_IRQHandler>:
 * @brief  Handler interrupt of encoder M2 for count pulse
 * @param  None
 * @retval None
 */
void EXTI9_5_IRQHandler(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
	/* Count Pulse Encoder M2 */
	char EncoderM2_pinA = GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_5);
 80031b6:	2120      	movs	r1, #32
 80031b8:	481d      	ldr	r0, [pc, #116]	; (8003230 <EXTI9_5_IRQHandler+0x80>)
 80031ba:	f7fe fcbf 	bl	8001b3c <GPIO_ReadInputDataBit>
 80031be:	4603      	mov	r3, r0
 80031c0:	71fb      	strb	r3, [r7, #7]
	char EncoderM2_pinB = GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_4);
 80031c2:	2110      	movs	r1, #16
 80031c4:	481a      	ldr	r0, [pc, #104]	; (8003230 <EXTI9_5_IRQHandler+0x80>)
 80031c6:	f7fe fcb9 	bl	8001b3c <GPIO_ReadInputDataBit>
 80031ca:	4603      	mov	r3, r0
 80031cc:	71bb      	strb	r3, [r7, #6]

	/* Handler EXTI_Line5 to PB5 */
	if(EXTI_GetFlagStatus(EXTI_Line5) == SET) {
 80031ce:	2020      	movs	r0, #32
 80031d0:	f7fe fbd0 	bl	8001974 <EXTI_GetFlagStatus>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d125      	bne.n	8003226 <EXTI9_5_IRQHandler+0x76>
		/* Pulse Noise Filtering */
		EncoderM2_Val   = EncoderM2_Val << 2;
 80031da:	4b16      	ldr	r3, [pc, #88]	; (8003234 <EXTI9_5_IRQHandler+0x84>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	4b14      	ldr	r3, [pc, #80]	; (8003234 <EXTI9_5_IRQHandler+0x84>)
 80031e4:	701a      	strb	r2, [r3, #0]
		EncoderM2_Val   = (( EncoderM2_pinA | EncoderM2_pinB) | EncoderM2_Val ) & 0x0f;
 80031e6:	79fa      	ldrb	r2, [r7, #7]
 80031e8:	79bb      	ldrb	r3, [r7, #6]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	4b11      	ldr	r3, [pc, #68]	; (8003234 <EXTI9_5_IRQHandler+0x84>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	4b0d      	ldr	r3, [pc, #52]	; (8003234 <EXTI9_5_IRQHandler+0x84>)
 80031fe:	701a      	strb	r2, [r3, #0]
		encoderM2_temp += State[binaryToDecimal(EncoderM2_Val)];
 8003200:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <EXTI9_5_IRQHandler+0x84>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	b21b      	sxth	r3, r3
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff ff26 	bl	8003058 <binaryToDecimal>
 800320c:	4603      	mov	r3, r0
 800320e:	461a      	mov	r2, r3
 8003210:	4b09      	ldr	r3, [pc, #36]	; (8003238 <EXTI9_5_IRQHandler+0x88>)
 8003212:	5c9b      	ldrb	r3, [r3, r2]
 8003214:	461a      	mov	r2, r3
 8003216:	4b09      	ldr	r3, [pc, #36]	; (800323c <EXTI9_5_IRQHandler+0x8c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4413      	add	r3, r2
 800321c:	4a07      	ldr	r2, [pc, #28]	; (800323c <EXTI9_5_IRQHandler+0x8c>)
 800321e:	6013      	str	r3, [r2, #0]

		EXTI_ClearITPendingBit(EXTI_Line5);
 8003220:	2020      	movs	r0, #32
 8003222:	f7fe fbc1 	bl	80019a8 <EXTI_ClearITPendingBit>
	}
}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40010c00 	.word	0x40010c00
 8003234:	2000014e 	.word	0x2000014e
 8003238:	20000048 	.word	0x20000048
 800323c:	20000154 	.word	0x20000154

08003240 <CalculateSpeed>:
 * @param  None
 * @retval None
 */
static
void CalculateSpeed(void *arg)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
	/* Calculate speed encoder in 1ms */
	if (stateEncoder == false) {
 8003248:	4b2b      	ldr	r3, [pc, #172]	; (80032f8 <CalculateSpeed+0xb8>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	f083 0301 	eor.w	r3, r3, #1
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d04b      	beq.n	80032ee <CalculateSpeed+0xae>
		SpeedM1_1ms += (uint32_t)((encoderM1_temp * 1000 * 60) / ENCODER_PULSE_ROUND);	// rpm
 8003256:	4b29      	ldr	r3, [pc, #164]	; (80032fc <CalculateSpeed+0xbc>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800325e:	fb02 f303 	mul.w	r3, r2, r3
 8003262:	085b      	lsrs	r3, r3, #1
 8003264:	4a26      	ldr	r2, [pc, #152]	; (8003300 <CalculateSpeed+0xc0>)
 8003266:	fba2 2303 	umull	r2, r3, r2, r3
 800326a:	099a      	lsrs	r2, r3, #6
 800326c:	4b25      	ldr	r3, [pc, #148]	; (8003304 <CalculateSpeed+0xc4>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4413      	add	r3, r2
 8003272:	4a24      	ldr	r2, [pc, #144]	; (8003304 <CalculateSpeed+0xc4>)
 8003274:	6013      	str	r3, [r2, #0]
		SpeedM2_1ms += (uint32_t)((encoderM2_temp * 1000 * 60) / ENCODER_PULSE_ROUND);	// rpm
 8003276:	4b24      	ldr	r3, [pc, #144]	; (8003308 <CalculateSpeed+0xc8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800327e:	fb02 f303 	mul.w	r3, r2, r3
 8003282:	085b      	lsrs	r3, r3, #1
 8003284:	4a1e      	ldr	r2, [pc, #120]	; (8003300 <CalculateSpeed+0xc0>)
 8003286:	fba2 2303 	umull	r2, r3, r2, r3
 800328a:	099a      	lsrs	r2, r3, #6
 800328c:	4b1f      	ldr	r3, [pc, #124]	; (800330c <CalculateSpeed+0xcc>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4413      	add	r3, r2
 8003292:	4a1e      	ldr	r2, [pc, #120]	; (800330c <CalculateSpeed+0xcc>)
 8003294:	6013      	str	r3, [r2, #0]
		count++;
 8003296:	4b1e      	ldr	r3, [pc, #120]	; (8003310 <CalculateSpeed+0xd0>)
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	3301      	adds	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	4b1c      	ldr	r3, [pc, #112]	; (8003310 <CalculateSpeed+0xd0>)
 80032a0:	801a      	strh	r2, [r3, #0]

		/* Calculate speed encoder in 5ms */
		if(count >= 5) {
 80032a2:	4b1b      	ldr	r3, [pc, #108]	; (8003310 <CalculateSpeed+0xd0>)
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d921      	bls.n	80032ee <CalculateSpeed+0xae>
			stateEncoder = true;
 80032aa:	4b13      	ldr	r3, [pc, #76]	; (80032f8 <CalculateSpeed+0xb8>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	701a      	strb	r2, [r3, #0]
			encoderM1_speed = (uint32_t)(SpeedM1_1ms / count);	// rpm
 80032b0:	4b14      	ldr	r3, [pc, #80]	; (8003304 <CalculateSpeed+0xc4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a16      	ldr	r2, [pc, #88]	; (8003310 <CalculateSpeed+0xd0>)
 80032b6:	8812      	ldrh	r2, [r2, #0]
 80032b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80032bc:	4a15      	ldr	r2, [pc, #84]	; (8003314 <CalculateSpeed+0xd4>)
 80032be:	6013      	str	r3, [r2, #0]
			encoderM2_speed = (uint32_t)(SpeedM2_1ms / count);	// rpm
 80032c0:	4b12      	ldr	r3, [pc, #72]	; (800330c <CalculateSpeed+0xcc>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a12      	ldr	r2, [pc, #72]	; (8003310 <CalculateSpeed+0xd0>)
 80032c6:	8812      	ldrh	r2, [r2, #0]
 80032c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80032cc:	4a12      	ldr	r2, [pc, #72]	; (8003318 <CalculateSpeed+0xd8>)
 80032ce:	6013      	str	r3, [r2, #0]

			/* Reset Count Pulse, Speed, Count */
			encoderM1_temp = 0;
 80032d0:	4b0a      	ldr	r3, [pc, #40]	; (80032fc <CalculateSpeed+0xbc>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
			encoderM2_temp = 0;
 80032d6:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <CalculateSpeed+0xc8>)
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
			SpeedM1_1ms = 0;
 80032dc:	4b09      	ldr	r3, [pc, #36]	; (8003304 <CalculateSpeed+0xc4>)
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]
			SpeedM2_1ms = 0;
 80032e2:	4b0a      	ldr	r3, [pc, #40]	; (800330c <CalculateSpeed+0xcc>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
			count = 0;
 80032e8:	4b09      	ldr	r3, [pc, #36]	; (8003310 <CalculateSpeed+0xd0>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr
 80032f8:	2000016c 	.word	0x2000016c
 80032fc:	20000150 	.word	0x20000150
 8003300:	9c09c09d 	.word	0x9c09c09d
 8003304:	20000158 	.word	0x20000158
 8003308:	20000154 	.word	0x20000154
 800330c:	2000015c 	.word	0x2000015c
 8003310:	20000160 	.word	0x20000160
 8003314:	20000164 	.word	0x20000164
 8003318:	20000168 	.word	0x20000168

0800331c <ScanTimer>:
 * @param  None
 * @retval None
 */
static
void ScanTimer(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af02      	add	r7, sp, #8
	if(idTimerScanSpeed != NO_TIMER) {
 8003322:	4b0d      	ldr	r3, [pc, #52]	; (8003358 <ScanTimer+0x3c>)
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	2bff      	cmp	r3, #255	; 0xff
 8003328:	d007      	beq.n	800333a <ScanTimer+0x1e>
		TimerStop(idTimerScanSpeed);
 800332a:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <ScanTimer+0x3c>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f000 fbb8 	bl	8003aa4 <TimerStop>
		idTimerScanSpeed = NO_TIMER;
 8003334:	4b08      	ldr	r3, [pc, #32]	; (8003358 <ScanTimer+0x3c>)
 8003336:	22ff      	movs	r2, #255	; 0xff
 8003338:	701a      	strb	r2, [r3, #0]
	}

	idTimerScanSpeed = TimerStart("CalculateSpeed", 	\
 800333a:	2300      	movs	r3, #0
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	4b07      	ldr	r3, [pc, #28]	; (800335c <ScanTimer+0x40>)
 8003340:	22ff      	movs	r2, #255	; 0xff
 8003342:	2101      	movs	r1, #1
 8003344:	4806      	ldr	r0, [pc, #24]	; (8003360 <ScanTimer+0x44>)
 8003346:	f000 fb4b 	bl	80039e0 <TimerStart>
 800334a:	4603      	mov	r3, r0
 800334c:	461a      	mov	r2, r3
 800334e:	4b02      	ldr	r3, [pc, #8]	; (8003358 <ScanTimer+0x3c>)
 8003350:	701a      	strb	r2, [r3, #0]
								  SAMPLE_TIME, 			\
								  TIMER_REPEAT_FOREVER, \
							 	  CalculateSpeed,       \
								  NULL);
}
 8003352:	bf00      	nop
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	20000058 	.word	0x20000058
 800335c:	08003241 	.word	0x08003241
 8003360:	08005244 	.word	0x08005244

08003364 <MotorControl_Init>:
 * @param  None
 * @retval None
 */
void
MotorControl_Init(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
	// Initialize pins GPIO motor
	MOTOR_GPIO_Config();
 8003368:	f000 f802 	bl	8003370 <MOTOR_GPIO_Config>
}
 800336c:	bf00      	nop
 800336e:	bd80      	pop	{r7, pc}

08003370 <MOTOR_GPIO_Config>:
 * @brief  Configure GPIO for motor
 * @param  None
 * @retval None
 */
static
void MOTOR_GPIO_Config(void) {
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef 			GPIO_InitStructure;
	TIM_TimeBaseInitTypeDef 	TIM_TimeBaseInitStructure;
	TIM_OCInitTypeDef			TIM_OCInitStructure;

	/* Enable clock GPIOB */
	RCC_APB2PeriphClockCmd(MOTOR_RCC_GPIO, ENABLE);
 8003376:	2101      	movs	r1, #1
 8003378:	2008      	movs	r0, #8
 800337a:	f7fe fd99 	bl	8001eb0 <RCC_APB2PeriphClockCmd>

	/* Initializes GPIO Use Output Compare */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800337e:	2318      	movs	r3, #24
 8003380:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003382:	2303      	movs	r3, #3
 8003384:	77bb      	strb	r3, [r7, #30]

	/* GPIOB Configuration as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = MOTOR_R1_GPIO_PIN | MOTOR_R2_GPIO_PIN |
 8003386:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800338a:	83bb      	strh	r3, [r7, #28]
								  MOTOR_L1_GPIO_PIN | MOTOR_L2_GPIO_PIN;
	GPIO_Init(MOTOR_GPIO_PORT, &GPIO_InitStructure);
 800338c:	f107 031c 	add.w	r3, r7, #28
 8003390:	4619      	mov	r1, r3
 8003392:	4829      	ldr	r0, [pc, #164]	; (8003438 <MOTOR_GPIO_Config+0xc8>)
 8003394:	f7fe fb16 	bl	80019c4 <GPIO_Init>

	GPIO_PinRemapConfig(MOTOR_GPIO_REMAP, ENABLE);
 8003398:	2101      	movs	r1, #1
 800339a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800339e:	f7fe fbe7 	bl	8001b70 <GPIO_PinRemapConfig>

	/* Enable TIM16, TIM17 clock */
	RCC_APB1PeriphClockCmd(MOTOR_RCC_TIM, ENABLE);
 80033a2:	2101      	movs	r1, #1
 80033a4:	2004      	movs	r0, #4
 80033a6:	f7fe fda1 	bl	8001eec <RCC_APB1PeriphClockCmd>

	/* Initializes Use Timer Base */
	TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80033aa:	2300      	movs	r3, #0
 80033ac:	827b      	strh	r3, [r7, #18]
	TIM_TimeBaseInitStructure.TIM_Prescaler = MOTOR_TIM_PRESCALE - 1;
 80033ae:	2323      	movs	r3, #35	; 0x23
 80033b0:	823b      	strh	r3, [r7, #16]
	TIM_TimeBaseInitStructure.TIM_Period = MOTOR_TIM_PERIOD - 1;
 80033b2:	f240 33e7 	movw	r3, #999	; 0x3e7
 80033b6:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseInitStructure.TIM_ClockDivision = 0;
 80033b8:	2300      	movs	r3, #0
 80033ba:	82fb      	strh	r3, [r7, #22]

	TIM_TimeBaseInit(MOTORx_TIM, &TIM_TimeBaseInitStructure);
 80033bc:	f107 0310 	add.w	r3, r7, #16
 80033c0:	4619      	mov	r1, r3
 80033c2:	481e      	ldr	r0, [pc, #120]	; (800343c <MOTOR_GPIO_Config+0xcc>)
 80033c4:	f7fe fdce 	bl	8001f64 <TIM_TimeBaseInit>

	//Timer OC Configure
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80033c8:	2360      	movs	r3, #96	; 0x60
 80033ca:	803b      	strh	r3, [r7, #0]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80033cc:	2301      	movs	r3, #1
 80033ce:	807b      	strh	r3, [r7, #2]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 80033d0:	2300      	movs	r3, #0
 80033d2:	813b      	strh	r3, [r7, #8]
	TIM_OCInitStructure.TIM_Pulse = 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	80fb      	strh	r3, [r7, #6]

	TIM_OC1Init(MOTORx_TIM, &TIM_OCInitStructure);
 80033d8:	463b      	mov	r3, r7
 80033da:	4619      	mov	r1, r3
 80033dc:	4817      	ldr	r0, [pc, #92]	; (800343c <MOTOR_GPIO_Config+0xcc>)
 80033de:	f7fe fe3d 	bl	800205c <TIM_OC1Init>
	TIM_OC2Init(MOTORx_TIM, &TIM_OCInitStructure);
 80033e2:	463b      	mov	r3, r7
 80033e4:	4619      	mov	r1, r3
 80033e6:	4815      	ldr	r0, [pc, #84]	; (800343c <MOTOR_GPIO_Config+0xcc>)
 80033e8:	f7fe fec4 	bl	8002174 <TIM_OC2Init>
	TIM_OC3Init(MOTORx_TIM, &TIM_OCInitStructure);
 80033ec:	463b      	mov	r3, r7
 80033ee:	4619      	mov	r1, r3
 80033f0:	4812      	ldr	r0, [pc, #72]	; (800343c <MOTOR_GPIO_Config+0xcc>)
 80033f2:	f7fe ff47 	bl	8002284 <TIM_OC3Init>
	TIM_OC4Init(MOTORx_TIM, &TIM_OCInitStructure);
 80033f6:	463b      	mov	r3, r7
 80033f8:	4619      	mov	r1, r3
 80033fa:	4810      	ldr	r0, [pc, #64]	; (800343c <MOTOR_GPIO_Config+0xcc>)
 80033fc:	f7fe ffc8 	bl	8002390 <TIM_OC4Init>

	TIM_Cmd(MOTORx_TIM, ENABLE);
 8003400:	2101      	movs	r1, #1
 8003402:	480e      	ldr	r0, [pc, #56]	; (800343c <MOTOR_GPIO_Config+0xcc>)
 8003404:	f7ff f82c 	bl	8002460 <TIM_Cmd>

	TIM_OC1PreloadConfig(MOTORx_TIM, TIM_OCPreload_Enable);
 8003408:	2108      	movs	r1, #8
 800340a:	480c      	ldr	r0, [pc, #48]	; (800343c <MOTOR_GPIO_Config+0xcc>)
 800340c:	f7ff f866 	bl	80024dc <TIM_OC1PreloadConfig>
	TIM_OC2PreloadConfig(MOTORx_TIM, TIM_OCPreload_Enable);
 8003410:	2108      	movs	r1, #8
 8003412:	480a      	ldr	r0, [pc, #40]	; (800343c <MOTOR_GPIO_Config+0xcc>)
 8003414:	f7ff f87d 	bl	8002512 <TIM_OC2PreloadConfig>
	TIM_OC3PreloadConfig(MOTORx_TIM, TIM_OCPreload_Enable);
 8003418:	2108      	movs	r1, #8
 800341a:	4808      	ldr	r0, [pc, #32]	; (800343c <MOTOR_GPIO_Config+0xcc>)
 800341c:	f7ff f896 	bl	800254c <TIM_OC3PreloadConfig>
	TIM_OC4PreloadConfig(MOTORx_TIM, TIM_OCPreload_Enable);
 8003420:	2108      	movs	r1, #8
 8003422:	4806      	ldr	r0, [pc, #24]	; (800343c <MOTOR_GPIO_Config+0xcc>)
 8003424:	f7ff f8ad 	bl	8002582 <TIM_OC4PreloadConfig>

	TIM_ARRPreloadConfig(MOTORx_TIM, ENABLE);
 8003428:	2101      	movs	r1, #1
 800342a:	4804      	ldr	r0, [pc, #16]	; (800343c <MOTOR_GPIO_Config+0xcc>)
 800342c:	f7ff f837 	bl	800249e <TIM_ARRPreloadConfig>
}
 8003430:	bf00      	nop
 8003432:	3720      	adds	r7, #32
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40010c00 	.word	0x40010c00
 800343c:	40000800 	.word	0x40000800

08003440 <MotorControl_ForwardRotating>:
 * @param  id:
 *         dutycycle:
 * @retval None
 */
void MotorControl_ForwardRotating(motor_id_e id, uint32_t dutycycle)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	6039      	str	r1, [r7, #0]
 800344a:	71fb      	strb	r3, [r7, #7]
	uint32_t compare;

	switch (id) {
 800344c:	79fb      	ldrb	r3, [r7, #7]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <MotorControl_ForwardRotating+0x18>
 8003452:	2b01      	cmp	r3, #1
 8003454:	d01d      	beq.n	8003492 <MotorControl_ForwardRotating+0x52>
			TIM_SetCompare1(MOTORx_TIM, 0);
			TIM_SetCompare2(MOTORx_TIM, compare);
			break;

		default:
			break;
 8003456:	e039      	b.n	80034cc <MotorControl_ForwardRotating+0x8c>
			compare = (dutycycle * MOTOR_TIM_PERIOD) / 100;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800345e:	fb02 f303 	mul.w	r3, r2, r3
 8003462:	4a1c      	ldr	r2, [pc, #112]	; (80034d4 <MotorControl_ForwardRotating+0x94>)
 8003464:	fba2 2303 	umull	r2, r3, r2, r3
 8003468:	095b      	lsrs	r3, r3, #5
 800346a:	60fb      	str	r3, [r7, #12]
			TIM_SetCounter(MOTORx_TIM, 0);
 800346c:	2100      	movs	r1, #0
 800346e:	481a      	ldr	r0, [pc, #104]	; (80034d8 <MotorControl_ForwardRotating+0x98>)
 8003470:	f7ff f8a4 	bl	80025bc <TIM_SetCounter>
			TIM_SetCounter(MOTORx_TIM, 0);
 8003474:	2100      	movs	r1, #0
 8003476:	4818      	ldr	r0, [pc, #96]	; (80034d8 <MotorControl_ForwardRotating+0x98>)
 8003478:	f7ff f8a0 	bl	80025bc <TIM_SetCounter>
			TIM_SetCompare3(MOTORx_TIM, 0);
 800347c:	2100      	movs	r1, #0
 800347e:	4816      	ldr	r0, [pc, #88]	; (80034d8 <MotorControl_ForwardRotating+0x98>)
 8003480:	f7ff f8c6 	bl	8002610 <TIM_SetCompare3>
			TIM_SetCompare4(MOTORx_TIM, compare);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	b29b      	uxth	r3, r3
 8003488:	4619      	mov	r1, r3
 800348a:	4813      	ldr	r0, [pc, #76]	; (80034d8 <MotorControl_ForwardRotating+0x98>)
 800348c:	f7ff f8ce 	bl	800262c <TIM_SetCompare4>
			break;
 8003490:	e01c      	b.n	80034cc <MotorControl_ForwardRotating+0x8c>
			compare = (dutycycle * MOTOR_TIM_PERIOD) / 100;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003498:	fb02 f303 	mul.w	r3, r2, r3
 800349c:	4a0d      	ldr	r2, [pc, #52]	; (80034d4 <MotorControl_ForwardRotating+0x94>)
 800349e:	fba2 2303 	umull	r2, r3, r2, r3
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	60fb      	str	r3, [r7, #12]
			TIM_SetCounter(MOTORx_TIM, 0);
 80034a6:	2100      	movs	r1, #0
 80034a8:	480b      	ldr	r0, [pc, #44]	; (80034d8 <MotorControl_ForwardRotating+0x98>)
 80034aa:	f7ff f887 	bl	80025bc <TIM_SetCounter>
			TIM_SetCounter(MOTORx_TIM, 0);
 80034ae:	2100      	movs	r1, #0
 80034b0:	4809      	ldr	r0, [pc, #36]	; (80034d8 <MotorControl_ForwardRotating+0x98>)
 80034b2:	f7ff f883 	bl	80025bc <TIM_SetCounter>
			TIM_SetCompare1(MOTORx_TIM, 0);
 80034b6:	2100      	movs	r1, #0
 80034b8:	4807      	ldr	r0, [pc, #28]	; (80034d8 <MotorControl_ForwardRotating+0x98>)
 80034ba:	f7ff f88d 	bl	80025d8 <TIM_SetCompare1>
			TIM_SetCompare2(MOTORx_TIM, compare);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	4619      	mov	r1, r3
 80034c4:	4804      	ldr	r0, [pc, #16]	; (80034d8 <MotorControl_ForwardRotating+0x98>)
 80034c6:	f7ff f895 	bl	80025f4 <TIM_SetCompare2>
			break;
 80034ca:	bf00      	nop
	}
}
 80034cc:	bf00      	nop
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	51eb851f 	.word	0x51eb851f
 80034d8:	40000800 	.word	0x40000800

080034dc <MotorControl_ReverseRotating>:
 * @param  id:
 *         dutycycle:
 * @retval None
 */
void MotorControl_ReverseRotating(motor_id_e id, uint32_t dutycycle)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	4603      	mov	r3, r0
 80034e4:	6039      	str	r1, [r7, #0]
 80034e6:	71fb      	strb	r3, [r7, #7]
	uint32_t compare;

	switch (id) {
 80034e8:	79fb      	ldrb	r3, [r7, #7]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <MotorControl_ReverseRotating+0x18>
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d01d      	beq.n	800352e <MotorControl_ReverseRotating+0x52>
			TIM_SetCompare1(MOTORx_TIM, compare);
			TIM_SetCompare2(MOTORx_TIM, 0);
			break;

		default:
			break;
 80034f2:	e039      	b.n	8003568 <MotorControl_ReverseRotating+0x8c>
			compare = (dutycycle * MOTOR_TIM_PERIOD) / 100;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034fa:	fb02 f303 	mul.w	r3, r2, r3
 80034fe:	4a1c      	ldr	r2, [pc, #112]	; (8003570 <MotorControl_ReverseRotating+0x94>)
 8003500:	fba2 2303 	umull	r2, r3, r2, r3
 8003504:	095b      	lsrs	r3, r3, #5
 8003506:	60fb      	str	r3, [r7, #12]
			TIM_SetCounter(MOTORx_TIM, 0);
 8003508:	2100      	movs	r1, #0
 800350a:	481a      	ldr	r0, [pc, #104]	; (8003574 <MotorControl_ReverseRotating+0x98>)
 800350c:	f7ff f856 	bl	80025bc <TIM_SetCounter>
			TIM_SetCounter(MOTORx_TIM, 0);
 8003510:	2100      	movs	r1, #0
 8003512:	4818      	ldr	r0, [pc, #96]	; (8003574 <MotorControl_ReverseRotating+0x98>)
 8003514:	f7ff f852 	bl	80025bc <TIM_SetCounter>
			TIM_SetCompare3(MOTORx_TIM, compare);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	b29b      	uxth	r3, r3
 800351c:	4619      	mov	r1, r3
 800351e:	4815      	ldr	r0, [pc, #84]	; (8003574 <MotorControl_ReverseRotating+0x98>)
 8003520:	f7ff f876 	bl	8002610 <TIM_SetCompare3>
			TIM_SetCompare4(MOTORx_TIM, 0);
 8003524:	2100      	movs	r1, #0
 8003526:	4813      	ldr	r0, [pc, #76]	; (8003574 <MotorControl_ReverseRotating+0x98>)
 8003528:	f7ff f880 	bl	800262c <TIM_SetCompare4>
			break;
 800352c:	e01c      	b.n	8003568 <MotorControl_ReverseRotating+0x8c>
			compare = (dutycycle * MOTOR_TIM_PERIOD) / 100;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003534:	fb02 f303 	mul.w	r3, r2, r3
 8003538:	4a0d      	ldr	r2, [pc, #52]	; (8003570 <MotorControl_ReverseRotating+0x94>)
 800353a:	fba2 2303 	umull	r2, r3, r2, r3
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	60fb      	str	r3, [r7, #12]
			TIM_SetCounter(MOTORx_TIM, 0);
 8003542:	2100      	movs	r1, #0
 8003544:	480b      	ldr	r0, [pc, #44]	; (8003574 <MotorControl_ReverseRotating+0x98>)
 8003546:	f7ff f839 	bl	80025bc <TIM_SetCounter>
			TIM_SetCounter(MOTORx_TIM, 0);
 800354a:	2100      	movs	r1, #0
 800354c:	4809      	ldr	r0, [pc, #36]	; (8003574 <MotorControl_ReverseRotating+0x98>)
 800354e:	f7ff f835 	bl	80025bc <TIM_SetCounter>
			TIM_SetCompare1(MOTORx_TIM, compare);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	b29b      	uxth	r3, r3
 8003556:	4619      	mov	r1, r3
 8003558:	4806      	ldr	r0, [pc, #24]	; (8003574 <MotorControl_ReverseRotating+0x98>)
 800355a:	f7ff f83d 	bl	80025d8 <TIM_SetCompare1>
			TIM_SetCompare2(MOTORx_TIM, 0);
 800355e:	2100      	movs	r1, #0
 8003560:	4804      	ldr	r0, [pc, #16]	; (8003574 <MotorControl_ReverseRotating+0x98>)
 8003562:	f7ff f847 	bl	80025f4 <TIM_SetCompare2>
			break;
 8003566:	bf00      	nop
	}
}
 8003568:	bf00      	nop
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	51eb851f 	.word	0x51eb851f
 8003574:	40000800 	.word	0x40000800

08003578 <LineFollow>:
 * @brief
 * @param  None
 * @retval None
 */
void LineFollow(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
	/* IR sensor is in the leftmost position */
    if (OpticalSensor_MeasureUseDMAMode(0) < AdcValuesThreshold[0] &&
 800357c:	2000      	movs	r0, #0
 800357e:	f000 fbab 	bl	8003cd8 <OpticalSensor_MeasureUseDMAMode>
 8003582:	4603      	mov	r3, r0
 8003584:	461a      	mov	r2, r3
 8003586:	4b32      	ldr	r3, [pc, #200]	; (8003650 <LineFollow+0xd8>)
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	429a      	cmp	r2, r3
 800358c:	d211      	bcs.n	80035b2 <LineFollow+0x3a>
		OpticalSensor_MeasureUseDMAMode(4) > AdcValuesThreshold[4])
 800358e:	2004      	movs	r0, #4
 8003590:	f000 fba2 	bl	8003cd8 <OpticalSensor_MeasureUseDMAMode>
 8003594:	4603      	mov	r3, r0
 8003596:	461a      	mov	r2, r3
 8003598:	4b2d      	ldr	r3, [pc, #180]	; (8003650 <LineFollow+0xd8>)
 800359a:	891b      	ldrh	r3, [r3, #8]
    if (OpticalSensor_MeasureUseDMAMode(0) < AdcValuesThreshold[0] &&
 800359c:	429a      	cmp	r2, r3
 800359e:	d908      	bls.n	80035b2 <LineFollow+0x3a>
    {
    	/* Turn left */
		MotorControl_ForwardRotating(MOTOR_ID_R, 15);
 80035a0:	210f      	movs	r1, #15
 80035a2:	2001      	movs	r0, #1
 80035a4:	f7ff ff4c 	bl	8003440 <MotorControl_ForwardRotating>
		MotorControl_ReverseRotating(MOTOR_ID_L, 20);
 80035a8:	2114      	movs	r1, #20
 80035aa:	2000      	movs	r0, #0
 80035ac:	f7ff ff96 	bl	80034dc <MotorControl_ReverseRotating>
 80035b0:	e047      	b.n	8003642 <LineFollow+0xca>

    }

    /* IR sensor is in the rightmost position */
    else if (OpticalSensor_MeasureUseDMAMode(0) > AdcValuesThreshold[0] &&
 80035b2:	2000      	movs	r0, #0
 80035b4:	f000 fb90 	bl	8003cd8 <OpticalSensor_MeasureUseDMAMode>
 80035b8:	4603      	mov	r3, r0
 80035ba:	461a      	mov	r2, r3
 80035bc:	4b24      	ldr	r3, [pc, #144]	; (8003650 <LineFollow+0xd8>)
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d911      	bls.n	80035e8 <LineFollow+0x70>
    		 OpticalSensor_MeasureUseDMAMode(4) < AdcValuesThreshold[4])
 80035c4:	2004      	movs	r0, #4
 80035c6:	f000 fb87 	bl	8003cd8 <OpticalSensor_MeasureUseDMAMode>
 80035ca:	4603      	mov	r3, r0
 80035cc:	461a      	mov	r2, r3
 80035ce:	4b20      	ldr	r3, [pc, #128]	; (8003650 <LineFollow+0xd8>)
 80035d0:	891b      	ldrh	r3, [r3, #8]
    else if (OpticalSensor_MeasureUseDMAMode(0) > AdcValuesThreshold[0] &&
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d208      	bcs.n	80035e8 <LineFollow+0x70>
    {
    	/* Turn right */
		MotorControl_ReverseRotating(MOTOR_ID_R, 15);
 80035d6:	210f      	movs	r1, #15
 80035d8:	2001      	movs	r0, #1
 80035da:	f7ff ff7f 	bl	80034dc <MotorControl_ReverseRotating>
		MotorControl_ForwardRotating(MOTOR_ID_L, 20);
 80035de:	2114      	movs	r1, #20
 80035e0:	2000      	movs	r0, #0
 80035e2:	f7ff ff2d 	bl	8003440 <MotorControl_ForwardRotating>
 80035e6:	e02c      	b.n	8003642 <LineFollow+0xca>
    }

    /* IR sensor is in the center position */
    else if (OpticalSensor_MeasureUseDMAMode(2) < AdcValuesThreshold[2])
 80035e8:	2002      	movs	r0, #2
 80035ea:	f000 fb75 	bl	8003cd8 <OpticalSensor_MeasureUseDMAMode>
 80035ee:	4603      	mov	r3, r0
 80035f0:	461a      	mov	r2, r3
 80035f2:	4b17      	ldr	r3, [pc, #92]	; (8003650 <LineFollow+0xd8>)
 80035f4:	889b      	ldrh	r3, [r3, #4]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d223      	bcs.n	8003642 <LineFollow+0xca>
    {
    	/* Calculate Kp, Ki, Kd used to Follow Line */
		Kp = 0.00004 * (2000 - OpticalSensor_MeasureUseDMAMode(3));
 80035fa:	2003      	movs	r0, #3
 80035fc:	f000 fb6c 	bl	8003cd8 <OpticalSensor_MeasureUseDMAMode>
 8003600:	4603      	mov	r3, r0
 8003602:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8003606:	4618      	mov	r0, r3
 8003608:	f7fc ffb8 	bl	800057c <__aeabi_i2d>
 800360c:	a30e      	add	r3, pc, #56	; (adr r3, 8003648 <LineFollow+0xd0>)
 800360e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003612:	f7fd f81d 	bl	8000650 <__aeabi_dmul>
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	4610      	mov	r0, r2
 800361c:	4619      	mov	r1, r3
 800361e:	f7fd faef 	bl	8000c00 <__aeabi_d2f>
 8003622:	4603      	mov	r3, r0
 8003624:	4a0b      	ldr	r2, [pc, #44]	; (8003654 <LineFollow+0xdc>)
 8003626:	6013      	str	r3, [r2, #0]
		Kd = 60 * Kp;
 8003628:	4b0a      	ldr	r3, [pc, #40]	; (8003654 <LineFollow+0xdc>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	490a      	ldr	r1, [pc, #40]	; (8003658 <LineFollow+0xe0>)
 800362e:	4618      	mov	r0, r3
 8003630:	f7fc fd9e 	bl	8000170 <__aeabi_fmul>
 8003634:	4603      	mov	r3, r0
 8003636:	461a      	mov	r2, r3
 8003638:	4b08      	ldr	r3, [pc, #32]	; (800365c <LineFollow+0xe4>)
 800363a:	601a      	str	r2, [r3, #0]
//      Ki = 0.0000001;
		PID_Control();
 800363c:	f000 f810 	bl	8003660 <PID_Control>
    }
}
 8003640:	e7ff      	b.n	8003642 <LineFollow+0xca>
 8003642:	bf00      	nop
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	88e368f1 	.word	0x88e368f1
 800364c:	3f04f8b5 	.word	0x3f04f8b5
 8003650:	2000005c 	.word	0x2000005c
 8003654:	20000184 	.word	0x20000184
 8003658:	42700000 	.word	0x42700000
 800365c:	2000018c 	.word	0x2000018c

08003660 <PID_Control>:
 * @brief
 * @param  None
 * @retval None
 */
void PID_Control(void)
{
 8003660:	b590      	push	{r4, r7, lr}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
	/* Calculate error */
	int error = (OpticalSensor_MeasureUseDMAMode(1) - OpticalSensor_MeasureUseDMAMode(3));
 8003666:	2001      	movs	r0, #1
 8003668:	f000 fb36 	bl	8003cd8 <OpticalSensor_MeasureUseDMAMode>
 800366c:	4603      	mov	r3, r0
 800366e:	461c      	mov	r4, r3
 8003670:	2003      	movs	r0, #3
 8003672:	f000 fb31 	bl	8003cd8 <OpticalSensor_MeasureUseDMAMode>
 8003676:	4603      	mov	r3, r0
 8003678:	1ae3      	subs	r3, r4, r3
 800367a:	607b      	str	r3, [r7, #4]

	P =  error;
 800367c:	4a4c      	ldr	r2, [pc, #304]	; (80037b0 <PID_Control+0x150>)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6013      	str	r3, [r2, #0]
	I += error;
 8003682:	4b4c      	ldr	r3, [pc, #304]	; (80037b4 <PID_Control+0x154>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4413      	add	r3, r2
 800368a:	4a4a      	ldr	r2, [pc, #296]	; (80037b4 <PID_Control+0x154>)
 800368c:	6013      	str	r3, [r2, #0]
	D =  error - previousError;
 800368e:	4b4a      	ldr	r3, [pc, #296]	; (80037b8 <PID_Control+0x158>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	4a49      	ldr	r2, [pc, #292]	; (80037bc <PID_Control+0x15c>)
 8003698:	6013      	str	r3, [r2, #0]

	PIDvalue = ((Kp * P) + (Ki * I) + (Kd * D));
 800369a:	4b45      	ldr	r3, [pc, #276]	; (80037b0 <PID_Control+0x150>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fd fbb8 	bl	8000e14 <__aeabi_i2f>
 80036a4:	4602      	mov	r2, r0
 80036a6:	4b46      	ldr	r3, [pc, #280]	; (80037c0 <PID_Control+0x160>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4619      	mov	r1, r3
 80036ac:	4610      	mov	r0, r2
 80036ae:	f7fc fd5f 	bl	8000170 <__aeabi_fmul>
 80036b2:	4603      	mov	r3, r0
 80036b4:	461c      	mov	r4, r3
 80036b6:	4b3f      	ldr	r3, [pc, #252]	; (80037b4 <PID_Control+0x154>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fd fbaa 	bl	8000e14 <__aeabi_i2f>
 80036c0:	4602      	mov	r2, r0
 80036c2:	4b40      	ldr	r3, [pc, #256]	; (80037c4 <PID_Control+0x164>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4619      	mov	r1, r3
 80036c8:	4610      	mov	r0, r2
 80036ca:	f7fc fd51 	bl	8000170 <__aeabi_fmul>
 80036ce:	4603      	mov	r3, r0
 80036d0:	4619      	mov	r1, r3
 80036d2:	4620      	mov	r0, r4
 80036d4:	f7fd faea 	bl	8000cac <__addsf3>
 80036d8:	4603      	mov	r3, r0
 80036da:	461c      	mov	r4, r3
 80036dc:	4b37      	ldr	r3, [pc, #220]	; (80037bc <PID_Control+0x15c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7fd fb97 	bl	8000e14 <__aeabi_i2f>
 80036e6:	4602      	mov	r2, r0
 80036e8:	4b37      	ldr	r3, [pc, #220]	; (80037c8 <PID_Control+0x168>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4619      	mov	r1, r3
 80036ee:	4610      	mov	r0, r2
 80036f0:	f7fc fd3e 	bl	8000170 <__aeabi_fmul>
 80036f4:	4603      	mov	r3, r0
 80036f6:	4619      	mov	r1, r3
 80036f8:	4620      	mov	r0, r4
 80036fa:	f7fd fad7 	bl	8000cac <__addsf3>
 80036fe:	4603      	mov	r3, r0
 8003700:	461a      	mov	r2, r3
 8003702:	4b32      	ldr	r3, [pc, #200]	; (80037cc <PID_Control+0x16c>)
 8003704:	601a      	str	r2, [r3, #0]
	previousError = error;
 8003706:	4a2c      	ldr	r2, [pc, #176]	; (80037b8 <PID_Control+0x158>)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6013      	str	r3, [r2, #0]

	lsp = lfspeed - PIDvalue;
 800370c:	4b30      	ldr	r3, [pc, #192]	; (80037d0 <PID_Control+0x170>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f7fd fb7f 	bl	8000e14 <__aeabi_i2f>
 8003716:	4602      	mov	r2, r0
 8003718:	4b2c      	ldr	r3, [pc, #176]	; (80037cc <PID_Control+0x16c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4619      	mov	r1, r3
 800371e:	4610      	mov	r0, r2
 8003720:	f7fd fac2 	bl	8000ca8 <__aeabi_fsub>
 8003724:	4603      	mov	r3, r0
 8003726:	4618      	mov	r0, r3
 8003728:	f7fd fbc8 	bl	8000ebc <__aeabi_f2iz>
 800372c:	4603      	mov	r3, r0
 800372e:	4a29      	ldr	r2, [pc, #164]	; (80037d4 <PID_Control+0x174>)
 8003730:	6013      	str	r3, [r2, #0]
	rsp = lfspeed + PIDvalue;
 8003732:	4b27      	ldr	r3, [pc, #156]	; (80037d0 <PID_Control+0x170>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f7fd fb6c 	bl	8000e14 <__aeabi_i2f>
 800373c:	4602      	mov	r2, r0
 800373e:	4b23      	ldr	r3, [pc, #140]	; (80037cc <PID_Control+0x16c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4619      	mov	r1, r3
 8003744:	4610      	mov	r0, r2
 8003746:	f7fd fab1 	bl	8000cac <__addsf3>
 800374a:	4603      	mov	r3, r0
 800374c:	4618      	mov	r0, r3
 800374e:	f7fd fbb5 	bl	8000ebc <__aeabi_f2iz>
 8003752:	4603      	mov	r3, r0
 8003754:	4a20      	ldr	r2, [pc, #128]	; (80037d8 <PID_Control+0x178>)
 8003756:	6013      	str	r3, [r2, #0]

	if (lsp > 50) 	lsp = 50;
 8003758:	4b1e      	ldr	r3, [pc, #120]	; (80037d4 <PID_Control+0x174>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b32      	cmp	r3, #50	; 0x32
 800375e:	dd02      	ble.n	8003766 <PID_Control+0x106>
 8003760:	4b1c      	ldr	r3, [pc, #112]	; (80037d4 <PID_Control+0x174>)
 8003762:	2232      	movs	r2, #50	; 0x32
 8003764:	601a      	str	r2, [r3, #0]

	if (lsp < 0) 	lsp = 0;
 8003766:	4b1b      	ldr	r3, [pc, #108]	; (80037d4 <PID_Control+0x174>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	da02      	bge.n	8003774 <PID_Control+0x114>
 800376e:	4b19      	ldr	r3, [pc, #100]	; (80037d4 <PID_Control+0x174>)
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]

	if (rsp > 50) 	rsp = 50;
 8003774:	4b18      	ldr	r3, [pc, #96]	; (80037d8 <PID_Control+0x178>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b32      	cmp	r3, #50	; 0x32
 800377a:	dd02      	ble.n	8003782 <PID_Control+0x122>
 800377c:	4b16      	ldr	r3, [pc, #88]	; (80037d8 <PID_Control+0x178>)
 800377e:	2232      	movs	r2, #50	; 0x32
 8003780:	601a      	str	r2, [r3, #0]

	if (rsp < 0) 	rsp = 0;
 8003782:	4b15      	ldr	r3, [pc, #84]	; (80037d8 <PID_Control+0x178>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	da02      	bge.n	8003790 <PID_Control+0x130>
 800378a:	4b13      	ldr	r3, [pc, #76]	; (80037d8 <PID_Control+0x178>)
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]

	MotorControl_ForwardRotating(MOTOR_ID_R, rsp);
 8003790:	4b11      	ldr	r3, [pc, #68]	; (80037d8 <PID_Control+0x178>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4619      	mov	r1, r3
 8003796:	2001      	movs	r0, #1
 8003798:	f7ff fe52 	bl	8003440 <MotorControl_ForwardRotating>
	MotorControl_ForwardRotating(MOTOR_ID_L, lsp);
 800379c:	4b0d      	ldr	r3, [pc, #52]	; (80037d4 <PID_Control+0x174>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4619      	mov	r1, r3
 80037a2:	2000      	movs	r0, #0
 80037a4:	f7ff fe4c 	bl	8003440 <MotorControl_ForwardRotating>
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd90      	pop	{r4, r7, pc}
 80037b0:	20000170 	.word	0x20000170
 80037b4:	20000174 	.word	0x20000174
 80037b8:	2000017c 	.word	0x2000017c
 80037bc:	20000178 	.word	0x20000178
 80037c0:	20000184 	.word	0x20000184
 80037c4:	20000188 	.word	0x20000188
 80037c8:	2000018c 	.word	0x2000018c
 80037cc:	20000180 	.word	0x20000180
 80037d0:	20000068 	.word	0x20000068
 80037d4:	20000190 	.word	0x20000190
 80037d8:	20000194 	.word	0x20000194

080037dc <Check_InLine>:
 * @brief  Check IR sensor In Line or Out Line
 * @param  None
 * @retval Number IR sensor In Line and Out Line
 */
uint8_t Check_InLine(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < IR_SENSOR_MAX; i++){
 80037e2:	2300      	movs	r3, #0
 80037e4:	71fb      	strb	r3, [r7, #7]
 80037e6:	e019      	b.n	800381c <Check_InLine+0x40>
		if(OpticalSensor_MeasureUseDMAMode(i) > AdcValuesThreshold[i]) {
 80037e8:	79fb      	ldrb	r3, [r7, #7]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fa74 	bl	8003cd8 <OpticalSensor_MeasureUseDMAMode>
 80037f0:	4603      	mov	r3, r0
 80037f2:	4619      	mov	r1, r3
 80037f4:	79fb      	ldrb	r3, [r7, #7]
 80037f6:	4a18      	ldr	r2, [pc, #96]	; (8003858 <Check_InLine+0x7c>)
 80037f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037fc:	4299      	cmp	r1, r3
 80037fe:	d905      	bls.n	800380c <Check_InLine+0x30>
			count++;
 8003800:	4b16      	ldr	r3, [pc, #88]	; (800385c <Check_InLine+0x80>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3301      	adds	r3, #1
 8003806:	4a15      	ldr	r2, [pc, #84]	; (800385c <Check_InLine+0x80>)
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	e004      	b.n	8003816 <Check_InLine+0x3a>
		}
		else {
			count--;
 800380c:	4b13      	ldr	r3, [pc, #76]	; (800385c <Check_InLine+0x80>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	3b01      	subs	r3, #1
 8003812:	4a12      	ldr	r2, [pc, #72]	; (800385c <Check_InLine+0x80>)
 8003814:	6013      	str	r3, [r2, #0]
	for(uint8_t i = 0; i < IR_SENSOR_MAX; i++){
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	3301      	adds	r3, #1
 800381a:	71fb      	strb	r3, [r7, #7]
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	2b04      	cmp	r3, #4
 8003820:	d9e2      	bls.n	80037e8 <Check_InLine+0xc>
		}
	}

	if (count == 5){
 8003822:	4b0e      	ldr	r3, [pc, #56]	; (800385c <Check_InLine+0x80>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2b05      	cmp	r3, #5
 8003828:	d104      	bne.n	8003834 <Check_InLine+0x58>
		count = 0;
 800382a:	4b0c      	ldr	r3, [pc, #48]	; (800385c <Check_InLine+0x80>)
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
		return 1;
 8003830:	2301      	movs	r3, #1
 8003832:	e00d      	b.n	8003850 <Check_InLine+0x74>
	}else if (count == -5){
 8003834:	4b09      	ldr	r3, [pc, #36]	; (800385c <Check_InLine+0x80>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f113 0f05 	cmn.w	r3, #5
 800383c:	d104      	bne.n	8003848 <Check_InLine+0x6c>
		count = 0;
 800383e:	4b07      	ldr	r3, [pc, #28]	; (800385c <Check_InLine+0x80>)
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
		return -1;
 8003844:	23ff      	movs	r3, #255	; 0xff
 8003846:	e003      	b.n	8003850 <Check_InLine+0x74>
	}
	else {
		count = 0;
 8003848:	4b04      	ldr	r3, [pc, #16]	; (800385c <Check_InLine+0x80>)
 800384a:	2200      	movs	r2, #0
 800384c:	601a      	str	r2, [r3, #0]
		return 0;
 800384e:	2300      	movs	r3, #0
	}
}
 8003850:	4618      	mov	r0, r3
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	2000005c 	.word	0x2000005c
 800385c:	2000019c 	.word	0x2000019c

08003860 <MotorControl_PID>:
//	else {
//		LineFollow();
//	}
//}
void MotorControl_PID(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
	if (Check_InLine() == 1 && lastCheckInline == 1){
 8003864:	f7ff ffba 	bl	80037dc <Check_InLine>
 8003868:	4603      	mov	r3, r0
 800386a:	2b01      	cmp	r3, #1
 800386c:	d10f      	bne.n	800388e <MotorControl_PID+0x2e>
 800386e:	4b0b      	ldr	r3, [pc, #44]	; (800389c <MotorControl_PID+0x3c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d10b      	bne.n	800388e <MotorControl_PID+0x2e>
		MotorControl_ReverseRotating(MOTOR_ID_L, 20);
 8003876:	2114      	movs	r1, #20
 8003878:	2000      	movs	r0, #0
 800387a:	f7ff fe2f 	bl	80034dc <MotorControl_ReverseRotating>
		MotorControl_ReverseRotating(MOTOR_ID_R, 20);
 800387e:	2114      	movs	r1, #20
 8003880:	2001      	movs	r0, #1
 8003882:	f7ff fe2b 	bl	80034dc <MotorControl_ReverseRotating>
		lastCheckInline = 1;
 8003886:	4b05      	ldr	r3, [pc, #20]	; (800389c <MotorControl_PID+0x3c>)
 8003888:	2201      	movs	r2, #1
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	e004      	b.n	8003898 <MotorControl_PID+0x38>
	}else if (Check_InLine() == -1 && lastCheckInline == -1){
 800388e:	f7ff ffa5 	bl	80037dc <Check_InLine>
		MotorControl_ForwardRotating(MOTOR_ID_L, 0);
		MotorControl_ForwardRotating(MOTOR_ID_R, 0);
		lastCheckInline = -1;
	}
	else {
		LineFollow();
 8003892:	f7ff fe71 	bl	8003578 <LineFollow>
	}
}
 8003896:	bf00      	nop
 8003898:	bf00      	nop
 800389a:	bd80      	pop	{r7, pc}
 800389c:	20000198 	.word	0x20000198

080038a0 <EventSchedulerInit>:
 * @retval None
 */
void
EventSchedulerInit(
    app_state_callback func
) {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
    if (func != NULL) {
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d009      	beq.n	80038c2 <EventSchedulerInit+0x22>
        pAppStateFunc = func;
 80038ae:	4a07      	ldr	r2, [pc, #28]	; (80038cc <EventSchedulerInit+0x2c>)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6013      	str	r3, [r2, #0]
        bufInit(pBuffEvent, &eventQueue, sizeof(uint8_t), SIZE_EVENT_QUEUE);
 80038b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038b8:	2201      	movs	r2, #1
 80038ba:	4905      	ldr	r1, [pc, #20]	; (80038d0 <EventSchedulerInit+0x30>)
 80038bc:	4805      	ldr	r0, [pc, #20]	; (80038d4 <EventSchedulerInit+0x34>)
 80038be:	f000 fbbb 	bl	8004038 <bufInit>
    }
}
 80038c2:	bf00      	nop
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	200001a0 	.word	0x200001a0
 80038d0:	200002a4 	.word	0x200002a4
 80038d4:	200001a4 	.word	0x200001a4

080038d8 <EventSchedulerAdd>:
 * @retval None
 */
type_status_t
EventSchedulerAdd(
    const uint8_t pvItemToQueue
) {
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	71fb      	strb	r3, [r7, #7]
    if (bufEnDat(&eventQueue, (uint8_t *)&pvItemToQueue) == ERR_OK) {
 80038e2:	1dfb      	adds	r3, r7, #7
 80038e4:	4619      	mov	r1, r3
 80038e6:	4806      	ldr	r0, [pc, #24]	; (8003900 <EventSchedulerAdd+0x28>)
 80038e8:	f000 fbec 	bl	80040c4 <bufEnDat>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <EventSchedulerAdd+0x1e>
        return EVT_SUCCESS;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e000      	b.n	80038f8 <EventSchedulerAdd+0x20>
    }
    
    return EVT_FAIL;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	200002a4 	.word	0x200002a4

08003904 <NVIC_SetPriority>:
 * interrupt, or negative to specify an internal (core) interrupt.
 *
 * Note: The priority cannot be set for every core interrupt.
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	6039      	str	r1, [r7, #0]
 800390e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8003910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003914:	2b00      	cmp	r3, #0
 8003916:	da0b      	bge.n	8003930 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	b2da      	uxtb	r2, r3
 800391c:	490c      	ldr	r1, [pc, #48]	; (8003950 <NVIC_SetPriority+0x4c>)
 800391e:	79fb      	ldrb	r3, [r7, #7]
 8003920:	f003 030f 	and.w	r3, r3, #15
 8003924:	3b04      	subs	r3, #4
 8003926:	0112      	lsls	r2, r2, #4
 8003928:	b2d2      	uxtb	r2, r2
 800392a:	440b      	add	r3, r1
 800392c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800392e:	e009      	b.n	8003944 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	b2da      	uxtb	r2, r3
 8003934:	4907      	ldr	r1, [pc, #28]	; (8003954 <NVIC_SetPriority+0x50>)
 8003936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393a:	0112      	lsls	r2, r2, #4
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	440b      	add	r3, r1
 8003940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	e000ed00 	.word	0xe000ed00
 8003954:	e000e100 	.word	0xe000e100

08003958 <SysTick_Config>:
 * Initialise the system tick timer and its interrupt and start the
 * system tick timer / counter in free running mode to generate 
 * periodical interrupts.
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003966:	d301      	bcc.n	800396c <SysTick_Config+0x14>
 8003968:	2301      	movs	r3, #1
 800396a:	e011      	b.n	8003990 <SysTick_Config+0x38>
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003972:	4a09      	ldr	r2, [pc, #36]	; (8003998 <SysTick_Config+0x40>)
 8003974:	3b01      	subs	r3, #1
 8003976:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8003978:	210f      	movs	r1, #15
 800397a:	f04f 30ff 	mov.w	r0, #4294967295
 800397e:	f7ff ffc1 	bl	8003904 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8003982:	4b05      	ldr	r3, [pc, #20]	; (8003998 <SysTick_Config+0x40>)
 8003984:	2200      	movs	r2, #0
 8003986:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 8003988:	4b03      	ldr	r3, [pc, #12]	; (8003998 <SysTick_Config+0x40>)
 800398a:	2207      	movs	r2, #7
 800398c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   | 
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	e000e010 	.word	0xe000e010

0800399c <TimerInit>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
TimerInit(void) {
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;

    RCC_GetClocksFreq(&RCC_Clocks);
 80039a2:	1d3b      	adds	r3, r7, #4
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fe f9af 	bl	8001d08 <RCC_GetClocksFreq>
    SysTick_Config(RCC_Clocks.SYSCLK_Frequency/1000);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a0a      	ldr	r2, [pc, #40]	; (80039d8 <TimerInit+0x3c>)
 80039ae:	fba2 2303 	umull	r2, r3, r2, r3
 80039b2:	099b      	lsrs	r3, r3, #6
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff ffcf 	bl	8003958 <SysTick_Config>
    NVIC_SetPriority(SysTick_IRQn, 1);
 80039ba:	2101      	movs	r1, #1
 80039bc:	f04f 30ff 	mov.w	r0, #4294967295
 80039c0:	f7ff ffa0 	bl	8003904 <NVIC_SetPriority>
    memsetl((uint8_t *)g_pTimerHandle, 0, sizeof(g_pTimerHandle));
 80039c4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80039c8:	2100      	movs	r1, #0
 80039ca:	4804      	ldr	r0, [pc, #16]	; (80039dc <TimerInit+0x40>)
 80039cc:	f000 fbca 	bl	8004164 <memsetl>
    DBG_TIMER_SEND_STR("$ TimerInit\n");
}
 80039d0:	bf00      	nop
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	10624dd3 	.word	0x10624dd3
 80039dc:	200002b4 	.word	0x200002b4

080039e0 <TimerStart>:
    char* name,
	uint32_t wMilSecTick,
	uint8_t byRepeats,
	void (*callback)(void *),
    void *pcallbackData
) {   
 80039e0:	b590      	push	{r4, r7, lr}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	603b      	str	r3, [r7, #0]
 80039ec:	4613      	mov	r3, r2
 80039ee:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 80039f0:	2300      	movs	r3, #0
 80039f2:	75fb      	strb	r3, [r7, #23]
 80039f4:	e04c      	b.n	8003a90 <TimerStart+0xb0>
    {
        if (g_pTimerHandle[i].callbackFunc == NULL)
 80039f6:	7dfa      	ldrb	r2, [r7, #23]
 80039f8:	4929      	ldr	r1, [pc, #164]	; (8003aa0 <TimerStart+0xc0>)
 80039fa:	4613      	mov	r3, r2
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	4413      	add	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	440b      	add	r3, r1
 8003a04:	3310      	adds	r3, #16
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d13e      	bne.n	8003a8a <TimerStart+0xaa>
        {
            g_pTimerHandle[i].name = name;
 8003a0c:	7dfa      	ldrb	r2, [r7, #23]
 8003a0e:	4924      	ldr	r1, [pc, #144]	; (8003aa0 <TimerStart+0xc0>)
 8003a10:	4613      	mov	r3, r2
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	4413      	add	r3, r2
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	440b      	add	r3, r1
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].callbackFunc = callback;
 8003a1e:	7dfa      	ldrb	r2, [r7, #23]
 8003a20:	491f      	ldr	r1, [pc, #124]	; (8003aa0 <TimerStart+0xc0>)
 8003a22:	4613      	mov	r3, r2
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	4413      	add	r3, r2
 8003a28:	00db      	lsls	r3, r3, #3
 8003a2a:	440b      	add	r3, r1
 8003a2c:	3310      	adds	r3, #16
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].repeats = byRepeats;
 8003a32:	7dfa      	ldrb	r2, [r7, #23]
 8003a34:	491a      	ldr	r1, [pc, #104]	; (8003aa0 <TimerStart+0xc0>)
 8003a36:	4613      	mov	r3, r2
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	4413      	add	r3, r2
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	440b      	add	r3, r1
 8003a40:	330c      	adds	r3, #12
 8003a42:	79fa      	ldrb	r2, [r7, #7]
 8003a44:	701a      	strb	r2, [r3, #0]
            g_pTimerHandle[i].pCallbackData = pcallbackData;
 8003a46:	7dfa      	ldrb	r2, [r7, #23]
 8003a48:	4915      	ldr	r1, [pc, #84]	; (8003aa0 <TimerStart+0xc0>)
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	4413      	add	r3, r2
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	440b      	add	r3, r1
 8003a54:	3314      	adds	r3, #20
 8003a56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a58:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].milSecStart = GetMilSecTick();
 8003a5a:	7dfc      	ldrb	r4, [r7, #23]
 8003a5c:	f000 f870 	bl	8003b40 <GetMilSecTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	490f      	ldr	r1, [pc, #60]	; (8003aa0 <TimerStart+0xc0>)
 8003a64:	4623      	mov	r3, r4
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	4423      	add	r3, r4
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	440b      	add	r3, r1
 8003a6e:	3304      	adds	r3, #4
 8003a70:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].milSecTimeout = wMilSecTick;
 8003a72:	7dfa      	ldrb	r2, [r7, #23]
 8003a74:	490a      	ldr	r1, [pc, #40]	; (8003aa0 <TimerStart+0xc0>)
 8003a76:	4613      	mov	r3, r2
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	4413      	add	r3, r2
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	440b      	add	r3, r1
 8003a80:	3308      	adds	r3, #8
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	601a      	str	r2, [r3, #0]
            DBG_TIMER_SEND_NUM(g_pTimerHandle[i].repeats);
            DBG_TIMER_SEND_STR(", timeCall = ");
            DBG_TIMER_SEND_NUM(wMilSecTick);
            DBG_TIMER_SEND_STR("\n");

            return i;
 8003a86:	7dfb      	ldrb	r3, [r7, #23]
 8003a88:	e006      	b.n	8003a98 <TimerStart+0xb8>
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 8003a8a:	7dfb      	ldrb	r3, [r7, #23]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	75fb      	strb	r3, [r7, #23]
 8003a90:	7dfb      	ldrb	r3, [r7, #23]
 8003a92:	2b0f      	cmp	r3, #15
 8003a94:	d9af      	bls.n	80039f6 <TimerStart+0x16>
        }
    }
    
    return NO_TIMER;
 8003a96:	23ff      	movs	r3, #255	; 0xff
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	371c      	adds	r7, #28
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd90      	pop	{r4, r7, pc}
 8003aa0:	200002b4 	.word	0x200002b4

08003aa4 <TimerStop>:
 * @retval None
 */
uint8_t
TimerStop(
    uint8_t byTimerId
) {   
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	71fb      	strb	r3, [r7, #7]
    if ((byTimerId >= MAX_TIMER) || (g_pTimerHandle[byTimerId].callbackFunc == NULL))
 8003aae:	79fb      	ldrb	r3, [r7, #7]
 8003ab0:	2b0f      	cmp	r3, #15
 8003ab2:	d80a      	bhi.n	8003aca <TimerStop+0x26>
 8003ab4:	79fa      	ldrb	r2, [r7, #7]
 8003ab6:	4921      	ldr	r1, [pc, #132]	; (8003b3c <TimerStop+0x98>)
 8003ab8:	4613      	mov	r3, r2
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	4413      	add	r3, r2
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	440b      	add	r3, r1
 8003ac2:	3310      	adds	r3, #16
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <TimerStop+0x2a>
        return 0;
 8003aca:	2300      	movs	r3, #0
 8003acc:	e031      	b.n	8003b32 <TimerStop+0x8e>
    DBG_TIMER_SEND_STR(g_pTimerHandle[byTimerId].name);
    DBG_TIMER_SEND_STR(" Id = "); 
    DBG_TIMER_SEND_NUM(byTimerId);
    DBG_TIMER_SEND_STR("\n");
    
    g_pTimerHandle[byTimerId].name = NULL;
 8003ace:	79fa      	ldrb	r2, [r7, #7]
 8003ad0:	491a      	ldr	r1, [pc, #104]	; (8003b3c <TimerStop+0x98>)
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	4413      	add	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	440b      	add	r3, r1
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].callbackFunc = NULL;
 8003ae0:	79fa      	ldrb	r2, [r7, #7]
 8003ae2:	4916      	ldr	r1, [pc, #88]	; (8003b3c <TimerStop+0x98>)
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	4413      	add	r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	440b      	add	r3, r1
 8003aee:	3310      	adds	r3, #16
 8003af0:	2200      	movs	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].repeats = 0;
 8003af4:	79fa      	ldrb	r2, [r7, #7]
 8003af6:	4911      	ldr	r1, [pc, #68]	; (8003b3c <TimerStop+0x98>)
 8003af8:	4613      	mov	r3, r2
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	4413      	add	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	440b      	add	r3, r1
 8003b02:	330c      	adds	r3, #12
 8003b04:	2200      	movs	r2, #0
 8003b06:	701a      	strb	r2, [r3, #0]
    g_pTimerHandle[byTimerId].milSecTimeout = 0;
 8003b08:	79fa      	ldrb	r2, [r7, #7]
 8003b0a:	490c      	ldr	r1, [pc, #48]	; (8003b3c <TimerStop+0x98>)
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	4413      	add	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	440b      	add	r3, r1
 8003b16:	3308      	adds	r3, #8
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].milSecStart = 0;
 8003b1c:	79fa      	ldrb	r2, [r7, #7]
 8003b1e:	4907      	ldr	r1, [pc, #28]	; (8003b3c <TimerStop+0x98>)
 8003b20:	4613      	mov	r3, r2
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	4413      	add	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	440b      	add	r3, r1
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
    
    return 1;
 8003b30:	2301      	movs	r3, #1
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr
 8003b3c:	200002b4 	.word	0x200002b4

08003b40 <GetMilSecTick>:
 * @brief  None
 * @param  None
 * @retval None
 */
uint32_t
GetMilSecTick(void) {
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
    return g_wMilSecTickTimer;
 8003b44:	4b02      	ldr	r3, [pc, #8]	; (8003b50 <GetMilSecTick+0x10>)
 8003b46:	681b      	ldr	r3, [r3, #0]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bc80      	pop	{r7}
 8003b4e:	4770      	bx	lr
 8003b50:	20000434 	.word	0x20000434

08003b54 <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 8003b58:	4b04      	ldr	r3, [pc, #16]	; (8003b6c <SysTick_Handler+0x18>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	4a03      	ldr	r2, [pc, #12]	; (8003b6c <SysTick_Handler+0x18>)
 8003b60:	6013      	str	r3, [r2, #0]
}
 8003b62:	bf00      	nop
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bc80      	pop	{r7}
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	20000434 	.word	0x20000434

08003b70 <OpticalSensor_Init>:
 * @retval None
 */
void
OpticalSensor_Init(
	ADC_READ_MODE adc_read_mode
) {
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b094      	sub	sp, #80	; 0x50
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	71fb      	strb	r3, [r7, #7]
	ADC_InitTypeDef 	ADC_InitStructure;
	GPIO_InitTypeDef 	GPIO_InitStructure;
	DMA_InitTypeDef 	DMA_InitStructure;

	/* ADCCLK = PCLK2/4 */
	RCC_ADCCLKConfig(RCC_PCLK2_Div4);
 8003b7a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003b7e:	f7fe f8a7 	bl	8001cd0 <RCC_ADCCLKConfig>

	/* Enable peripheral clocks ***********************************************/
	RCC_APB2PeriphClockCmd(IRx_SENSOR_RCC_GPIO, ENABLE);
 8003b82:	2101      	movs	r1, #1
 8003b84:	2004      	movs	r0, #4
 8003b86:	f7fe f993 	bl	8001eb0 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(IRx_SENSOR_RCC_ADC, ENABLE);
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003b90:	f7fe f98e 	bl	8001eb0 <RCC_APB2PeriphClockCmd>
	RCC_AHBPeriphClockCmd(IRx_SENSOR_RCC_DMA, ENABLE);
 8003b94:	2101      	movs	r1, #1
 8003b96:	2001      	movs	r0, #1
 8003b98:	f7fe f96c 	bl	8001e74 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = IR1_SENSOR_PIN | IR2_SENSOR_PIN |
 8003b9c:	231f      	movs	r3, #31
 8003b9e:	873b      	strh	r3, [r7, #56]	; 0x38
								  IR3_SENSOR_PIN | IR4_SENSOR_PIN |
								  IR5_SENSOR_PIN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	GPIO_Init(IRx_SENSOR_PORT, &GPIO_InitStructure);
 8003ba6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003baa:	4619      	mov	r1, r3
 8003bac:	4845      	ldr	r0, [pc, #276]	; (8003cc4 <OpticalSensor_Init+0x154>)
 8003bae:	f7fd ff09 	bl	80019c4 <GPIO_Init>

	/* ADC De-initialization ***************************************************/
	ADC_DeInit(IRx_SENSOR);
 8003bb2:	4845      	ldr	r0, [pc, #276]	; (8003cc8 <OpticalSensor_Init+0x158>)
 8003bb4:	f7fd fb48 	bl	8001248 <ADC_DeInit>

	/* Initialize ADC structure */
	ADC_StructInit(&ADC_InitStructure);
 8003bb8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fd fbcf 	bl	8001360 <ADC_StructInit>

	/* Configure the ADC1 in continuous mode with a resolution equal to 12 bits  */
	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 8003bd2:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8003bd6:	647b      	str	r3, [r7, #68]	; 0x44
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	64bb      	str	r3, [r7, #72]	; 0x48
	ADC_InitStructure.ADC_NbrOfChannel = 5;
 8003bdc:	2305      	movs	r3, #5
 8003bde:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	ADC_Init(IRx_SENSOR, &ADC_InitStructure);
 8003be2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003be6:	4619      	mov	r1, r3
 8003be8:	4837      	ldr	r0, [pc, #220]	; (8003cc8 <OpticalSensor_Init+0x158>)
 8003bea:	f7fd fb67 	bl	80012bc <ADC_Init>

	/* ADC1 regular channels configuration */
	ADC_RegularChannelConfig(IRx_SENSOR, ADC_Channel_0, 1, ADC_SampleTime_239Cycles5);
 8003bee:	2307      	movs	r3, #7
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	4834      	ldr	r0, [pc, #208]	; (8003cc8 <OpticalSensor_Init+0x158>)
 8003bf6:	f7fd fc6b 	bl	80014d0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(IRx_SENSOR, ADC_Channel_1, 2, ADC_SampleTime_239Cycles5);
 8003bfa:	2307      	movs	r3, #7
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	2101      	movs	r1, #1
 8003c00:	4831      	ldr	r0, [pc, #196]	; (8003cc8 <OpticalSensor_Init+0x158>)
 8003c02:	f7fd fc65 	bl	80014d0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(IRx_SENSOR, ADC_Channel_2, 3, ADC_SampleTime_239Cycles5);
 8003c06:	2307      	movs	r3, #7
 8003c08:	2203      	movs	r2, #3
 8003c0a:	2102      	movs	r1, #2
 8003c0c:	482e      	ldr	r0, [pc, #184]	; (8003cc8 <OpticalSensor_Init+0x158>)
 8003c0e:	f7fd fc5f 	bl	80014d0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(IRx_SENSOR, ADC_Channel_3, 4, ADC_SampleTime_239Cycles5);
 8003c12:	2307      	movs	r3, #7
 8003c14:	2204      	movs	r2, #4
 8003c16:	2103      	movs	r1, #3
 8003c18:	482b      	ldr	r0, [pc, #172]	; (8003cc8 <OpticalSensor_Init+0x158>)
 8003c1a:	f7fd fc59 	bl	80014d0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(IRx_SENSOR, ADC_Channel_4, 5, ADC_SampleTime_239Cycles5);
 8003c1e:	2307      	movs	r3, #7
 8003c20:	2205      	movs	r2, #5
 8003c22:	2104      	movs	r1, #4
 8003c24:	4828      	ldr	r0, [pc, #160]	; (8003cc8 <OpticalSensor_Init+0x158>)
 8003c26:	f7fd fc53 	bl	80014d0 <ADC_RegularChannelConfig>

	/* Enable the ADC peripheral */
	ADC_Cmd(IRx_SENSOR, ENABLE);
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	4826      	ldr	r0, [pc, #152]	; (8003cc8 <OpticalSensor_Init+0x158>)
 8003c2e:	f7fd fbb2 	bl	8001396 <ADC_Cmd>

	/* Enable ADC_DMA */
	ADC_DMACmd(IRx_SENSOR, ENABLE);
 8003c32:	2101      	movs	r1, #1
 8003c34:	4824      	ldr	r0, [pc, #144]	; (8003cc8 <OpticalSensor_Init+0x158>)
 8003c36:	f7fd fbc9 	bl	80013cc <ADC_DMACmd>

	/* Enable ADC1 reset calibration register */
	ADC_ResetCalibration(IRx_SENSOR);
 8003c3a:	4823      	ldr	r0, [pc, #140]	; (8003cc8 <OpticalSensor_Init+0x158>)
 8003c3c:	f7fd fbe1 	bl	8001402 <ADC_ResetCalibration>

	/* Check the end of ADC1 reset calibration register */
	while(ADC_GetResetCalibrationStatus(IRx_SENSOR));
 8003c40:	bf00      	nop
 8003c42:	4821      	ldr	r0, [pc, #132]	; (8003cc8 <OpticalSensor_Init+0x158>)
 8003c44:	f7fd fbec 	bl	8001420 <ADC_GetResetCalibrationStatus>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f9      	bne.n	8003c42 <OpticalSensor_Init+0xd2>

	/* Start ADC1 calibration */
	ADC_StartCalibration(IRx_SENSOR);
 8003c4e:	481e      	ldr	r0, [pc, #120]	; (8003cc8 <OpticalSensor_Init+0x158>)
 8003c50:	f7fd fbfd 	bl	800144e <ADC_StartCalibration>

	/* Check the end of ADC1 calibration */
	while(ADC_GetCalibrationStatus(IRx_SENSOR));
 8003c54:	bf00      	nop
 8003c56:	481c      	ldr	r0, [pc, #112]	; (8003cc8 <OpticalSensor_Init+0x158>)
 8003c58:	f7fd fc08 	bl	800146c <ADC_GetCalibrationStatus>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f9      	bne.n	8003c56 <OpticalSensor_Init+0xe6>

	/* Start ADC1 Software Conversion */
	ADC_SoftwareStartConvCmd(IRx_SENSOR, ENABLE);
 8003c62:	2101      	movs	r1, #1
 8003c64:	4818      	ldr	r0, [pc, #96]	; (8003cc8 <OpticalSensor_Init+0x158>)
 8003c66:	f7fd fc18 	bl	800149a <ADC_SoftwareStartConvCmd>

	if (adc_read_mode == ADC_READ_MODE_DMA)
 8003c6a:	79fb      	ldrb	r3, [r7, #7]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d125      	bne.n	8003cbc <OpticalSensor_Init+0x14c>
	{
		/* DMA1 channel1 configuration ----------------------------------------------*/
		DMA_DeInit(DMA1_Channel1);
 8003c70:	4816      	ldr	r0, [pc, #88]	; (8003ccc <OpticalSensor_Init+0x15c>)
 8003c72:	f7fd fcf7 	bl	8001664 <DMA_DeInit>
		DMA_InitStructure.DMA_PeripheralBaseAddr = ADC1_DR_Address;
 8003c76:	4b16      	ldr	r3, [pc, #88]	; (8003cd0 <OpticalSensor_Init+0x160>)
 8003c78:	60fb      	str	r3, [r7, #12]
		DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)&ADCConvertedValue;
 8003c7a:	4b16      	ldr	r3, [pc, #88]	; (8003cd4 <OpticalSensor_Init+0x164>)
 8003c7c:	613b      	str	r3, [r7, #16]
		DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]
		DMA_InitStructure.DMA_BufferSize = 5;
 8003c82:	2305      	movs	r3, #5
 8003c84:	61bb      	str	r3, [r7, #24]
		DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8003c86:	2300      	movs	r3, #0
 8003c88:	61fb      	str	r3, [r7, #28]
		DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8003c8a:	2380      	movs	r3, #128	; 0x80
 8003c8c:	623b      	str	r3, [r7, #32]
		DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8003c8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24
		DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8003c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c98:	62bb      	str	r3, [r7, #40]	; 0x28
		DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8003c9a:	2320      	movs	r3, #32
 8003c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
		DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8003c9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ca2:	633b      	str	r3, [r7, #48]	; 0x30
		DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	637b      	str	r3, [r7, #52]	; 0x34
		DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 8003ca8:	f107 030c 	add.w	r3, r7, #12
 8003cac:	4619      	mov	r1, r3
 8003cae:	4807      	ldr	r0, [pc, #28]	; (8003ccc <OpticalSensor_Init+0x15c>)
 8003cb0:	f7fd fd94 	bl	80017dc <DMA_Init>

		/* Enable DMA1 channel1 */
		DMA_Cmd(DMA1_Channel1, ENABLE);
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	4805      	ldr	r0, [pc, #20]	; (8003ccc <OpticalSensor_Init+0x15c>)
 8003cb8:	f7fd fdce 	bl	8001858 <DMA_Cmd>
	}
}
 8003cbc:	bf00      	nop
 8003cbe:	3750      	adds	r7, #80	; 0x50
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40010800 	.word	0x40010800
 8003cc8:	40012400 	.word	0x40012400
 8003ccc:	40020008 	.word	0x40020008
 8003cd0:	4001244c 	.word	0x4001244c
 8003cd4:	20000438 	.word	0x20000438

08003cd8 <OpticalSensor_MeasureUseDMAMode>:
 * @param  None
 * @retval Value of ADC
 */
uint16_t
OpticalSensor_MeasureUseDMAMode(uint8_t irSensID)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	71fb      	strb	r3, [r7, #7]
	if (irSensID >= (sizeof(ADCConvertedValue) / sizeof(ADCConvertedValue[0])))
 8003ce2:	79fb      	ldrb	r3, [r7, #7]
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d901      	bls.n	8003cec <OpticalSensor_MeasureUseDMAMode+0x14>
		return 0;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	e004      	b.n	8003cf6 <OpticalSensor_MeasureUseDMAMode+0x1e>

	return ADCConvertedValue[irSensID];
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	4a04      	ldr	r2, [pc, #16]	; (8003d00 <OpticalSensor_MeasureUseDMAMode+0x28>)
 8003cf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cf4:	b29b      	uxth	r3, r3
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr
 8003d00:	20000438 	.word	0x20000438

08003d04 <SamplingWhite>:
 * @brief  Sampling White line
 * @param  None
 * @retval None
 */
void SamplingWhite(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
	uint32_t sample[IR_SENSOR_MAX] = {0};
 8003d0a:	463b      	mov	r3, r7
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	605a      	str	r2, [r3, #4]
 8003d12:	609a      	str	r2, [r3, #8]
 8003d14:	60da      	str	r2, [r3, #12]
 8003d16:	611a      	str	r2, [r3, #16]

	for(uint8_t i = 0; i < IR_SENSOR_MAX; i++)
 8003d18:	2300      	movs	r3, #0
 8003d1a:	75fb      	strb	r3, [r7, #23]
 8003d1c:	e02d      	b.n	8003d7a <SamplingWhite+0x76>
	{
		for(uint8_t j = 0; j < IRSENSOR_NUM_SAMPLING; j++)
 8003d1e:	2300      	movs	r3, #0
 8003d20:	75bb      	strb	r3, [r7, #22]
 8003d22:	e015      	b.n	8003d50 <SamplingWhite+0x4c>
		{
			sample[i] += OpticalSensor_MeasureUseDMAMode(i);
 8003d24:	7dfb      	ldrb	r3, [r7, #23]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7ff ffd6 	bl	8003cd8 <OpticalSensor_MeasureUseDMAMode>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	4619      	mov	r1, r3
 8003d30:	7dfb      	ldrb	r3, [r7, #23]
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	3318      	adds	r3, #24
 8003d36:	443b      	add	r3, r7
 8003d38:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8003d3c:	7dfb      	ldrb	r3, [r7, #23]
 8003d3e:	440a      	add	r2, r1
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	3318      	adds	r3, #24
 8003d44:	443b      	add	r3, r7
 8003d46:	f843 2c18 	str.w	r2, [r3, #-24]
		for(uint8_t j = 0; j < IRSENSOR_NUM_SAMPLING; j++)
 8003d4a:	7dbb      	ldrb	r3, [r7, #22]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	75bb      	strb	r3, [r7, #22]
 8003d50:	7dbb      	ldrb	r3, [r7, #22]
 8003d52:	2bc7      	cmp	r3, #199	; 0xc7
 8003d54:	d9e6      	bls.n	8003d24 <SamplingWhite+0x20>

		}

		AdcValues_White[i] = sample[i] / IRSENSOR_NUM_SAMPLING;
 8003d56:	7dfb      	ldrb	r3, [r7, #23]
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	3318      	adds	r3, #24
 8003d5c:	443b      	add	r3, r7
 8003d5e:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8003d62:	4a0a      	ldr	r2, [pc, #40]	; (8003d8c <SamplingWhite+0x88>)
 8003d64:	fba2 2303 	umull	r2, r3, r2, r3
 8003d68:	099a      	lsrs	r2, r3, #6
 8003d6a:	7dfb      	ldrb	r3, [r7, #23]
 8003d6c:	b291      	uxth	r1, r2
 8003d6e:	4a08      	ldr	r2, [pc, #32]	; (8003d90 <SamplingWhite+0x8c>)
 8003d70:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i = 0; i < IR_SENSOR_MAX; i++)
 8003d74:	7dfb      	ldrb	r3, [r7, #23]
 8003d76:	3301      	adds	r3, #1
 8003d78:	75fb      	strb	r3, [r7, #23]
 8003d7a:	7dfb      	ldrb	r3, [r7, #23]
 8003d7c:	2b04      	cmp	r3, #4
 8003d7e:	d9ce      	bls.n	8003d1e <SamplingWhite+0x1a>
	}
}
 8003d80:	bf00      	nop
 8003d82:	bf00      	nop
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	51eb851f 	.word	0x51eb851f
 8003d90:	20000444 	.word	0x20000444

08003d94 <SamplingBlack>:
 * @brief  Sampling Black Line
 * @param  None
 * @retval None
 */
void SamplingBlack(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
	uint32_t sample[IR_SENSOR_MAX] = {0};
 8003d9a:	463b      	mov	r3, r7
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	605a      	str	r2, [r3, #4]
 8003da2:	609a      	str	r2, [r3, #8]
 8003da4:	60da      	str	r2, [r3, #12]
 8003da6:	611a      	str	r2, [r3, #16]

	for(uint8_t i = 0; i < IR_SENSOR_MAX; i++)
 8003da8:	2300      	movs	r3, #0
 8003daa:	75fb      	strb	r3, [r7, #23]
 8003dac:	e02d      	b.n	8003e0a <SamplingBlack+0x76>
	{
		for(uint8_t j = 0; j < IRSENSOR_NUM_SAMPLING; j++)
 8003dae:	2300      	movs	r3, #0
 8003db0:	75bb      	strb	r3, [r7, #22]
 8003db2:	e015      	b.n	8003de0 <SamplingBlack+0x4c>
		{
			sample[i] += OpticalSensor_MeasureUseDMAMode(i);
 8003db4:	7dfb      	ldrb	r3, [r7, #23]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff ff8e 	bl	8003cd8 <OpticalSensor_MeasureUseDMAMode>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	7dfb      	ldrb	r3, [r7, #23]
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	3318      	adds	r3, #24
 8003dc6:	443b      	add	r3, r7
 8003dc8:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8003dcc:	7dfb      	ldrb	r3, [r7, #23]
 8003dce:	440a      	add	r2, r1
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	3318      	adds	r3, #24
 8003dd4:	443b      	add	r3, r7
 8003dd6:	f843 2c18 	str.w	r2, [r3, #-24]
		for(uint8_t j = 0; j < IRSENSOR_NUM_SAMPLING; j++)
 8003dda:	7dbb      	ldrb	r3, [r7, #22]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	75bb      	strb	r3, [r7, #22]
 8003de0:	7dbb      	ldrb	r3, [r7, #22]
 8003de2:	2bc7      	cmp	r3, #199	; 0xc7
 8003de4:	d9e6      	bls.n	8003db4 <SamplingBlack+0x20>

		}

		AdcValues_Black[i] = sample[i] / IRSENSOR_NUM_SAMPLING;
 8003de6:	7dfb      	ldrb	r3, [r7, #23]
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	3318      	adds	r3, #24
 8003dec:	443b      	add	r3, r7
 8003dee:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8003df2:	4a0a      	ldr	r2, [pc, #40]	; (8003e1c <SamplingBlack+0x88>)
 8003df4:	fba2 2303 	umull	r2, r3, r2, r3
 8003df8:	099a      	lsrs	r2, r3, #6
 8003dfa:	7dfb      	ldrb	r3, [r7, #23]
 8003dfc:	b291      	uxth	r1, r2
 8003dfe:	4a08      	ldr	r2, [pc, #32]	; (8003e20 <SamplingBlack+0x8c>)
 8003e00:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i = 0; i < IR_SENSOR_MAX; i++)
 8003e04:	7dfb      	ldrb	r3, [r7, #23]
 8003e06:	3301      	adds	r3, #1
 8003e08:	75fb      	strb	r3, [r7, #23]
 8003e0a:	7dfb      	ldrb	r3, [r7, #23]
 8003e0c:	2b04      	cmp	r3, #4
 8003e0e:	d9ce      	bls.n	8003dae <SamplingBlack+0x1a>
	}
}
 8003e10:	bf00      	nop
 8003e12:	bf00      	nop
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	51eb851f 	.word	0x51eb851f
 8003e20:	20000450 	.word	0x20000450

08003e24 <Calculate_AdcThreshold>:
 * @brief
 * @param  None
 * @retval Threshold of per Adc Values
 */
void Calculate_AdcThreshold(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < IR_SENSOR_MAX; i++) {
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	71fb      	strb	r3, [r7, #7]
 8003e2e:	e015      	b.n	8003e5c <Calculate_AdcThreshold+0x38>
		AdcValuesThreshold[i] = ((AdcValues_White[i] + AdcValues_Black[i]) / 2);
 8003e30:	79fb      	ldrb	r3, [r7, #7]
 8003e32:	4a0f      	ldr	r2, [pc, #60]	; (8003e70 <Calculate_AdcThreshold+0x4c>)
 8003e34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e38:	4619      	mov	r1, r3
 8003e3a:	79fb      	ldrb	r3, [r7, #7]
 8003e3c:	4a0d      	ldr	r2, [pc, #52]	; (8003e74 <Calculate_AdcThreshold+0x50>)
 8003e3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e42:	440b      	add	r3, r1
 8003e44:	0fda      	lsrs	r2, r3, #31
 8003e46:	4413      	add	r3, r2
 8003e48:	105b      	asrs	r3, r3, #1
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	79fb      	ldrb	r3, [r7, #7]
 8003e4e:	b291      	uxth	r1, r2
 8003e50:	4a09      	ldr	r2, [pc, #36]	; (8003e78 <Calculate_AdcThreshold+0x54>)
 8003e52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i = 0; i < IR_SENSOR_MAX; i++) {
 8003e56:	79fb      	ldrb	r3, [r7, #7]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	71fb      	strb	r3, [r7, #7]
 8003e5c:	79fb      	ldrb	r3, [r7, #7]
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d9e6      	bls.n	8003e30 <Calculate_AdcThreshold+0xc>
	}
}
 8003e62:	bf00      	nop
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	20000444 	.word	0x20000444
 8003e74:	20000450 	.word	0x20000450
 8003e78:	2000005c 	.word	0x2000005c

08003e7c <__enable_irq>:
static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	b662      	cpsie	i
 8003e82:	bf00      	nop
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bc80      	pop	{r7}
 8003e88:	4770      	bx	lr

08003e8a <__disable_irq>:
static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 8003e8a:	b480      	push	{r7}
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	b672      	cpsid	i
 8003e90:	bf00      	nop
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bc80      	pop	{r7}
 8003e96:	4770      	bx	lr

08003e98 <Serial_Init>:
 * @brief  Initialize UART and receive buffer register
 * @param  None
 * @retval None
 */
void
Serial_Init(void) {
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
    /* Initializes receive register buffer  */
    bufInit(pBuffDataRx, &serialQueueRx, sizeof(pBuffDataRx[0]), SIZE_BUFF_DATA_RX);
 8003e9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	490a      	ldr	r1, [pc, #40]	; (8003ecc <Serial_Init+0x34>)
 8003ea4:	480a      	ldr	r0, [pc, #40]	; (8003ed0 <Serial_Init+0x38>)
 8003ea6:	f000 f8c7 	bl	8004038 <bufInit>
	UART_RegBufferRx(USART1_IDX, &serialQueueRx);
 8003eaa:	4908      	ldr	r1, [pc, #32]	; (8003ecc <Serial_Init+0x34>)
 8003eac:	2000      	movs	r0, #0
 8003eae:	f000 f813 	bl	8003ed8 <UART_RegBufferRx>

    /* Initializes UART */
    UART_Init(USART1_IDX, BAUD57600, NO_PARITY, ONE_STOP_BIT);
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8003eba:	2000      	movs	r0, #0
 8003ebc:	f000 f81e 	bl	8003efc <UART_Init>
	byRxBufState = (uint8_t)RX_STATE_START_BYTE;
 8003ec0:	4b04      	ldr	r3, [pc, #16]	; (8003ed4 <Serial_Init+0x3c>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	701a      	strb	r2, [r3, #0]
}
 8003ec6:	bf00      	nop
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	2000045c 	.word	0x2000045c
 8003ed0:	2000046c 	.word	0x2000046c
 8003ed4:	2000045a 	.word	0x2000045a

08003ed8 <UART_RegBufferRx>:
 */
void
UART_RegBufferRx(
    uint8_t byUartNumber,
    buffqueue_p pQueueRx
) {
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	6039      	str	r1, [r7, #0]
 8003ee2:	71fb      	strb	r3, [r7, #7]
    g_pUartQueueRx[byUartNumber] = pQueueRx;
 8003ee4:	79fb      	ldrb	r3, [r7, #7]
 8003ee6:	4904      	ldr	r1, [pc, #16]	; (8003ef8 <UART_RegBufferRx+0x20>)
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003eee:	bf00      	nop
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr
 8003ef8:	2000056c 	.word	0x2000056c

08003efc <UART_Init>:
UART_Init(
    uint8_t byUartNumber,
	uint32_t dwBaudRate,
	uint8_t byParity,
	uint8_t byStopBit
) {
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b088      	sub	sp, #32
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6039      	str	r1, [r7, #0]
 8003f04:	4611      	mov	r1, r2
 8003f06:	461a      	mov	r2, r3
 8003f08:	4603      	mov	r3, r0
 8003f0a:	71fb      	strb	r3, [r7, #7]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	71bb      	strb	r3, [r7, #6]
 8003f10:	4613      	mov	r3, r2
 8003f12:	717b      	strb	r3, [r7, #5]
    GPIO_InitTypeDef 	GPIO_InitStructure;
    USART_InitTypeDef 	USART_InitStructure;
    NVIC_InitTypeDef 	NVIC_InitStructure;

    /* Enable clock for FPIO and USART */
    RCC_AHBPeriphClockCmd(USARTx_TX_GPIO_CLK | USARTx_RX_GPIO_CLK, ENABLE);
 8003f14:	2101      	movs	r1, #1
 8003f16:	2004      	movs	r0, #4
 8003f18:	f7fd ffac 	bl	8001e74 <RCC_AHBPeriphClockCmd>
    RCC_APB2PeriphClockCmd(USARTx_CLK, ENABLE);
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003f22:	f7fd ffc5 	bl	8001eb0 <RCC_APB2PeriphClockCmd>

    /* USARTx Tx pin setup */
    GPIO_InitStructure.GPIO_Pin = USARTx_TX_PIN;
 8003f26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f2a:	83bb      	strh	r3, [r7, #28]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8003f2c:	2318      	movs	r3, #24
 8003f2e:	77fb      	strb	r3, [r7, #31]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003f30:	2303      	movs	r3, #3
 8003f32:	77bb      	strb	r3, [r7, #30]
    GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStructure);
 8003f34:	f107 031c 	add.w	r3, r7, #28
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4821      	ldr	r0, [pc, #132]	; (8003fc0 <UART_Init+0xc4>)
 8003f3c:	f7fd fd42 	bl	80019c4 <GPIO_Init>

    /* USARTx Rx pin setup */
	GPIO_InitStructure.GPIO_Pin = USARTx_RX_PIN;
 8003f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f44:	83bb      	strh	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8003f46:	2348      	movs	r3, #72	; 0x48
 8003f48:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStructure);
 8003f4a:	f107 031c 	add.w	r3, r7, #28
 8003f4e:	4619      	mov	r1, r3
 8003f50:	481b      	ldr	r0, [pc, #108]	; (8003fc0 <UART_Init+0xc4>)
 8003f52:	f7fd fd37 	bl	80019c4 <GPIO_Init>

    /* USART setup */
    USART_InitStructure.USART_BaudRate = dwBaudRate;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	60fb      	str	r3, [r7, #12]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	827b      	strh	r3, [r7, #18]
    USART_InitStructure.USART_Parity = USART_Parity_No;
 8003f62:	2300      	movs	r3, #0
 8003f64:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8003f66:	2300      	movs	r3, #0
 8003f68:	833b      	strh	r3, [r7, #24]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003f6a:	230c      	movs	r3, #12
 8003f6c:	82fb      	strh	r3, [r7, #22]
    USART_Init(USARTx_INSTANCE, &USART_InitStructure);
 8003f6e:	f107 030c 	add.w	r3, r7, #12
 8003f72:	4619      	mov	r1, r3
 8003f74:	4813      	ldr	r0, [pc, #76]	; (8003fc4 <UART_Init+0xc8>)
 8003f76:	f7fe fb69 	bl	800264c <USART_Init>

    /* Enable USARTx Receive and Transmit interrupts */
    USART_ITConfig(USARTx_INSTANCE, USART_IT_RXNE, ENABLE);
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f240 5125 	movw	r1, #1317	; 0x525
 8003f80:	4810      	ldr	r0, [pc, #64]	; (8003fc4 <UART_Init+0xc8>)
 8003f82:	f7fe fc3c 	bl	80027fe <USART_ITConfig>
    USART_ITConfig(USARTx_INSTANCE, USART_IT_TXE, DISABLE);
 8003f86:	2200      	movs	r2, #0
 8003f88:	f240 7127 	movw	r1, #1831	; 0x727
 8003f8c:	480d      	ldr	r0, [pc, #52]	; (8003fc4 <UART_Init+0xc8>)
 8003f8e:	f7fe fc36 	bl	80027fe <USART_ITConfig>

	/* NVIC configuration */
    /* Configure the NVIC Preemption Priority Bits */
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
 8003f92:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8003f96:	f7fd f8e3 	bl	8001160 <NVIC_PriorityGroupConfig>

	/* Enable the USARTx Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 8003f9a:	2325      	movs	r3, #37	; 0x25
 8003f9c:	723b      	strb	r3, [r7, #8]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	72bb      	strb	r3, [r7, #10]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&NVIC_InitStructure);
 8003fa6:	f107 0308 	add.w	r3, r7, #8
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fd f8ea 	bl	8001184 <NVIC_Init>

	/* Enable USART */
	USART_Cmd(USARTx_INSTANCE, ENABLE);
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	4804      	ldr	r0, [pc, #16]	; (8003fc4 <UART_Init+0xc8>)
 8003fb4:	f7fe fc04 	bl	80027c0 <USART_Cmd>
}
 8003fb8:	bf00      	nop
 8003fba:	3720      	adds	r7, #32
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40010800 	.word	0x40010800
 8003fc4:	40013800 	.word	0x40013800

08003fc8 <USART1_IRQHandler>:
 *   This parameter can be one of the following values:
 *   UART1_IDX, UART2_IDX
 * @retval None
 */
void
USART1_IRQHandler(void) {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
	__disable_irq();
 8003fce:	f7ff ff5c 	bl	8003e8a <__disable_irq>
    if (USART_GetITStatus(USARTx_INSTANCE, USART_IT_RXNE) == SET) {
 8003fd2:	f240 5125 	movw	r1, #1317	; 0x525
 8003fd6:	480f      	ldr	r0, [pc, #60]	; (8004014 <USART1_IRQHandler+0x4c>)
 8003fd8:	f7fe fc67 	bl	80028aa <USART_GetITStatus>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d112      	bne.n	8004008 <USART1_IRQHandler+0x40>
        buffqueue_p pUartBuffQueueRx = (buffqueue_p) g_pUartQueueRx[0];
 8003fe2:	4b0d      	ldr	r3, [pc, #52]	; (8004018 <USART1_IRQHandler+0x50>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	607b      	str	r3, [r7, #4]
        uint8_t byReceiverData = USART_ReceiveData(USARTx_INSTANCE);
 8003fe8:	480a      	ldr	r0, [pc, #40]	; (8004014 <USART1_IRQHandler+0x4c>)
 8003fea:	f7fe fc4f 	bl	800288c <USART_ReceiveData>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	70fb      	strb	r3, [r7, #3]
        if (bufEnDat(pUartBuffQueueRx, &byReceiverData) == ERR_BUF_FULL) {}
 8003ff4:	1cfb      	adds	r3, r7, #3
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f863 	bl	80040c4 <bufEnDat>
        USART_ClearITPendingBit(USARTx_INSTANCE, USART_IT_RXNE);
 8003ffe:	f240 5125 	movw	r1, #1317	; 0x525
 8004002:	4804      	ldr	r0, [pc, #16]	; (8004014 <USART1_IRQHandler+0x4c>)
 8004004:	f7fe fcab 	bl	800295e <USART_ClearITPendingBit>
    }
    __enable_irq();
 8004008:	f7ff ff38 	bl	8003e7c <__enable_irq>
}
 800400c:	bf00      	nop
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40013800 	.word	0x40013800
 8004018:	2000056c 	.word	0x2000056c

0800401c <__enable_irq>:
static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
 8004020:	b662      	cpsie	i
 8004022:	bf00      	nop
 8004024:	46bd      	mov	sp, r7
 8004026:	bc80      	pop	{r7}
 8004028:	4770      	bx	lr

0800402a <__disable_irq>:
static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 800402a:	b480      	push	{r7}
 800402c:	af00      	add	r7, sp, #0
 800402e:	b672      	cpsid	i
 8004030:	bf00      	nop
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr

08004038 <bufInit>:
bufInit(
    void *pBuffer,
    buffqueue_p pQueue,
	uint8_t sizeofElement,
	uint16_t numberOfElement
) {
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	4611      	mov	r1, r2
 8004044:	461a      	mov	r2, r3
 8004046:	460b      	mov	r3, r1
 8004048:	71fb      	strb	r3, [r7, #7]
 800404a:	4613      	mov	r3, r2
 800404c:	80bb      	strh	r3, [r7, #4]
    pQueue->wSize = numberOfElement;
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	88ba      	ldrh	r2, [r7, #4]
 8004052:	801a      	strh	r2, [r3, #0]
    pQueue->byItemSize = sizeofElement;
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	79fa      	ldrb	r2, [r7, #7]
 8004058:	711a      	strb	r2, [r3, #4]
    pQueue->pData = (uint8_t *)pBuffer;
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	60da      	str	r2, [r3, #12]
    bufFlush(pQueue);
 8004060:	68b8      	ldr	r0, [r7, #8]
 8004062:	f000 f816 	bl	8004092 <bufFlush>
}
 8004066:	bf00      	nop
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <bufIsFull>:
 * @return 1 if full; 0 otherwise
 */
uint8_t
bufIsFull(
    buffqueue_p pQueue
) {
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
    return (pQueue->wCountEle >= pQueue->wSize);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	885a      	ldrh	r2, [r3, #2]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	bf2c      	ite	cs
 8004082:	2301      	movcs	r3, #1
 8004084:	2300      	movcc	r3, #0
 8004086:	b2db      	uxtb	r3, r3
}
 8004088:	4618      	mov	r0, r3
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	bc80      	pop	{r7}
 8004090:	4770      	bx	lr

08004092 <bufFlush>:
 * @retval None
 */
void
bufFlush(
    buffqueue_p pQueue
) {
 8004092:	b580      	push	{r7, lr}
 8004094:	b082      	sub	sp, #8
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
    pQueue->wHeadIndex = 0;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	80da      	strh	r2, [r3, #6]
    pQueue->wTailIndex = 0;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	811a      	strh	r2, [r3, #8]
    pQueue->wCountEle = 0;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	805a      	strh	r2, [r3, #2]
    
    memsetl(pQueue->pData, 0, pQueue->wSize);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68d8      	ldr	r0, [r3, #12]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	881b      	ldrh	r3, [r3, #0]
 80040b4:	461a      	mov	r2, r3
 80040b6:	2100      	movs	r1, #0
 80040b8:	f000 f854 	bl	8004164 <memsetl>
}
 80040bc:	bf00      	nop
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <bufEnDat>:
 */
uint8_t
bufEnDat(
    buffqueue_p pQueue,
	uint8_t *pReceiverData
) {
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
	__disable_irq();
 80040ce:	f7ff ffac 	bl	800402a <__disable_irq>
    
    /* Place data in buffer */
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 80040d2:	2300      	movs	r3, #0
 80040d4:	73fb      	strb	r3, [r7, #15]
 80040d6:	e021      	b.n	800411c <bufEnDat+0x58>
        pQueue->pData[pQueue->wHeadIndex] = pReceiverData[i];
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	441a      	add	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	88c9      	ldrh	r1, [r1, #6]
 80040e6:	440b      	add	r3, r1
 80040e8:	7812      	ldrb	r2, [r2, #0]
 80040ea:	701a      	strb	r2, [r3, #0]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1)  & (pQueue->wSize - 1));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	88db      	ldrh	r3, [r3, #6]
 80040f0:	3301      	adds	r3, #1
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	b21a      	sxth	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	b21b      	sxth	r3, r3
 8004100:	4013      	ands	r3, r2
 8004102:	b21b      	sxth	r3, r3
 8004104:	b29a      	uxth	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	80da      	strh	r2, [r3, #6]
        pQueue->wCountEle++;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	885b      	ldrh	r3, [r3, #2]
 800410e:	3301      	adds	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8004116:	7bfb      	ldrb	r3, [r7, #15]
 8004118:	3301      	adds	r3, #1
 800411a:	73fb      	strb	r3, [r7, #15]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	791b      	ldrb	r3, [r3, #4]
 8004120:	7bfa      	ldrb	r2, [r7, #15]
 8004122:	429a      	cmp	r2, r3
 8004124:	d3d8      	bcc.n	80040d8 <bufEnDat+0x14>
    }
    
    if (bufIsFull(pQueue)) {
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7ff ffa1 	bl	800406e <bufIsFull>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d011      	beq.n	8004156 <bufEnDat+0x92>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wTailIndex = (pQueue->wTailIndex + pQueue->byItemSize) & (pQueue->wSize - 1);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	891a      	ldrh	r2, [r3, #8]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	791b      	ldrb	r3, [r3, #4]
 800413a:	b29b      	uxth	r3, r3
 800413c:	4413      	add	r3, r2
 800413e:	b29b      	uxth	r3, r3
 8004140:	b21a      	sxth	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	3b01      	subs	r3, #1
 8004148:	b29b      	uxth	r3, r3
 800414a:	b21b      	sxth	r3, r3
 800414c:	4013      	ands	r3, r2
 800414e:	b21b      	sxth	r3, r3
 8004150:	b29a      	uxth	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	811a      	strh	r2, [r3, #8]
    }
    
    __enable_irq();
 8004156:	f7ff ff61 	bl	800401c <__enable_irq>
    return ERR_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <memsetl>:
void
memsetl(
	uint8_t *dst,
	uint8_t value,
	uint16_t size
) {
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	460b      	mov	r3, r1
 800416e:	70fb      	strb	r3, [r7, #3]
 8004170:	4613      	mov	r3, r2
 8004172:	803b      	strh	r3, [r7, #0]
    while (size--) {
 8004174:	e004      	b.n	8004180 <memsetl+0x1c>
        *dst++ = value;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	607a      	str	r2, [r7, #4]
 800417c:	78fa      	ldrb	r2, [r7, #3]
 800417e:	701a      	strb	r2, [r3, #0]
    while (size--) {
 8004180:	883b      	ldrh	r3, [r7, #0]
 8004182:	1e5a      	subs	r2, r3, #1
 8004184:	803a      	strh	r2, [r7, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1f5      	bne.n	8004176 <memsetl+0x12>
    }    
}
 800418a:	bf00      	nop
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	bc80      	pop	{r7}
 8004194:	4770      	bx	lr

08004196 <main>:

int timeBuffer = 0;
int ADC_Read[5];
int chothang = 0;
int main(void)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	af00      	add	r7, sp, #0
    // Initialize modules
    AppInitCommon();
 800419a:	f000 f803 	bl	80041a4 <AppInitCommon>
    while (1)
    {
        /* Process tasks */
//        processTimerScheduler();
//        processEventScheduler();
    		LineFollow_Process();
 800419e:	f000 f8c3 	bl	8004328 <LineFollow_Process>
 80041a2:	e7fc      	b.n	800419e <main+0x8>

080041a4 <AppInitCommon>:
 * @param  None
 * @retval None
 */
static
void AppInitCommon(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
    // Initializes system clock 48 MHz
	SystemInit();
 80041a8:	f7fc feae 	bl	8000f08 <SystemInit>
    SystemCoreClockUpdate();
 80041ac:	f7fc fee0 	bl	8000f70 <SystemCoreClockUpdate>

    // Initializes system tick
    TimerInit();
 80041b0:	f7ff fbf4 	bl	800399c <TimerInit>

    // Initializes scheduler event
    EventSchedulerInit(AppStateManager);
 80041b4:	4809      	ldr	r0, [pc, #36]	; (80041dc <AppInitCommon+0x38>)
 80041b6:	f7ff fb73 	bl	80038a0 <EventSchedulerInit>

    // Initializes buttons
    EventButton_Init();
 80041ba:	f7fe fdab 	bl	8002d14 <EventButton_Init>

    // Initializes buzzer
    BuzzerControl_Init();
 80041be:	f7fe fe71 	bl	8002ea4 <BuzzerControl_Init>

    // Initializes led
    LedControl_Init();
 80041c2:	f7fe fed3 	bl	8002f6c <LedControl_Init>

    // Initializes IR sensor
    OpticalSensor_Init(ADC_READ_MODE_DMA);
 80041c6:	2000      	movs	r0, #0
 80041c8:	f7ff fcd2 	bl	8003b70 <OpticalSensor_Init>
    // Initializes lcd
//    LCD_Init();
//    LCD_direction(1);

    // Initializes motor
    MotorControl_Init();
 80041cc:	f7ff f8ca 	bl	8003364 <MotorControl_Init>

    // Initializes encoder
    Encoder_Init();
 80041d0:	f7fe feea 	bl	8002fa8 <Encoder_Init>

    // Initializes UART peripheral
	Serial_Init();
 80041d4:	f7ff fe60 	bl	8003e98 <Serial_Init>
//	LCD_Init();
//	LCD_direction(1);

//	LCD_ClearCursor(50, 210, 200, 240, WHITE);
//	Gui_StrCenter(100, 100, BLACK, WHITE, (uint8_t*)"I Love Embedded Programming", 16, 1);
}
 80041d8:	bf00      	nop
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	080041ed 	.word	0x080041ed

080041e0 <LoadConfiguration>:
 * @param  None
 * @retval None
 */
void
LoadConfiguration(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0

}
 80041e4:	bf00      	nop
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bc80      	pop	{r7}
 80041ea:	4770      	bx	lr

080041ec <AppStateManager>:
 * @retval None
 */
static
void AppStateManager(
    uint8_t event)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	4603      	mov	r3, r0
 80041f4:	71fb      	strb	r3, [r7, #7]
    switch (GetStateApp())
 80041f6:	f000 f831 	bl	800425c <GetStateApp>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d014      	beq.n	800422a <AppStateManager+0x3e>
 8004200:	2b02      	cmp	r3, #2
 8004202:	dc14      	bgt.n	800422e <AppStateManager+0x42>
 8004204:	2b00      	cmp	r3, #0
 8004206:	d002      	beq.n	800420e <AppStateManager+0x22>
 8004208:	2b01      	cmp	r3, #1
 800420a:	d009      	beq.n	8004220 <AppStateManager+0x34>

        case STATE_APP_RESET:
            break;

        default:
            break;
 800420c:	e00f      	b.n	800422e <AppStateManager+0x42>
            if (event == EVENT_APP_INIT)
 800420e:	79fb      	ldrb	r3, [r7, #7]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d10e      	bne.n	8004232 <AppStateManager+0x46>
                LoadConfiguration();
 8004214:	f7ff ffe4 	bl	80041e0 <LoadConfiguration>
                SetStateApp(STATE_APP_IDLE);
 8004218:	2001      	movs	r0, #1
 800421a:	f000 f80f 	bl	800423c <SetStateApp>
            break;
 800421e:	e008      	b.n	8004232 <AppStateManager+0x46>
            DeviceStateMachine(event);
 8004220:	79fb      	ldrb	r3, [r7, #7]
 8004222:	4618      	mov	r0, r3
 8004224:	f000 f824 	bl	8004270 <DeviceStateMachine>
            break;
 8004228:	e004      	b.n	8004234 <AppStateManager+0x48>
            break;
 800422a:	bf00      	nop
 800422c:	e002      	b.n	8004234 <AppStateManager+0x48>
            break;
 800422e:	bf00      	nop
 8004230:	e000      	b.n	8004234 <AppStateManager+0x48>
            break;
 8004232:	bf00      	nop
    }
}
 8004234:	bf00      	nop
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <SetStateApp>:
 * @retval None
 */
static
void SetStateApp(
    state_app_t state
) {
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	4603      	mov	r3, r0
 8004244:	71fb      	strb	r3, [r7, #7]
    /* Set state of application */
    eCurrentState = state;
 8004246:	4a04      	ldr	r2, [pc, #16]	; (8004258 <SetStateApp+0x1c>)
 8004248:	79fb      	ldrb	r3, [r7, #7]
 800424a:	7013      	strb	r3, [r2, #0]
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	bc80      	pop	{r7}
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	20000570 	.word	0x20000570

0800425c <GetStateApp>:
 * @brief  Get state of application
 * @param  None
 * @retval State of application
 */
static
state_app_t GetStateApp(void) {
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
    /* Return state of application */
    return eCurrentState;
 8004260:	4b02      	ldr	r3, [pc, #8]	; (800426c <GetStateApp+0x10>)
 8004262:	781b      	ldrb	r3, [r3, #0]
}
 8004264:	4618      	mov	r0, r3
 8004266:	46bd      	mov	sp, r7
 8004268:	bc80      	pop	{r7}
 800426a:	4770      	bx	lr
 800426c:	20000570 	.word	0x20000570

08004270 <DeviceStateMachine>:
 * @retval None
 */
void
DeviceStateMachine(
    uint8_t event
) {
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	4603      	mov	r3, r0
 8004278:	71fb      	strb	r3, [r7, #7]
    switch (event)
 800427a:	79fb      	ldrb	r3, [r7, #7]
 800427c:	3b08      	subs	r3, #8
 800427e:	2b0e      	cmp	r3, #14
 8004280:	d831      	bhi.n	80042e6 <DeviceStateMachine+0x76>
 8004282:	a201      	add	r2, pc, #4	; (adr r2, 8004288 <DeviceStateMachine+0x18>)
 8004284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004288:	080042c5 	.word	0x080042c5
 800428c:	080042cb 	.word	0x080042cb
 8004290:	080042d1 	.word	0x080042d1
 8004294:	080042e7 	.word	0x080042e7
 8004298:	080042e7 	.word	0x080042e7
 800429c:	080042e7 	.word	0x080042e7
 80042a0:	080042d7 	.word	0x080042d7
 80042a4:	080042e7 	.word	0x080042e7
 80042a8:	080042e7 	.word	0x080042e7
 80042ac:	080042e7 	.word	0x080042e7
 80042b0:	080042df 	.word	0x080042df
 80042b4:	080042e7 	.word	0x080042e7
 80042b8:	080042e7 	.word	0x080042e7
 80042bc:	080042e7 	.word	0x080042e7
 80042c0:	080042e7 	.word	0x080042e7
    {
		case EVENT_OF_BUTTON_BACK_PRESS_LOGIC:
			SamplingBlack();
 80042c4:	f7ff fd66 	bl	8003d94 <SamplingBlack>
			break;
 80042c8:	e00e      	b.n	80042e8 <DeviceStateMachine+0x78>

        case EVENT_OF_BUTTON_NEXT_PRESS_LOGIC:
        	SamplingWhite();
 80042ca:	f7ff fd1b 	bl	8003d04 <SamplingWhite>
            break;
 80042ce:	e00b      	b.n	80042e8 <DeviceStateMachine+0x78>

        case EVENT_OF_BUTTON_OK_PRESS_LOGIC:
        	Calculate_AdcThreshold();
 80042d0:	f7ff fda8 	bl	8003e24 <Calculate_AdcThreshold>
            break;
 80042d4:	e008      	b.n	80042e8 <DeviceStateMachine+0x78>

        case EVENT_OF_BUTTON_OK_PRESS_2_TIMES:
        	statePID = true;
 80042d6:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <DeviceStateMachine+0x80>)
 80042d8:	2201      	movs	r2, #1
 80042da:	701a      	strb	r2, [r3, #0]
			break;
 80042dc:	e004      	b.n	80042e8 <DeviceStateMachine+0x78>

        case EVENT_OF_BUTTON_OK_PRESS_3_TIMES:
        	statePID = false;
 80042de:	4b04      	ldr	r3, [pc, #16]	; (80042f0 <DeviceStateMachine+0x80>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	701a      	strb	r2, [r3, #0]
			break;
 80042e4:	e000      	b.n	80042e8 <DeviceStateMachine+0x78>

        case EVENT_OF_BUTTON_NEXT_PRESS_2_TIMES:
			break;

        default:
            break;
 80042e6:	bf00      	nop
    }
}
 80042e8:	bf00      	nop
 80042ea:	3708      	adds	r7, #8
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	2000006c 	.word	0x2000006c

080042f4 <CalculatorTime>:
 *@brief	Calculator time button
 *@param	None
 *@retval	None
 */
uint32_t CalculatorTime(uint32_t dwTimeInit, uint32_t dwTimeCurrent)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
	uint32_t dwTimeTotal;

	if(dwTimeCurrent >= dwTimeInit){
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	429a      	cmp	r2, r3
 8004304:	d304      	bcc.n	8004310 <CalculatorTime+0x1c>

		dwTimeTotal = dwTimeCurrent - dwTimeInit;
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	e004      	b.n	800431a <CalculatorTime+0x26>
	}
	else{
		dwTimeTotal = 0xFFFFFFFFU + dwTimeCurrent - dwTimeInit;
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	3b01      	subs	r3, #1
 8004318:	60fb      	str	r3, [r7, #12]
	}

	return dwTimeTotal;
 800431a:	68fb      	ldr	r3, [r7, #12]
}
 800431c:	4618      	mov	r0, r3
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	bc80      	pop	{r7}
 8004324:	4770      	bx	lr
	...

08004328 <LineFollow_Process>:
	while (CalculatorTime(startTime, GetMilSecTick()) <= milisecond);
}

static
void LineFollow_Process(void)
{
 8004328:	b598      	push	{r3, r4, r7, lr}
 800432a:	af00      	add	r7, sp, #0
	if (CalculatorTime(TimeStart, GetMilSecTick()) > 10) {
 800432c:	4b0c      	ldr	r3, [pc, #48]	; (8004360 <LineFollow_Process+0x38>)
 800432e:	681c      	ldr	r4, [r3, #0]
 8004330:	f7ff fc06 	bl	8003b40 <GetMilSecTick>
 8004334:	4603      	mov	r3, r0
 8004336:	4619      	mov	r1, r3
 8004338:	4620      	mov	r0, r4
 800433a:	f7ff ffdb 	bl	80042f4 <CalculatorTime>
 800433e:	4603      	mov	r3, r0
 8004340:	2b0a      	cmp	r3, #10
 8004342:	d90a      	bls.n	800435a <LineFollow_Process+0x32>
		if(statePID == true) {
 8004344:	4b07      	ldr	r3, [pc, #28]	; (8004364 <LineFollow_Process+0x3c>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <LineFollow_Process+0x28>
			MotorControl_PID();
 800434c:	f7ff fa88 	bl	8003860 <MotorControl_PID>
		}

		TimeStart = GetMilSecTick();
 8004350:	f7ff fbf6 	bl	8003b40 <GetMilSecTick>
 8004354:	4603      	mov	r3, r0
 8004356:	4a02      	ldr	r2, [pc, #8]	; (8004360 <LineFollow_Process+0x38>)
 8004358:	6013      	str	r3, [r2, #0]
	}
}
 800435a:	bf00      	nop
 800435c:	bd98      	pop	{r3, r4, r7, pc}
 800435e:	bf00      	nop
 8004360:	20000574 	.word	0x20000574
 8004364:	2000006c 	.word	0x2000006c

08004368 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004368:	480d      	ldr	r0, [pc, #52]	; (80043a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800436a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800436c:	f7fc fdcc 	bl	8000f08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004370:	480c      	ldr	r0, [pc, #48]	; (80043a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8004372:	490d      	ldr	r1, [pc, #52]	; (80043a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004374:	4a0d      	ldr	r2, [pc, #52]	; (80043ac <LoopForever+0xe>)
  movs r3, #0
 8004376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004378:	e002      	b.n	8004380 <LoopCopyDataInit>

0800437a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800437a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800437c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800437e:	3304      	adds	r3, #4

08004380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004384:	d3f9      	bcc.n	800437a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004386:	4a0a      	ldr	r2, [pc, #40]	; (80043b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004388:	4c0a      	ldr	r4, [pc, #40]	; (80043b4 <LoopForever+0x16>)
  movs r3, #0
 800438a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800438c:	e001      	b.n	8004392 <LoopFillZerobss>

0800438e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800438e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004390:	3204      	adds	r2, #4

08004392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004394:	d3fb      	bcc.n	800438e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004396:	f000 f817 	bl	80043c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800439a:	f7ff fefc 	bl	8004196 <main>

0800439e <LoopForever>:

LoopForever:
  b LoopForever
 800439e:	e7fe      	b.n	800439e <LoopForever>
  ldr   r0, =_estack
 80043a0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80043a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043a8:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 80043ac:	08005290 	.word	0x08005290
  ldr r2, =_sbss
 80043b0:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 80043b4:	200006b0 	.word	0x200006b0

080043b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80043b8:	e7fe      	b.n	80043b8 <ADC1_2_IRQHandler>
	...

080043bc <__errno>:
 80043bc:	4b01      	ldr	r3, [pc, #4]	; (80043c4 <__errno+0x8>)
 80043be:	6818      	ldr	r0, [r3, #0]
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	200000bc 	.word	0x200000bc

080043c8 <__libc_init_array>:
 80043c8:	b570      	push	{r4, r5, r6, lr}
 80043ca:	2600      	movs	r6, #0
 80043cc:	4d0c      	ldr	r5, [pc, #48]	; (8004400 <__libc_init_array+0x38>)
 80043ce:	4c0d      	ldr	r4, [pc, #52]	; (8004404 <__libc_init_array+0x3c>)
 80043d0:	1b64      	subs	r4, r4, r5
 80043d2:	10a4      	asrs	r4, r4, #2
 80043d4:	42a6      	cmp	r6, r4
 80043d6:	d109      	bne.n	80043ec <__libc_init_array+0x24>
 80043d8:	f000 ff24 	bl	8005224 <_init>
 80043dc:	2600      	movs	r6, #0
 80043de:	4d0a      	ldr	r5, [pc, #40]	; (8004408 <__libc_init_array+0x40>)
 80043e0:	4c0a      	ldr	r4, [pc, #40]	; (800440c <__libc_init_array+0x44>)
 80043e2:	1b64      	subs	r4, r4, r5
 80043e4:	10a4      	asrs	r4, r4, #2
 80043e6:	42a6      	cmp	r6, r4
 80043e8:	d105      	bne.n	80043f6 <__libc_init_array+0x2e>
 80043ea:	bd70      	pop	{r4, r5, r6, pc}
 80043ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80043f0:	4798      	blx	r3
 80043f2:	3601      	adds	r6, #1
 80043f4:	e7ee      	b.n	80043d4 <__libc_init_array+0xc>
 80043f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043fa:	4798      	blx	r3
 80043fc:	3601      	adds	r6, #1
 80043fe:	e7f2      	b.n	80043e6 <__libc_init_array+0x1e>
 8004400:	08005288 	.word	0x08005288
 8004404:	08005288 	.word	0x08005288
 8004408:	08005288 	.word	0x08005288
 800440c:	0800528c 	.word	0x0800528c

08004410 <pow>:
 8004410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004414:	4614      	mov	r4, r2
 8004416:	461d      	mov	r5, r3
 8004418:	4680      	mov	r8, r0
 800441a:	4689      	mov	r9, r1
 800441c:	f000 f868 	bl	80044f0 <__ieee754_pow>
 8004420:	4622      	mov	r2, r4
 8004422:	4606      	mov	r6, r0
 8004424:	460f      	mov	r7, r1
 8004426:	462b      	mov	r3, r5
 8004428:	4620      	mov	r0, r4
 800442a:	4629      	mov	r1, r5
 800442c:	f7fc fbaa 	bl	8000b84 <__aeabi_dcmpun>
 8004430:	bbc8      	cbnz	r0, 80044a6 <pow+0x96>
 8004432:	2200      	movs	r2, #0
 8004434:	2300      	movs	r3, #0
 8004436:	4640      	mov	r0, r8
 8004438:	4649      	mov	r1, r9
 800443a:	f7fc fb71 	bl	8000b20 <__aeabi_dcmpeq>
 800443e:	b1b8      	cbz	r0, 8004470 <pow+0x60>
 8004440:	2200      	movs	r2, #0
 8004442:	2300      	movs	r3, #0
 8004444:	4620      	mov	r0, r4
 8004446:	4629      	mov	r1, r5
 8004448:	f7fc fb6a 	bl	8000b20 <__aeabi_dcmpeq>
 800444c:	2800      	cmp	r0, #0
 800444e:	d141      	bne.n	80044d4 <pow+0xc4>
 8004450:	4620      	mov	r0, r4
 8004452:	4629      	mov	r1, r5
 8004454:	f000 f844 	bl	80044e0 <finite>
 8004458:	b328      	cbz	r0, 80044a6 <pow+0x96>
 800445a:	2200      	movs	r2, #0
 800445c:	2300      	movs	r3, #0
 800445e:	4620      	mov	r0, r4
 8004460:	4629      	mov	r1, r5
 8004462:	f7fc fb67 	bl	8000b34 <__aeabi_dcmplt>
 8004466:	b1f0      	cbz	r0, 80044a6 <pow+0x96>
 8004468:	f7ff ffa8 	bl	80043bc <__errno>
 800446c:	2322      	movs	r3, #34	; 0x22
 800446e:	e019      	b.n	80044a4 <pow+0x94>
 8004470:	4630      	mov	r0, r6
 8004472:	4639      	mov	r1, r7
 8004474:	f000 f834 	bl	80044e0 <finite>
 8004478:	b9c8      	cbnz	r0, 80044ae <pow+0x9e>
 800447a:	4640      	mov	r0, r8
 800447c:	4649      	mov	r1, r9
 800447e:	f000 f82f 	bl	80044e0 <finite>
 8004482:	b1a0      	cbz	r0, 80044ae <pow+0x9e>
 8004484:	4620      	mov	r0, r4
 8004486:	4629      	mov	r1, r5
 8004488:	f000 f82a 	bl	80044e0 <finite>
 800448c:	b178      	cbz	r0, 80044ae <pow+0x9e>
 800448e:	4632      	mov	r2, r6
 8004490:	463b      	mov	r3, r7
 8004492:	4630      	mov	r0, r6
 8004494:	4639      	mov	r1, r7
 8004496:	f7fc fb75 	bl	8000b84 <__aeabi_dcmpun>
 800449a:	2800      	cmp	r0, #0
 800449c:	d0e4      	beq.n	8004468 <pow+0x58>
 800449e:	f7ff ff8d 	bl	80043bc <__errno>
 80044a2:	2321      	movs	r3, #33	; 0x21
 80044a4:	6003      	str	r3, [r0, #0]
 80044a6:	4630      	mov	r0, r6
 80044a8:	4639      	mov	r1, r7
 80044aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044ae:	2200      	movs	r2, #0
 80044b0:	2300      	movs	r3, #0
 80044b2:	4630      	mov	r0, r6
 80044b4:	4639      	mov	r1, r7
 80044b6:	f7fc fb33 	bl	8000b20 <__aeabi_dcmpeq>
 80044ba:	2800      	cmp	r0, #0
 80044bc:	d0f3      	beq.n	80044a6 <pow+0x96>
 80044be:	4640      	mov	r0, r8
 80044c0:	4649      	mov	r1, r9
 80044c2:	f000 f80d 	bl	80044e0 <finite>
 80044c6:	2800      	cmp	r0, #0
 80044c8:	d0ed      	beq.n	80044a6 <pow+0x96>
 80044ca:	4620      	mov	r0, r4
 80044cc:	4629      	mov	r1, r5
 80044ce:	f000 f807 	bl	80044e0 <finite>
 80044d2:	e7c8      	b.n	8004466 <pow+0x56>
 80044d4:	2600      	movs	r6, #0
 80044d6:	4f01      	ldr	r7, [pc, #4]	; (80044dc <pow+0xcc>)
 80044d8:	e7e5      	b.n	80044a6 <pow+0x96>
 80044da:	bf00      	nop
 80044dc:	3ff00000 	.word	0x3ff00000

080044e0 <finite>:
 80044e0:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80044e4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80044e8:	0fc0      	lsrs	r0, r0, #31
 80044ea:	4770      	bx	lr
 80044ec:	0000      	movs	r0, r0
	...

080044f0 <__ieee754_pow>:
 80044f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f4:	b093      	sub	sp, #76	; 0x4c
 80044f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80044fa:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 80044fe:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8004502:	4689      	mov	r9, r1
 8004504:	ea56 0102 	orrs.w	r1, r6, r2
 8004508:	4680      	mov	r8, r0
 800450a:	d111      	bne.n	8004530 <__ieee754_pow+0x40>
 800450c:	1803      	adds	r3, r0, r0
 800450e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8004512:	4152      	adcs	r2, r2
 8004514:	4299      	cmp	r1, r3
 8004516:	4b82      	ldr	r3, [pc, #520]	; (8004720 <__ieee754_pow+0x230>)
 8004518:	4193      	sbcs	r3, r2
 800451a:	f080 84ba 	bcs.w	8004e92 <__ieee754_pow+0x9a2>
 800451e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004522:	4640      	mov	r0, r8
 8004524:	4649      	mov	r1, r9
 8004526:	f7fb fedd 	bl	80002e4 <__adddf3>
 800452a:	4683      	mov	fp, r0
 800452c:	468c      	mov	ip, r1
 800452e:	e06f      	b.n	8004610 <__ieee754_pow+0x120>
 8004530:	4b7c      	ldr	r3, [pc, #496]	; (8004724 <__ieee754_pow+0x234>)
 8004532:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8004536:	429c      	cmp	r4, r3
 8004538:	464d      	mov	r5, r9
 800453a:	4682      	mov	sl, r0
 800453c:	dc06      	bgt.n	800454c <__ieee754_pow+0x5c>
 800453e:	d101      	bne.n	8004544 <__ieee754_pow+0x54>
 8004540:	2800      	cmp	r0, #0
 8004542:	d1ec      	bne.n	800451e <__ieee754_pow+0x2e>
 8004544:	429e      	cmp	r6, r3
 8004546:	dc01      	bgt.n	800454c <__ieee754_pow+0x5c>
 8004548:	d10f      	bne.n	800456a <__ieee754_pow+0x7a>
 800454a:	b172      	cbz	r2, 800456a <__ieee754_pow+0x7a>
 800454c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004550:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004554:	ea55 050a 	orrs.w	r5, r5, sl
 8004558:	d1e1      	bne.n	800451e <__ieee754_pow+0x2e>
 800455a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800455e:	18db      	adds	r3, r3, r3
 8004560:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004564:	4152      	adcs	r2, r2
 8004566:	429d      	cmp	r5, r3
 8004568:	e7d5      	b.n	8004516 <__ieee754_pow+0x26>
 800456a:	2d00      	cmp	r5, #0
 800456c:	da39      	bge.n	80045e2 <__ieee754_pow+0xf2>
 800456e:	4b6e      	ldr	r3, [pc, #440]	; (8004728 <__ieee754_pow+0x238>)
 8004570:	429e      	cmp	r6, r3
 8004572:	dc52      	bgt.n	800461a <__ieee754_pow+0x12a>
 8004574:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004578:	429e      	cmp	r6, r3
 800457a:	f340 849d 	ble.w	8004eb8 <__ieee754_pow+0x9c8>
 800457e:	1533      	asrs	r3, r6, #20
 8004580:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004584:	2b14      	cmp	r3, #20
 8004586:	dd0f      	ble.n	80045a8 <__ieee754_pow+0xb8>
 8004588:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800458c:	fa22 f103 	lsr.w	r1, r2, r3
 8004590:	fa01 f303 	lsl.w	r3, r1, r3
 8004594:	4293      	cmp	r3, r2
 8004596:	f040 848f 	bne.w	8004eb8 <__ieee754_pow+0x9c8>
 800459a:	f001 0101 	and.w	r1, r1, #1
 800459e:	f1c1 0302 	rsb	r3, r1, #2
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	b182      	cbz	r2, 80045c8 <__ieee754_pow+0xd8>
 80045a6:	e05d      	b.n	8004664 <__ieee754_pow+0x174>
 80045a8:	2a00      	cmp	r2, #0
 80045aa:	d159      	bne.n	8004660 <__ieee754_pow+0x170>
 80045ac:	f1c3 0314 	rsb	r3, r3, #20
 80045b0:	fa46 f103 	asr.w	r1, r6, r3
 80045b4:	fa01 f303 	lsl.w	r3, r1, r3
 80045b8:	42b3      	cmp	r3, r6
 80045ba:	f040 847a 	bne.w	8004eb2 <__ieee754_pow+0x9c2>
 80045be:	f001 0101 	and.w	r1, r1, #1
 80045c2:	f1c1 0302 	rsb	r3, r1, #2
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	4b58      	ldr	r3, [pc, #352]	; (800472c <__ieee754_pow+0x23c>)
 80045ca:	429e      	cmp	r6, r3
 80045cc:	d132      	bne.n	8004634 <__ieee754_pow+0x144>
 80045ce:	2f00      	cmp	r7, #0
 80045d0:	f280 846b 	bge.w	8004eaa <__ieee754_pow+0x9ba>
 80045d4:	4642      	mov	r2, r8
 80045d6:	464b      	mov	r3, r9
 80045d8:	2000      	movs	r0, #0
 80045da:	4954      	ldr	r1, [pc, #336]	; (800472c <__ieee754_pow+0x23c>)
 80045dc:	f7fc f962 	bl	80008a4 <__aeabi_ddiv>
 80045e0:	e7a3      	b.n	800452a <__ieee754_pow+0x3a>
 80045e2:	2300      	movs	r3, #0
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	2a00      	cmp	r2, #0
 80045e8:	d13c      	bne.n	8004664 <__ieee754_pow+0x174>
 80045ea:	4b4e      	ldr	r3, [pc, #312]	; (8004724 <__ieee754_pow+0x234>)
 80045ec:	429e      	cmp	r6, r3
 80045ee:	d1eb      	bne.n	80045c8 <__ieee754_pow+0xd8>
 80045f0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80045f4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80045f8:	ea53 030a 	orrs.w	r3, r3, sl
 80045fc:	f000 8449 	beq.w	8004e92 <__ieee754_pow+0x9a2>
 8004600:	4b4b      	ldr	r3, [pc, #300]	; (8004730 <__ieee754_pow+0x240>)
 8004602:	429c      	cmp	r4, r3
 8004604:	dd0b      	ble.n	800461e <__ieee754_pow+0x12e>
 8004606:	2f00      	cmp	r7, #0
 8004608:	f2c0 8449 	blt.w	8004e9e <__ieee754_pow+0x9ae>
 800460c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8004610:	4658      	mov	r0, fp
 8004612:	4661      	mov	r1, ip
 8004614:	b013      	add	sp, #76	; 0x4c
 8004616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800461a:	2302      	movs	r3, #2
 800461c:	e7e2      	b.n	80045e4 <__ieee754_pow+0xf4>
 800461e:	2f00      	cmp	r7, #0
 8004620:	f04f 0b00 	mov.w	fp, #0
 8004624:	f04f 0c00 	mov.w	ip, #0
 8004628:	daf2      	bge.n	8004610 <__ieee754_pow+0x120>
 800462a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800462e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8004632:	e7ed      	b.n	8004610 <__ieee754_pow+0x120>
 8004634:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8004638:	d106      	bne.n	8004648 <__ieee754_pow+0x158>
 800463a:	4642      	mov	r2, r8
 800463c:	464b      	mov	r3, r9
 800463e:	4640      	mov	r0, r8
 8004640:	4649      	mov	r1, r9
 8004642:	f7fc f805 	bl	8000650 <__aeabi_dmul>
 8004646:	e770      	b.n	800452a <__ieee754_pow+0x3a>
 8004648:	4b3a      	ldr	r3, [pc, #232]	; (8004734 <__ieee754_pow+0x244>)
 800464a:	429f      	cmp	r7, r3
 800464c:	d10a      	bne.n	8004664 <__ieee754_pow+0x174>
 800464e:	2d00      	cmp	r5, #0
 8004650:	db08      	blt.n	8004664 <__ieee754_pow+0x174>
 8004652:	4640      	mov	r0, r8
 8004654:	4649      	mov	r1, r9
 8004656:	b013      	add	sp, #76	; 0x4c
 8004658:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800465c:	f000 bd0a 	b.w	8005074 <__ieee754_sqrt>
 8004660:	2300      	movs	r3, #0
 8004662:	9300      	str	r3, [sp, #0]
 8004664:	4640      	mov	r0, r8
 8004666:	4649      	mov	r1, r9
 8004668:	f000 fc58 	bl	8004f1c <fabs>
 800466c:	4683      	mov	fp, r0
 800466e:	468c      	mov	ip, r1
 8004670:	f1ba 0f00 	cmp.w	sl, #0
 8004674:	d128      	bne.n	80046c8 <__ieee754_pow+0x1d8>
 8004676:	b124      	cbz	r4, 8004682 <__ieee754_pow+0x192>
 8004678:	4b2c      	ldr	r3, [pc, #176]	; (800472c <__ieee754_pow+0x23c>)
 800467a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800467e:	429a      	cmp	r2, r3
 8004680:	d122      	bne.n	80046c8 <__ieee754_pow+0x1d8>
 8004682:	2f00      	cmp	r7, #0
 8004684:	da07      	bge.n	8004696 <__ieee754_pow+0x1a6>
 8004686:	465a      	mov	r2, fp
 8004688:	4663      	mov	r3, ip
 800468a:	2000      	movs	r0, #0
 800468c:	4927      	ldr	r1, [pc, #156]	; (800472c <__ieee754_pow+0x23c>)
 800468e:	f7fc f909 	bl	80008a4 <__aeabi_ddiv>
 8004692:	4683      	mov	fp, r0
 8004694:	468c      	mov	ip, r1
 8004696:	2d00      	cmp	r5, #0
 8004698:	daba      	bge.n	8004610 <__ieee754_pow+0x120>
 800469a:	9b00      	ldr	r3, [sp, #0]
 800469c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80046a0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80046a4:	431c      	orrs	r4, r3
 80046a6:	d108      	bne.n	80046ba <__ieee754_pow+0x1ca>
 80046a8:	465a      	mov	r2, fp
 80046aa:	4663      	mov	r3, ip
 80046ac:	4658      	mov	r0, fp
 80046ae:	4661      	mov	r1, ip
 80046b0:	f7fb fe16 	bl	80002e0 <__aeabi_dsub>
 80046b4:	4602      	mov	r2, r0
 80046b6:	460b      	mov	r3, r1
 80046b8:	e790      	b.n	80045dc <__ieee754_pow+0xec>
 80046ba:	9b00      	ldr	r3, [sp, #0]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d1a7      	bne.n	8004610 <__ieee754_pow+0x120>
 80046c0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80046c4:	469c      	mov	ip, r3
 80046c6:	e7a3      	b.n	8004610 <__ieee754_pow+0x120>
 80046c8:	0feb      	lsrs	r3, r5, #31
 80046ca:	3b01      	subs	r3, #1
 80046cc:	930c      	str	r3, [sp, #48]	; 0x30
 80046ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80046d0:	9b00      	ldr	r3, [sp, #0]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	d104      	bne.n	80046e0 <__ieee754_pow+0x1f0>
 80046d6:	4642      	mov	r2, r8
 80046d8:	464b      	mov	r3, r9
 80046da:	4640      	mov	r0, r8
 80046dc:	4649      	mov	r1, r9
 80046de:	e7e7      	b.n	80046b0 <__ieee754_pow+0x1c0>
 80046e0:	4b15      	ldr	r3, [pc, #84]	; (8004738 <__ieee754_pow+0x248>)
 80046e2:	429e      	cmp	r6, r3
 80046e4:	f340 80f6 	ble.w	80048d4 <__ieee754_pow+0x3e4>
 80046e8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80046ec:	429e      	cmp	r6, r3
 80046ee:	4b10      	ldr	r3, [pc, #64]	; (8004730 <__ieee754_pow+0x240>)
 80046f0:	dd09      	ble.n	8004706 <__ieee754_pow+0x216>
 80046f2:	429c      	cmp	r4, r3
 80046f4:	dc0c      	bgt.n	8004710 <__ieee754_pow+0x220>
 80046f6:	2f00      	cmp	r7, #0
 80046f8:	da0c      	bge.n	8004714 <__ieee754_pow+0x224>
 80046fa:	2000      	movs	r0, #0
 80046fc:	b013      	add	sp, #76	; 0x4c
 80046fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004702:	f000 bcb2 	b.w	800506a <__math_oflow>
 8004706:	429c      	cmp	r4, r3
 8004708:	dbf5      	blt.n	80046f6 <__ieee754_pow+0x206>
 800470a:	4b08      	ldr	r3, [pc, #32]	; (800472c <__ieee754_pow+0x23c>)
 800470c:	429c      	cmp	r4, r3
 800470e:	dd15      	ble.n	800473c <__ieee754_pow+0x24c>
 8004710:	2f00      	cmp	r7, #0
 8004712:	dcf2      	bgt.n	80046fa <__ieee754_pow+0x20a>
 8004714:	2000      	movs	r0, #0
 8004716:	b013      	add	sp, #76	; 0x4c
 8004718:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800471c:	f000 bca0 	b.w	8005060 <__math_uflow>
 8004720:	fff00000 	.word	0xfff00000
 8004724:	7ff00000 	.word	0x7ff00000
 8004728:	433fffff 	.word	0x433fffff
 800472c:	3ff00000 	.word	0x3ff00000
 8004730:	3fefffff 	.word	0x3fefffff
 8004734:	3fe00000 	.word	0x3fe00000
 8004738:	41e00000 	.word	0x41e00000
 800473c:	4661      	mov	r1, ip
 800473e:	2200      	movs	r2, #0
 8004740:	4658      	mov	r0, fp
 8004742:	4b5f      	ldr	r3, [pc, #380]	; (80048c0 <__ieee754_pow+0x3d0>)
 8004744:	f7fb fdcc 	bl	80002e0 <__aeabi_dsub>
 8004748:	a355      	add	r3, pc, #340	; (adr r3, 80048a0 <__ieee754_pow+0x3b0>)
 800474a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474e:	4604      	mov	r4, r0
 8004750:	460d      	mov	r5, r1
 8004752:	f7fb ff7d 	bl	8000650 <__aeabi_dmul>
 8004756:	a354      	add	r3, pc, #336	; (adr r3, 80048a8 <__ieee754_pow+0x3b8>)
 8004758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475c:	4606      	mov	r6, r0
 800475e:	460f      	mov	r7, r1
 8004760:	4620      	mov	r0, r4
 8004762:	4629      	mov	r1, r5
 8004764:	f7fb ff74 	bl	8000650 <__aeabi_dmul>
 8004768:	2200      	movs	r2, #0
 800476a:	4682      	mov	sl, r0
 800476c:	468b      	mov	fp, r1
 800476e:	4620      	mov	r0, r4
 8004770:	4629      	mov	r1, r5
 8004772:	4b54      	ldr	r3, [pc, #336]	; (80048c4 <__ieee754_pow+0x3d4>)
 8004774:	f7fb ff6c 	bl	8000650 <__aeabi_dmul>
 8004778:	4602      	mov	r2, r0
 800477a:	460b      	mov	r3, r1
 800477c:	a14c      	add	r1, pc, #304	; (adr r1, 80048b0 <__ieee754_pow+0x3c0>)
 800477e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004782:	f7fb fdad 	bl	80002e0 <__aeabi_dsub>
 8004786:	4622      	mov	r2, r4
 8004788:	462b      	mov	r3, r5
 800478a:	f7fb ff61 	bl	8000650 <__aeabi_dmul>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	2000      	movs	r0, #0
 8004794:	494c      	ldr	r1, [pc, #304]	; (80048c8 <__ieee754_pow+0x3d8>)
 8004796:	f7fb fda3 	bl	80002e0 <__aeabi_dsub>
 800479a:	4622      	mov	r2, r4
 800479c:	462b      	mov	r3, r5
 800479e:	4680      	mov	r8, r0
 80047a0:	4689      	mov	r9, r1
 80047a2:	4620      	mov	r0, r4
 80047a4:	4629      	mov	r1, r5
 80047a6:	f7fb ff53 	bl	8000650 <__aeabi_dmul>
 80047aa:	4602      	mov	r2, r0
 80047ac:	460b      	mov	r3, r1
 80047ae:	4640      	mov	r0, r8
 80047b0:	4649      	mov	r1, r9
 80047b2:	f7fb ff4d 	bl	8000650 <__aeabi_dmul>
 80047b6:	a340      	add	r3, pc, #256	; (adr r3, 80048b8 <__ieee754_pow+0x3c8>)
 80047b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047bc:	f7fb ff48 	bl	8000650 <__aeabi_dmul>
 80047c0:	4602      	mov	r2, r0
 80047c2:	460b      	mov	r3, r1
 80047c4:	4650      	mov	r0, sl
 80047c6:	4659      	mov	r1, fp
 80047c8:	f7fb fd8a 	bl	80002e0 <__aeabi_dsub>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	4604      	mov	r4, r0
 80047d2:	460d      	mov	r5, r1
 80047d4:	4630      	mov	r0, r6
 80047d6:	4639      	mov	r1, r7
 80047d8:	f7fb fd84 	bl	80002e4 <__adddf3>
 80047dc:	2000      	movs	r0, #0
 80047de:	4632      	mov	r2, r6
 80047e0:	463b      	mov	r3, r7
 80047e2:	4682      	mov	sl, r0
 80047e4:	468b      	mov	fp, r1
 80047e6:	f7fb fd7b 	bl	80002e0 <__aeabi_dsub>
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
 80047ee:	4620      	mov	r0, r4
 80047f0:	4629      	mov	r1, r5
 80047f2:	f7fb fd75 	bl	80002e0 <__aeabi_dsub>
 80047f6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80047fa:	9b00      	ldr	r3, [sp, #0]
 80047fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80047fe:	3b01      	subs	r3, #1
 8004800:	4313      	orrs	r3, r2
 8004802:	f04f 0600 	mov.w	r6, #0
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	bf0c      	ite	eq
 800480c:	4b2f      	ldreq	r3, [pc, #188]	; (80048cc <__ieee754_pow+0x3dc>)
 800480e:	4b2c      	ldrne	r3, [pc, #176]	; (80048c0 <__ieee754_pow+0x3d0>)
 8004810:	4604      	mov	r4, r0
 8004812:	460d      	mov	r5, r1
 8004814:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004818:	e9cd 2300 	strd	r2, r3, [sp]
 800481c:	4632      	mov	r2, r6
 800481e:	463b      	mov	r3, r7
 8004820:	f7fb fd5e 	bl	80002e0 <__aeabi_dsub>
 8004824:	4652      	mov	r2, sl
 8004826:	465b      	mov	r3, fp
 8004828:	f7fb ff12 	bl	8000650 <__aeabi_dmul>
 800482c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004830:	4680      	mov	r8, r0
 8004832:	4689      	mov	r9, r1
 8004834:	4620      	mov	r0, r4
 8004836:	4629      	mov	r1, r5
 8004838:	f7fb ff0a 	bl	8000650 <__aeabi_dmul>
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	4640      	mov	r0, r8
 8004842:	4649      	mov	r1, r9
 8004844:	f7fb fd4e 	bl	80002e4 <__adddf3>
 8004848:	4632      	mov	r2, r6
 800484a:	463b      	mov	r3, r7
 800484c:	4680      	mov	r8, r0
 800484e:	4689      	mov	r9, r1
 8004850:	4650      	mov	r0, sl
 8004852:	4659      	mov	r1, fp
 8004854:	f7fb fefc 	bl	8000650 <__aeabi_dmul>
 8004858:	4604      	mov	r4, r0
 800485a:	460d      	mov	r5, r1
 800485c:	460b      	mov	r3, r1
 800485e:	4602      	mov	r2, r0
 8004860:	4649      	mov	r1, r9
 8004862:	4640      	mov	r0, r8
 8004864:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004868:	f7fb fd3c 	bl	80002e4 <__adddf3>
 800486c:	4b18      	ldr	r3, [pc, #96]	; (80048d0 <__ieee754_pow+0x3e0>)
 800486e:	4682      	mov	sl, r0
 8004870:	4299      	cmp	r1, r3
 8004872:	460f      	mov	r7, r1
 8004874:	460e      	mov	r6, r1
 8004876:	f340 82e7 	ble.w	8004e48 <__ieee754_pow+0x958>
 800487a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800487e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004882:	4303      	orrs	r3, r0
 8004884:	f000 81e2 	beq.w	8004c4c <__ieee754_pow+0x75c>
 8004888:	e9dd 0100 	ldrd	r0, r1, [sp]
 800488c:	2200      	movs	r2, #0
 800488e:	2300      	movs	r3, #0
 8004890:	f7fc f950 	bl	8000b34 <__aeabi_dcmplt>
 8004894:	3800      	subs	r0, #0
 8004896:	bf18      	it	ne
 8004898:	2001      	movne	r0, #1
 800489a:	e72f      	b.n	80046fc <__ieee754_pow+0x20c>
 800489c:	f3af 8000 	nop.w
 80048a0:	60000000 	.word	0x60000000
 80048a4:	3ff71547 	.word	0x3ff71547
 80048a8:	f85ddf44 	.word	0xf85ddf44
 80048ac:	3e54ae0b 	.word	0x3e54ae0b
 80048b0:	55555555 	.word	0x55555555
 80048b4:	3fd55555 	.word	0x3fd55555
 80048b8:	652b82fe 	.word	0x652b82fe
 80048bc:	3ff71547 	.word	0x3ff71547
 80048c0:	3ff00000 	.word	0x3ff00000
 80048c4:	3fd00000 	.word	0x3fd00000
 80048c8:	3fe00000 	.word	0x3fe00000
 80048cc:	bff00000 	.word	0xbff00000
 80048d0:	408fffff 	.word	0x408fffff
 80048d4:	4bd4      	ldr	r3, [pc, #848]	; (8004c28 <__ieee754_pow+0x738>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	402b      	ands	r3, r5
 80048da:	b943      	cbnz	r3, 80048ee <__ieee754_pow+0x3fe>
 80048dc:	4658      	mov	r0, fp
 80048de:	4661      	mov	r1, ip
 80048e0:	4bd2      	ldr	r3, [pc, #840]	; (8004c2c <__ieee754_pow+0x73c>)
 80048e2:	f7fb feb5 	bl	8000650 <__aeabi_dmul>
 80048e6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80048ea:	4683      	mov	fp, r0
 80048ec:	460c      	mov	r4, r1
 80048ee:	1523      	asrs	r3, r4, #20
 80048f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80048f4:	4413      	add	r3, r2
 80048f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80048f8:	4bcd      	ldr	r3, [pc, #820]	; (8004c30 <__ieee754_pow+0x740>)
 80048fa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80048fe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004902:	429c      	cmp	r4, r3
 8004904:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004908:	dd08      	ble.n	800491c <__ieee754_pow+0x42c>
 800490a:	4bca      	ldr	r3, [pc, #808]	; (8004c34 <__ieee754_pow+0x744>)
 800490c:	429c      	cmp	r4, r3
 800490e:	f340 8164 	ble.w	8004bda <__ieee754_pow+0x6ea>
 8004912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004914:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004918:	3301      	adds	r3, #1
 800491a:	930b      	str	r3, [sp, #44]	; 0x2c
 800491c:	2600      	movs	r6, #0
 800491e:	00f3      	lsls	r3, r6, #3
 8004920:	930d      	str	r3, [sp, #52]	; 0x34
 8004922:	4bc5      	ldr	r3, [pc, #788]	; (8004c38 <__ieee754_pow+0x748>)
 8004924:	4658      	mov	r0, fp
 8004926:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800492a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800492e:	4629      	mov	r1, r5
 8004930:	461a      	mov	r2, r3
 8004932:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8004936:	4623      	mov	r3, r4
 8004938:	f7fb fcd2 	bl	80002e0 <__aeabi_dsub>
 800493c:	46da      	mov	sl, fp
 800493e:	462b      	mov	r3, r5
 8004940:	4652      	mov	r2, sl
 8004942:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004946:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800494a:	f7fb fccb 	bl	80002e4 <__adddf3>
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	2000      	movs	r0, #0
 8004954:	49b9      	ldr	r1, [pc, #740]	; (8004c3c <__ieee754_pow+0x74c>)
 8004956:	f7fb ffa5 	bl	80008a4 <__aeabi_ddiv>
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004962:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004966:	f7fb fe73 	bl	8000650 <__aeabi_dmul>
 800496a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800496e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8004972:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004976:	2300      	movs	r3, #0
 8004978:	2200      	movs	r2, #0
 800497a:	46ab      	mov	fp, r5
 800497c:	106d      	asrs	r5, r5, #1
 800497e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004982:	9304      	str	r3, [sp, #16]
 8004984:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004988:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800498c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8004990:	4640      	mov	r0, r8
 8004992:	4649      	mov	r1, r9
 8004994:	4614      	mov	r4, r2
 8004996:	461d      	mov	r5, r3
 8004998:	f7fb fe5a 	bl	8000650 <__aeabi_dmul>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80049a4:	f7fb fc9c 	bl	80002e0 <__aeabi_dsub>
 80049a8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80049ac:	4606      	mov	r6, r0
 80049ae:	460f      	mov	r7, r1
 80049b0:	4620      	mov	r0, r4
 80049b2:	4629      	mov	r1, r5
 80049b4:	f7fb fc94 	bl	80002e0 <__aeabi_dsub>
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	4650      	mov	r0, sl
 80049be:	4659      	mov	r1, fp
 80049c0:	f7fb fc8e 	bl	80002e0 <__aeabi_dsub>
 80049c4:	4642      	mov	r2, r8
 80049c6:	464b      	mov	r3, r9
 80049c8:	f7fb fe42 	bl	8000650 <__aeabi_dmul>
 80049cc:	4602      	mov	r2, r0
 80049ce:	460b      	mov	r3, r1
 80049d0:	4630      	mov	r0, r6
 80049d2:	4639      	mov	r1, r7
 80049d4:	f7fb fc84 	bl	80002e0 <__aeabi_dsub>
 80049d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80049dc:	f7fb fe38 	bl	8000650 <__aeabi_dmul>
 80049e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80049e4:	4682      	mov	sl, r0
 80049e6:	468b      	mov	fp, r1
 80049e8:	4610      	mov	r0, r2
 80049ea:	4619      	mov	r1, r3
 80049ec:	f7fb fe30 	bl	8000650 <__aeabi_dmul>
 80049f0:	a37b      	add	r3, pc, #492	; (adr r3, 8004be0 <__ieee754_pow+0x6f0>)
 80049f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f6:	4604      	mov	r4, r0
 80049f8:	460d      	mov	r5, r1
 80049fa:	f7fb fe29 	bl	8000650 <__aeabi_dmul>
 80049fe:	a37a      	add	r3, pc, #488	; (adr r3, 8004be8 <__ieee754_pow+0x6f8>)
 8004a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a04:	f7fb fc6e 	bl	80002e4 <__adddf3>
 8004a08:	4622      	mov	r2, r4
 8004a0a:	462b      	mov	r3, r5
 8004a0c:	f7fb fe20 	bl	8000650 <__aeabi_dmul>
 8004a10:	a377      	add	r3, pc, #476	; (adr r3, 8004bf0 <__ieee754_pow+0x700>)
 8004a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a16:	f7fb fc65 	bl	80002e4 <__adddf3>
 8004a1a:	4622      	mov	r2, r4
 8004a1c:	462b      	mov	r3, r5
 8004a1e:	f7fb fe17 	bl	8000650 <__aeabi_dmul>
 8004a22:	a375      	add	r3, pc, #468	; (adr r3, 8004bf8 <__ieee754_pow+0x708>)
 8004a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a28:	f7fb fc5c 	bl	80002e4 <__adddf3>
 8004a2c:	4622      	mov	r2, r4
 8004a2e:	462b      	mov	r3, r5
 8004a30:	f7fb fe0e 	bl	8000650 <__aeabi_dmul>
 8004a34:	a372      	add	r3, pc, #456	; (adr r3, 8004c00 <__ieee754_pow+0x710>)
 8004a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3a:	f7fb fc53 	bl	80002e4 <__adddf3>
 8004a3e:	4622      	mov	r2, r4
 8004a40:	462b      	mov	r3, r5
 8004a42:	f7fb fe05 	bl	8000650 <__aeabi_dmul>
 8004a46:	a370      	add	r3, pc, #448	; (adr r3, 8004c08 <__ieee754_pow+0x718>)
 8004a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4c:	f7fb fc4a 	bl	80002e4 <__adddf3>
 8004a50:	4622      	mov	r2, r4
 8004a52:	4606      	mov	r6, r0
 8004a54:	460f      	mov	r7, r1
 8004a56:	462b      	mov	r3, r5
 8004a58:	4620      	mov	r0, r4
 8004a5a:	4629      	mov	r1, r5
 8004a5c:	f7fb fdf8 	bl	8000650 <__aeabi_dmul>
 8004a60:	4602      	mov	r2, r0
 8004a62:	460b      	mov	r3, r1
 8004a64:	4630      	mov	r0, r6
 8004a66:	4639      	mov	r1, r7
 8004a68:	f7fb fdf2 	bl	8000650 <__aeabi_dmul>
 8004a6c:	4604      	mov	r4, r0
 8004a6e:	460d      	mov	r5, r1
 8004a70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a74:	4642      	mov	r2, r8
 8004a76:	464b      	mov	r3, r9
 8004a78:	f7fb fc34 	bl	80002e4 <__adddf3>
 8004a7c:	4652      	mov	r2, sl
 8004a7e:	465b      	mov	r3, fp
 8004a80:	f7fb fde6 	bl	8000650 <__aeabi_dmul>
 8004a84:	4622      	mov	r2, r4
 8004a86:	462b      	mov	r3, r5
 8004a88:	f7fb fc2c 	bl	80002e4 <__adddf3>
 8004a8c:	4642      	mov	r2, r8
 8004a8e:	4606      	mov	r6, r0
 8004a90:	460f      	mov	r7, r1
 8004a92:	464b      	mov	r3, r9
 8004a94:	4640      	mov	r0, r8
 8004a96:	4649      	mov	r1, r9
 8004a98:	f7fb fdda 	bl	8000650 <__aeabi_dmul>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	4b66      	ldr	r3, [pc, #408]	; (8004c40 <__ieee754_pow+0x750>)
 8004aa8:	f7fb fc1c 	bl	80002e4 <__adddf3>
 8004aac:	4632      	mov	r2, r6
 8004aae:	463b      	mov	r3, r7
 8004ab0:	f7fb fc18 	bl	80002e4 <__adddf3>
 8004ab4:	2400      	movs	r4, #0
 8004ab6:	460d      	mov	r5, r1
 8004ab8:	4622      	mov	r2, r4
 8004aba:	460b      	mov	r3, r1
 8004abc:	4640      	mov	r0, r8
 8004abe:	4649      	mov	r1, r9
 8004ac0:	f7fb fdc6 	bl	8000650 <__aeabi_dmul>
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	4680      	mov	r8, r0
 8004ac8:	4689      	mov	r9, r1
 8004aca:	4620      	mov	r0, r4
 8004acc:	4629      	mov	r1, r5
 8004ace:	4b5c      	ldr	r3, [pc, #368]	; (8004c40 <__ieee754_pow+0x750>)
 8004ad0:	f7fb fc06 	bl	80002e0 <__aeabi_dsub>
 8004ad4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004ad8:	f7fb fc02 	bl	80002e0 <__aeabi_dsub>
 8004adc:	4602      	mov	r2, r0
 8004ade:	460b      	mov	r3, r1
 8004ae0:	4630      	mov	r0, r6
 8004ae2:	4639      	mov	r1, r7
 8004ae4:	f7fb fbfc 	bl	80002e0 <__aeabi_dsub>
 8004ae8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004aec:	f7fb fdb0 	bl	8000650 <__aeabi_dmul>
 8004af0:	4622      	mov	r2, r4
 8004af2:	4606      	mov	r6, r0
 8004af4:	460f      	mov	r7, r1
 8004af6:	462b      	mov	r3, r5
 8004af8:	4650      	mov	r0, sl
 8004afa:	4659      	mov	r1, fp
 8004afc:	f7fb fda8 	bl	8000650 <__aeabi_dmul>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4630      	mov	r0, r6
 8004b06:	4639      	mov	r1, r7
 8004b08:	f7fb fbec 	bl	80002e4 <__adddf3>
 8004b0c:	2400      	movs	r4, #0
 8004b0e:	4606      	mov	r6, r0
 8004b10:	460f      	mov	r7, r1
 8004b12:	4602      	mov	r2, r0
 8004b14:	460b      	mov	r3, r1
 8004b16:	4640      	mov	r0, r8
 8004b18:	4649      	mov	r1, r9
 8004b1a:	f7fb fbe3 	bl	80002e4 <__adddf3>
 8004b1e:	a33c      	add	r3, pc, #240	; (adr r3, 8004c10 <__ieee754_pow+0x720>)
 8004b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b24:	4620      	mov	r0, r4
 8004b26:	460d      	mov	r5, r1
 8004b28:	f7fb fd92 	bl	8000650 <__aeabi_dmul>
 8004b2c:	4642      	mov	r2, r8
 8004b2e:	464b      	mov	r3, r9
 8004b30:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004b34:	4620      	mov	r0, r4
 8004b36:	4629      	mov	r1, r5
 8004b38:	f7fb fbd2 	bl	80002e0 <__aeabi_dsub>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	460b      	mov	r3, r1
 8004b40:	4630      	mov	r0, r6
 8004b42:	4639      	mov	r1, r7
 8004b44:	f7fb fbcc 	bl	80002e0 <__aeabi_dsub>
 8004b48:	a333      	add	r3, pc, #204	; (adr r3, 8004c18 <__ieee754_pow+0x728>)
 8004b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4e:	f7fb fd7f 	bl	8000650 <__aeabi_dmul>
 8004b52:	a333      	add	r3, pc, #204	; (adr r3, 8004c20 <__ieee754_pow+0x730>)
 8004b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b58:	4606      	mov	r6, r0
 8004b5a:	460f      	mov	r7, r1
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	4629      	mov	r1, r5
 8004b60:	f7fb fd76 	bl	8000650 <__aeabi_dmul>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	4630      	mov	r0, r6
 8004b6a:	4639      	mov	r1, r7
 8004b6c:	f7fb fbba 	bl	80002e4 <__adddf3>
 8004b70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004b72:	4b34      	ldr	r3, [pc, #208]	; (8004c44 <__ieee754_pow+0x754>)
 8004b74:	4413      	add	r3, r2
 8004b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b7a:	f7fb fbb3 	bl	80002e4 <__adddf3>
 8004b7e:	4680      	mov	r8, r0
 8004b80:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004b82:	4689      	mov	r9, r1
 8004b84:	f7fb fcfa 	bl	800057c <__aeabi_i2d>
 8004b88:	4604      	mov	r4, r0
 8004b8a:	460d      	mov	r5, r1
 8004b8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004b92:	4b2d      	ldr	r3, [pc, #180]	; (8004c48 <__ieee754_pow+0x758>)
 8004b94:	4413      	add	r3, r2
 8004b96:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004b9a:	4642      	mov	r2, r8
 8004b9c:	464b      	mov	r3, r9
 8004b9e:	f7fb fba1 	bl	80002e4 <__adddf3>
 8004ba2:	4632      	mov	r2, r6
 8004ba4:	463b      	mov	r3, r7
 8004ba6:	f7fb fb9d 	bl	80002e4 <__adddf3>
 8004baa:	4622      	mov	r2, r4
 8004bac:	462b      	mov	r3, r5
 8004bae:	f7fb fb99 	bl	80002e4 <__adddf3>
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	4622      	mov	r2, r4
 8004bb6:	462b      	mov	r3, r5
 8004bb8:	4682      	mov	sl, r0
 8004bba:	468b      	mov	fp, r1
 8004bbc:	f7fb fb90 	bl	80002e0 <__aeabi_dsub>
 8004bc0:	4632      	mov	r2, r6
 8004bc2:	463b      	mov	r3, r7
 8004bc4:	f7fb fb8c 	bl	80002e0 <__aeabi_dsub>
 8004bc8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004bcc:	f7fb fb88 	bl	80002e0 <__aeabi_dsub>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4640      	mov	r0, r8
 8004bd6:	4649      	mov	r1, r9
 8004bd8:	e60b      	b.n	80047f2 <__ieee754_pow+0x302>
 8004bda:	2601      	movs	r6, #1
 8004bdc:	e69f      	b.n	800491e <__ieee754_pow+0x42e>
 8004bde:	bf00      	nop
 8004be0:	4a454eef 	.word	0x4a454eef
 8004be4:	3fca7e28 	.word	0x3fca7e28
 8004be8:	93c9db65 	.word	0x93c9db65
 8004bec:	3fcd864a 	.word	0x3fcd864a
 8004bf0:	a91d4101 	.word	0xa91d4101
 8004bf4:	3fd17460 	.word	0x3fd17460
 8004bf8:	518f264d 	.word	0x518f264d
 8004bfc:	3fd55555 	.word	0x3fd55555
 8004c00:	db6fabff 	.word	0xdb6fabff
 8004c04:	3fdb6db6 	.word	0x3fdb6db6
 8004c08:	33333303 	.word	0x33333303
 8004c0c:	3fe33333 	.word	0x3fe33333
 8004c10:	e0000000 	.word	0xe0000000
 8004c14:	3feec709 	.word	0x3feec709
 8004c18:	dc3a03fd 	.word	0xdc3a03fd
 8004c1c:	3feec709 	.word	0x3feec709
 8004c20:	145b01f5 	.word	0x145b01f5
 8004c24:	be3e2fe0 	.word	0xbe3e2fe0
 8004c28:	7ff00000 	.word	0x7ff00000
 8004c2c:	43400000 	.word	0x43400000
 8004c30:	0003988e 	.word	0x0003988e
 8004c34:	000bb679 	.word	0x000bb679
 8004c38:	08005258 	.word	0x08005258
 8004c3c:	3ff00000 	.word	0x3ff00000
 8004c40:	40080000 	.word	0x40080000
 8004c44:	08005278 	.word	0x08005278
 8004c48:	08005268 	.word	0x08005268
 8004c4c:	a39c      	add	r3, pc, #624	; (adr r3, 8004ec0 <__ieee754_pow+0x9d0>)
 8004c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c52:	4640      	mov	r0, r8
 8004c54:	4649      	mov	r1, r9
 8004c56:	f7fb fb45 	bl	80002e4 <__adddf3>
 8004c5a:	4622      	mov	r2, r4
 8004c5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c60:	462b      	mov	r3, r5
 8004c62:	4650      	mov	r0, sl
 8004c64:	4639      	mov	r1, r7
 8004c66:	f7fb fb3b 	bl	80002e0 <__aeabi_dsub>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c72:	f7fb ff7d 	bl	8000b70 <__aeabi_dcmpgt>
 8004c76:	2800      	cmp	r0, #0
 8004c78:	f47f ae06 	bne.w	8004888 <__ieee754_pow+0x398>
 8004c7c:	4aa2      	ldr	r2, [pc, #648]	; (8004f08 <__ieee754_pow+0xa18>)
 8004c7e:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8004c82:	4293      	cmp	r3, r2
 8004c84:	f340 8100 	ble.w	8004e88 <__ieee754_pow+0x998>
 8004c88:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004c8c:	151b      	asrs	r3, r3, #20
 8004c8e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004c92:	fa4a fa03 	asr.w	sl, sl, r3
 8004c96:	44b2      	add	sl, r6
 8004c98:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8004c9c:	489b      	ldr	r0, [pc, #620]	; (8004f0c <__ieee754_pow+0xa1c>)
 8004c9e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8004ca2:	4108      	asrs	r0, r1
 8004ca4:	ea00 030a 	and.w	r3, r0, sl
 8004ca8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8004cac:	f1c1 0114 	rsb	r1, r1, #20
 8004cb0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004cb4:	fa4a fa01 	asr.w	sl, sl, r1
 8004cb8:	2e00      	cmp	r6, #0
 8004cba:	f04f 0200 	mov.w	r2, #0
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	4629      	mov	r1, r5
 8004cc2:	bfb8      	it	lt
 8004cc4:	f1ca 0a00 	rsblt	sl, sl, #0
 8004cc8:	f7fb fb0a 	bl	80002e0 <__aeabi_dsub>
 8004ccc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cd4:	2400      	movs	r4, #0
 8004cd6:	4642      	mov	r2, r8
 8004cd8:	464b      	mov	r3, r9
 8004cda:	f7fb fb03 	bl	80002e4 <__adddf3>
 8004cde:	a37a      	add	r3, pc, #488	; (adr r3, 8004ec8 <__ieee754_pow+0x9d8>)
 8004ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	460d      	mov	r5, r1
 8004ce8:	f7fb fcb2 	bl	8000650 <__aeabi_dmul>
 8004cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004cf0:	4606      	mov	r6, r0
 8004cf2:	460f      	mov	r7, r1
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	f7fb faf2 	bl	80002e0 <__aeabi_dsub>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	4640      	mov	r0, r8
 8004d02:	4649      	mov	r1, r9
 8004d04:	f7fb faec 	bl	80002e0 <__aeabi_dsub>
 8004d08:	a371      	add	r3, pc, #452	; (adr r3, 8004ed0 <__ieee754_pow+0x9e0>)
 8004d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0e:	f7fb fc9f 	bl	8000650 <__aeabi_dmul>
 8004d12:	a371      	add	r3, pc, #452	; (adr r3, 8004ed8 <__ieee754_pow+0x9e8>)
 8004d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d18:	4680      	mov	r8, r0
 8004d1a:	4689      	mov	r9, r1
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	4629      	mov	r1, r5
 8004d20:	f7fb fc96 	bl	8000650 <__aeabi_dmul>
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4640      	mov	r0, r8
 8004d2a:	4649      	mov	r1, r9
 8004d2c:	f7fb fada 	bl	80002e4 <__adddf3>
 8004d30:	4604      	mov	r4, r0
 8004d32:	460d      	mov	r5, r1
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4630      	mov	r0, r6
 8004d3a:	4639      	mov	r1, r7
 8004d3c:	f7fb fad2 	bl	80002e4 <__adddf3>
 8004d40:	4632      	mov	r2, r6
 8004d42:	463b      	mov	r3, r7
 8004d44:	4680      	mov	r8, r0
 8004d46:	4689      	mov	r9, r1
 8004d48:	f7fb faca 	bl	80002e0 <__aeabi_dsub>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4620      	mov	r0, r4
 8004d52:	4629      	mov	r1, r5
 8004d54:	f7fb fac4 	bl	80002e0 <__aeabi_dsub>
 8004d58:	4642      	mov	r2, r8
 8004d5a:	4606      	mov	r6, r0
 8004d5c:	460f      	mov	r7, r1
 8004d5e:	464b      	mov	r3, r9
 8004d60:	4640      	mov	r0, r8
 8004d62:	4649      	mov	r1, r9
 8004d64:	f7fb fc74 	bl	8000650 <__aeabi_dmul>
 8004d68:	a35d      	add	r3, pc, #372	; (adr r3, 8004ee0 <__ieee754_pow+0x9f0>)
 8004d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6e:	4604      	mov	r4, r0
 8004d70:	460d      	mov	r5, r1
 8004d72:	f7fb fc6d 	bl	8000650 <__aeabi_dmul>
 8004d76:	a35c      	add	r3, pc, #368	; (adr r3, 8004ee8 <__ieee754_pow+0x9f8>)
 8004d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7c:	f7fb fab0 	bl	80002e0 <__aeabi_dsub>
 8004d80:	4622      	mov	r2, r4
 8004d82:	462b      	mov	r3, r5
 8004d84:	f7fb fc64 	bl	8000650 <__aeabi_dmul>
 8004d88:	a359      	add	r3, pc, #356	; (adr r3, 8004ef0 <__ieee754_pow+0xa00>)
 8004d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8e:	f7fb faa9 	bl	80002e4 <__adddf3>
 8004d92:	4622      	mov	r2, r4
 8004d94:	462b      	mov	r3, r5
 8004d96:	f7fb fc5b 	bl	8000650 <__aeabi_dmul>
 8004d9a:	a357      	add	r3, pc, #348	; (adr r3, 8004ef8 <__ieee754_pow+0xa08>)
 8004d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da0:	f7fb fa9e 	bl	80002e0 <__aeabi_dsub>
 8004da4:	4622      	mov	r2, r4
 8004da6:	462b      	mov	r3, r5
 8004da8:	f7fb fc52 	bl	8000650 <__aeabi_dmul>
 8004dac:	a354      	add	r3, pc, #336	; (adr r3, 8004f00 <__ieee754_pow+0xa10>)
 8004dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db2:	f7fb fa97 	bl	80002e4 <__adddf3>
 8004db6:	4622      	mov	r2, r4
 8004db8:	462b      	mov	r3, r5
 8004dba:	f7fb fc49 	bl	8000650 <__aeabi_dmul>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	4640      	mov	r0, r8
 8004dc4:	4649      	mov	r1, r9
 8004dc6:	f7fb fa8b 	bl	80002e0 <__aeabi_dsub>
 8004dca:	4604      	mov	r4, r0
 8004dcc:	460d      	mov	r5, r1
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	4640      	mov	r0, r8
 8004dd4:	4649      	mov	r1, r9
 8004dd6:	f7fb fc3b 	bl	8000650 <__aeabi_dmul>
 8004dda:	2200      	movs	r2, #0
 8004ddc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004de0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004de4:	4620      	mov	r0, r4
 8004de6:	4629      	mov	r1, r5
 8004de8:	f7fb fa7a 	bl	80002e0 <__aeabi_dsub>
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004df4:	f7fb fd56 	bl	80008a4 <__aeabi_ddiv>
 8004df8:	4632      	mov	r2, r6
 8004dfa:	4604      	mov	r4, r0
 8004dfc:	460d      	mov	r5, r1
 8004dfe:	463b      	mov	r3, r7
 8004e00:	4640      	mov	r0, r8
 8004e02:	4649      	mov	r1, r9
 8004e04:	f7fb fc24 	bl	8000650 <__aeabi_dmul>
 8004e08:	4632      	mov	r2, r6
 8004e0a:	463b      	mov	r3, r7
 8004e0c:	f7fb fa6a 	bl	80002e4 <__adddf3>
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	4620      	mov	r0, r4
 8004e16:	4629      	mov	r1, r5
 8004e18:	f7fb fa62 	bl	80002e0 <__aeabi_dsub>
 8004e1c:	4642      	mov	r2, r8
 8004e1e:	464b      	mov	r3, r9
 8004e20:	f7fb fa5e 	bl	80002e0 <__aeabi_dsub>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	2000      	movs	r0, #0
 8004e2a:	4939      	ldr	r1, [pc, #228]	; (8004f10 <__ieee754_pow+0xa20>)
 8004e2c:	f7fb fa58 	bl	80002e0 <__aeabi_dsub>
 8004e30:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8004e34:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004e38:	da29      	bge.n	8004e8e <__ieee754_pow+0x99e>
 8004e3a:	4652      	mov	r2, sl
 8004e3c:	f000 f874 	bl	8004f28 <scalbn>
 8004e40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e44:	f7ff bbfd 	b.w	8004642 <__ieee754_pow+0x152>
 8004e48:	4b32      	ldr	r3, [pc, #200]	; (8004f14 <__ieee754_pow+0xa24>)
 8004e4a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8004e4e:	429f      	cmp	r7, r3
 8004e50:	f77f af14 	ble.w	8004c7c <__ieee754_pow+0x78c>
 8004e54:	4b30      	ldr	r3, [pc, #192]	; (8004f18 <__ieee754_pow+0xa28>)
 8004e56:	440b      	add	r3, r1
 8004e58:	4303      	orrs	r3, r0
 8004e5a:	d009      	beq.n	8004e70 <__ieee754_pow+0x980>
 8004e5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e60:	2200      	movs	r2, #0
 8004e62:	2300      	movs	r3, #0
 8004e64:	f7fb fe66 	bl	8000b34 <__aeabi_dcmplt>
 8004e68:	3800      	subs	r0, #0
 8004e6a:	bf18      	it	ne
 8004e6c:	2001      	movne	r0, #1
 8004e6e:	e452      	b.n	8004716 <__ieee754_pow+0x226>
 8004e70:	4622      	mov	r2, r4
 8004e72:	462b      	mov	r3, r5
 8004e74:	f7fb fa34 	bl	80002e0 <__aeabi_dsub>
 8004e78:	4642      	mov	r2, r8
 8004e7a:	464b      	mov	r3, r9
 8004e7c:	f7fb fe6e 	bl	8000b5c <__aeabi_dcmpge>
 8004e80:	2800      	cmp	r0, #0
 8004e82:	f43f aefb 	beq.w	8004c7c <__ieee754_pow+0x78c>
 8004e86:	e7e9      	b.n	8004e5c <__ieee754_pow+0x96c>
 8004e88:	f04f 0a00 	mov.w	sl, #0
 8004e8c:	e720      	b.n	8004cd0 <__ieee754_pow+0x7e0>
 8004e8e:	4621      	mov	r1, r4
 8004e90:	e7d6      	b.n	8004e40 <__ieee754_pow+0x950>
 8004e92:	f04f 0b00 	mov.w	fp, #0
 8004e96:	f8df c078 	ldr.w	ip, [pc, #120]	; 8004f10 <__ieee754_pow+0xa20>
 8004e9a:	f7ff bbb9 	b.w	8004610 <__ieee754_pow+0x120>
 8004e9e:	f04f 0b00 	mov.w	fp, #0
 8004ea2:	f04f 0c00 	mov.w	ip, #0
 8004ea6:	f7ff bbb3 	b.w	8004610 <__ieee754_pow+0x120>
 8004eaa:	4640      	mov	r0, r8
 8004eac:	4649      	mov	r1, r9
 8004eae:	f7ff bb3c 	b.w	800452a <__ieee754_pow+0x3a>
 8004eb2:	9200      	str	r2, [sp, #0]
 8004eb4:	f7ff bb88 	b.w	80045c8 <__ieee754_pow+0xd8>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	f7ff bb72 	b.w	80045a2 <__ieee754_pow+0xb2>
 8004ebe:	bf00      	nop
 8004ec0:	652b82fe 	.word	0x652b82fe
 8004ec4:	3c971547 	.word	0x3c971547
 8004ec8:	00000000 	.word	0x00000000
 8004ecc:	3fe62e43 	.word	0x3fe62e43
 8004ed0:	fefa39ef 	.word	0xfefa39ef
 8004ed4:	3fe62e42 	.word	0x3fe62e42
 8004ed8:	0ca86c39 	.word	0x0ca86c39
 8004edc:	be205c61 	.word	0xbe205c61
 8004ee0:	72bea4d0 	.word	0x72bea4d0
 8004ee4:	3e663769 	.word	0x3e663769
 8004ee8:	c5d26bf1 	.word	0xc5d26bf1
 8004eec:	3ebbbd41 	.word	0x3ebbbd41
 8004ef0:	af25de2c 	.word	0xaf25de2c
 8004ef4:	3f11566a 	.word	0x3f11566a
 8004ef8:	16bebd93 	.word	0x16bebd93
 8004efc:	3f66c16c 	.word	0x3f66c16c
 8004f00:	5555553e 	.word	0x5555553e
 8004f04:	3fc55555 	.word	0x3fc55555
 8004f08:	3fe00000 	.word	0x3fe00000
 8004f0c:	fff00000 	.word	0xfff00000
 8004f10:	3ff00000 	.word	0x3ff00000
 8004f14:	4090cbff 	.word	0x4090cbff
 8004f18:	3f6f3400 	.word	0x3f6f3400

08004f1c <fabs>:
 8004f1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004f20:	4619      	mov	r1, r3
 8004f22:	4770      	bx	lr
 8004f24:	0000      	movs	r0, r0
	...

08004f28 <scalbn>:
 8004f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2a:	4616      	mov	r6, r2
 8004f2c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004f30:	4604      	mov	r4, r0
 8004f32:	460d      	mov	r5, r1
 8004f34:	460b      	mov	r3, r1
 8004f36:	b992      	cbnz	r2, 8004f5e <scalbn+0x36>
 8004f38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004f3c:	4303      	orrs	r3, r0
 8004f3e:	d03c      	beq.n	8004fba <scalbn+0x92>
 8004f40:	4b31      	ldr	r3, [pc, #196]	; (8005008 <scalbn+0xe0>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	f7fb fb84 	bl	8000650 <__aeabi_dmul>
 8004f48:	4b30      	ldr	r3, [pc, #192]	; (800500c <scalbn+0xe4>)
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	429e      	cmp	r6, r3
 8004f4e:	460d      	mov	r5, r1
 8004f50:	da0f      	bge.n	8004f72 <scalbn+0x4a>
 8004f52:	a329      	add	r3, pc, #164	; (adr r3, 8004ff8 <scalbn+0xd0>)
 8004f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f58:	f7fb fb7a 	bl	8000650 <__aeabi_dmul>
 8004f5c:	e006      	b.n	8004f6c <scalbn+0x44>
 8004f5e:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8004f62:	42ba      	cmp	r2, r7
 8004f64:	d109      	bne.n	8004f7a <scalbn+0x52>
 8004f66:	4602      	mov	r2, r0
 8004f68:	f7fb f9bc 	bl	80002e4 <__adddf3>
 8004f6c:	4604      	mov	r4, r0
 8004f6e:	460d      	mov	r5, r1
 8004f70:	e023      	b.n	8004fba <scalbn+0x92>
 8004f72:	460b      	mov	r3, r1
 8004f74:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004f78:	3a36      	subs	r2, #54	; 0x36
 8004f7a:	f24c 3150 	movw	r1, #50000	; 0xc350
 8004f7e:	428e      	cmp	r6, r1
 8004f80:	dd0e      	ble.n	8004fa0 <scalbn+0x78>
 8004f82:	a31f      	add	r3, pc, #124	; (adr r3, 8005000 <scalbn+0xd8>)
 8004f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f88:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8004f8c:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8004f90:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8004f94:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8004f98:	481d      	ldr	r0, [pc, #116]	; (8005010 <scalbn+0xe8>)
 8004f9a:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8004f9e:	e7db      	b.n	8004f58 <scalbn+0x30>
 8004fa0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004fa4:	4432      	add	r2, r6
 8004fa6:	428a      	cmp	r2, r1
 8004fa8:	dceb      	bgt.n	8004f82 <scalbn+0x5a>
 8004faa:	2a00      	cmp	r2, #0
 8004fac:	dd08      	ble.n	8004fc0 <scalbn+0x98>
 8004fae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004fb2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004fb6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004fba:	4620      	mov	r0, r4
 8004fbc:	4629      	mov	r1, r5
 8004fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fc0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004fc4:	da0c      	bge.n	8004fe0 <scalbn+0xb8>
 8004fc6:	a30c      	add	r3, pc, #48	; (adr r3, 8004ff8 <scalbn+0xd0>)
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8004fd0:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8004fd4:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8004fd8:	480e      	ldr	r0, [pc, #56]	; (8005014 <scalbn+0xec>)
 8004fda:	f041 011f 	orr.w	r1, r1, #31
 8004fde:	e7bb      	b.n	8004f58 <scalbn+0x30>
 8004fe0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004fe4:	3236      	adds	r2, #54	; 0x36
 8004fe6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004fea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004fee:	4620      	mov	r0, r4
 8004ff0:	4629      	mov	r1, r5
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	4b08      	ldr	r3, [pc, #32]	; (8005018 <scalbn+0xf0>)
 8004ff6:	e7af      	b.n	8004f58 <scalbn+0x30>
 8004ff8:	c2f8f359 	.word	0xc2f8f359
 8004ffc:	01a56e1f 	.word	0x01a56e1f
 8005000:	8800759c 	.word	0x8800759c
 8005004:	7e37e43c 	.word	0x7e37e43c
 8005008:	43500000 	.word	0x43500000
 800500c:	ffff3cb0 	.word	0xffff3cb0
 8005010:	8800759c 	.word	0x8800759c
 8005014:	c2f8f359 	.word	0xc2f8f359
 8005018:	3c900000 	.word	0x3c900000

0800501c <with_errno>:
 800501c:	b570      	push	{r4, r5, r6, lr}
 800501e:	4604      	mov	r4, r0
 8005020:	460d      	mov	r5, r1
 8005022:	4616      	mov	r6, r2
 8005024:	f7ff f9ca 	bl	80043bc <__errno>
 8005028:	4629      	mov	r1, r5
 800502a:	6006      	str	r6, [r0, #0]
 800502c:	4620      	mov	r0, r4
 800502e:	bd70      	pop	{r4, r5, r6, pc}

08005030 <xflow>:
 8005030:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005032:	4615      	mov	r5, r2
 8005034:	461c      	mov	r4, r3
 8005036:	b180      	cbz	r0, 800505a <xflow+0x2a>
 8005038:	4610      	mov	r0, r2
 800503a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800503e:	e9cd 0100 	strd	r0, r1, [sp]
 8005042:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005046:	4628      	mov	r0, r5
 8005048:	4621      	mov	r1, r4
 800504a:	f7fb fb01 	bl	8000650 <__aeabi_dmul>
 800504e:	2222      	movs	r2, #34	; 0x22
 8005050:	b003      	add	sp, #12
 8005052:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005056:	f7ff bfe1 	b.w	800501c <with_errno>
 800505a:	4610      	mov	r0, r2
 800505c:	4619      	mov	r1, r3
 800505e:	e7ee      	b.n	800503e <xflow+0xe>

08005060 <__math_uflow>:
 8005060:	2200      	movs	r2, #0
 8005062:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005066:	f7ff bfe3 	b.w	8005030 <xflow>

0800506a <__math_oflow>:
 800506a:	2200      	movs	r2, #0
 800506c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005070:	f7ff bfde 	b.w	8005030 <xflow>

08005074 <__ieee754_sqrt>:
 8005074:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8005218 <__ieee754_sqrt+0x1a4>
 8005078:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800507c:	ea3c 0c01 	bics.w	ip, ip, r1
 8005080:	460b      	mov	r3, r1
 8005082:	4606      	mov	r6, r0
 8005084:	460d      	mov	r5, r1
 8005086:	460a      	mov	r2, r1
 8005088:	4604      	mov	r4, r0
 800508a:	d10e      	bne.n	80050aa <__ieee754_sqrt+0x36>
 800508c:	4602      	mov	r2, r0
 800508e:	f7fb fadf 	bl	8000650 <__aeabi_dmul>
 8005092:	4602      	mov	r2, r0
 8005094:	460b      	mov	r3, r1
 8005096:	4630      	mov	r0, r6
 8005098:	4629      	mov	r1, r5
 800509a:	f7fb f923 	bl	80002e4 <__adddf3>
 800509e:	4606      	mov	r6, r0
 80050a0:	460d      	mov	r5, r1
 80050a2:	4630      	mov	r0, r6
 80050a4:	4629      	mov	r1, r5
 80050a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050aa:	2900      	cmp	r1, #0
 80050ac:	dc0d      	bgt.n	80050ca <__ieee754_sqrt+0x56>
 80050ae:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80050b2:	ea5c 0c00 	orrs.w	ip, ip, r0
 80050b6:	d0f4      	beq.n	80050a2 <__ieee754_sqrt+0x2e>
 80050b8:	b139      	cbz	r1, 80050ca <__ieee754_sqrt+0x56>
 80050ba:	4602      	mov	r2, r0
 80050bc:	f7fb f910 	bl	80002e0 <__aeabi_dsub>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	f7fb fbee 	bl	80008a4 <__aeabi_ddiv>
 80050c8:	e7e9      	b.n	800509e <__ieee754_sqrt+0x2a>
 80050ca:	1512      	asrs	r2, r2, #20
 80050cc:	f000 8089 	beq.w	80051e2 <__ieee754_sqrt+0x16e>
 80050d0:	2500      	movs	r5, #0
 80050d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050d6:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80050da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050de:	07d2      	lsls	r2, r2, #31
 80050e0:	bf5c      	itt	pl
 80050e2:	005b      	lslpl	r3, r3, #1
 80050e4:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80050e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80050ec:	bf58      	it	pl
 80050ee:	0064      	lslpl	r4, r4, #1
 80050f0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80050f4:	0062      	lsls	r2, r4, #1
 80050f6:	2016      	movs	r0, #22
 80050f8:	4629      	mov	r1, r5
 80050fa:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 80050fe:	1076      	asrs	r6, r6, #1
 8005100:	190f      	adds	r7, r1, r4
 8005102:	429f      	cmp	r7, r3
 8005104:	bfde      	ittt	le
 8005106:	1bdb      	suble	r3, r3, r7
 8005108:	1939      	addle	r1, r7, r4
 800510a:	192d      	addle	r5, r5, r4
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	3801      	subs	r0, #1
 8005110:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005114:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005118:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800511c:	d1f0      	bne.n	8005100 <__ieee754_sqrt+0x8c>
 800511e:	4604      	mov	r4, r0
 8005120:	2720      	movs	r7, #32
 8005122:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8005126:	428b      	cmp	r3, r1
 8005128:	eb0c 0e00 	add.w	lr, ip, r0
 800512c:	dc02      	bgt.n	8005134 <__ieee754_sqrt+0xc0>
 800512e:	d113      	bne.n	8005158 <__ieee754_sqrt+0xe4>
 8005130:	4596      	cmp	lr, r2
 8005132:	d811      	bhi.n	8005158 <__ieee754_sqrt+0xe4>
 8005134:	f1be 0f00 	cmp.w	lr, #0
 8005138:	eb0e 000c 	add.w	r0, lr, ip
 800513c:	da56      	bge.n	80051ec <__ieee754_sqrt+0x178>
 800513e:	2800      	cmp	r0, #0
 8005140:	db54      	blt.n	80051ec <__ieee754_sqrt+0x178>
 8005142:	f101 0801 	add.w	r8, r1, #1
 8005146:	1a5b      	subs	r3, r3, r1
 8005148:	4641      	mov	r1, r8
 800514a:	4596      	cmp	lr, r2
 800514c:	bf88      	it	hi
 800514e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005152:	eba2 020e 	sub.w	r2, r2, lr
 8005156:	4464      	add	r4, ip
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	3f01      	subs	r7, #1
 800515c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005160:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005164:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005168:	d1dd      	bne.n	8005126 <__ieee754_sqrt+0xb2>
 800516a:	4313      	orrs	r3, r2
 800516c:	d01b      	beq.n	80051a6 <__ieee754_sqrt+0x132>
 800516e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800521c <__ieee754_sqrt+0x1a8>
 8005172:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8005220 <__ieee754_sqrt+0x1ac>
 8005176:	e9da 0100 	ldrd	r0, r1, [sl]
 800517a:	e9db 2300 	ldrd	r2, r3, [fp]
 800517e:	f7fb f8af 	bl	80002e0 <__aeabi_dsub>
 8005182:	e9da 8900 	ldrd	r8, r9, [sl]
 8005186:	4602      	mov	r2, r0
 8005188:	460b      	mov	r3, r1
 800518a:	4640      	mov	r0, r8
 800518c:	4649      	mov	r1, r9
 800518e:	f7fb fcdb 	bl	8000b48 <__aeabi_dcmple>
 8005192:	b140      	cbz	r0, 80051a6 <__ieee754_sqrt+0x132>
 8005194:	e9da 0100 	ldrd	r0, r1, [sl]
 8005198:	e9db 2300 	ldrd	r2, r3, [fp]
 800519c:	f1b4 3fff 	cmp.w	r4, #4294967295
 80051a0:	d126      	bne.n	80051f0 <__ieee754_sqrt+0x17c>
 80051a2:	463c      	mov	r4, r7
 80051a4:	3501      	adds	r5, #1
 80051a6:	106b      	asrs	r3, r5, #1
 80051a8:	0864      	lsrs	r4, r4, #1
 80051aa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80051ae:	07ea      	lsls	r2, r5, #31
 80051b0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80051b4:	bf48      	it	mi
 80051b6:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 80051ba:	4620      	mov	r0, r4
 80051bc:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80051c0:	e76d      	b.n	800509e <__ieee754_sqrt+0x2a>
 80051c2:	0ae3      	lsrs	r3, r4, #11
 80051c4:	3915      	subs	r1, #21
 80051c6:	0564      	lsls	r4, r4, #21
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d0fa      	beq.n	80051c2 <__ieee754_sqrt+0x14e>
 80051cc:	02d8      	lsls	r0, r3, #11
 80051ce:	d50a      	bpl.n	80051e6 <__ieee754_sqrt+0x172>
 80051d0:	f1c2 0020 	rsb	r0, r2, #32
 80051d4:	fa24 f000 	lsr.w	r0, r4, r0
 80051d8:	1e55      	subs	r5, r2, #1
 80051da:	4094      	lsls	r4, r2
 80051dc:	4303      	orrs	r3, r0
 80051de:	1b4a      	subs	r2, r1, r5
 80051e0:	e776      	b.n	80050d0 <__ieee754_sqrt+0x5c>
 80051e2:	4611      	mov	r1, r2
 80051e4:	e7f0      	b.n	80051c8 <__ieee754_sqrt+0x154>
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	3201      	adds	r2, #1
 80051ea:	e7ef      	b.n	80051cc <__ieee754_sqrt+0x158>
 80051ec:	4688      	mov	r8, r1
 80051ee:	e7aa      	b.n	8005146 <__ieee754_sqrt+0xd2>
 80051f0:	f7fb f878 	bl	80002e4 <__adddf3>
 80051f4:	e9da 8900 	ldrd	r8, r9, [sl]
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	4640      	mov	r0, r8
 80051fe:	4649      	mov	r1, r9
 8005200:	f7fb fc98 	bl	8000b34 <__aeabi_dcmplt>
 8005204:	b120      	cbz	r0, 8005210 <__ieee754_sqrt+0x19c>
 8005206:	1ca1      	adds	r1, r4, #2
 8005208:	bf08      	it	eq
 800520a:	3501      	addeq	r5, #1
 800520c:	3402      	adds	r4, #2
 800520e:	e7ca      	b.n	80051a6 <__ieee754_sqrt+0x132>
 8005210:	3401      	adds	r4, #1
 8005212:	f024 0401 	bic.w	r4, r4, #1
 8005216:	e7c6      	b.n	80051a6 <__ieee754_sqrt+0x132>
 8005218:	7ff00000 	.word	0x7ff00000
 800521c:	200000c0 	.word	0x200000c0
 8005220:	200000c8 	.word	0x200000c8

08005224 <_init>:
 8005224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005226:	bf00      	nop
 8005228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800522a:	bc08      	pop	{r3}
 800522c:	469e      	mov	lr, r3
 800522e:	4770      	bx	lr

08005230 <_fini>:
 8005230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005232:	bf00      	nop
 8005234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005236:	bc08      	pop	{r3}
 8005238:	469e      	mov	lr, r3
 800523a:	4770      	bx	lr
